======================================================================
paper_id: 10695055; YEAR: 2017
TITLE: Naturalizing a Programming Language via Interactive Learning
ABSTRACT: objective_label: Our goal is to create a convenient natural language interface for performing well-specified but complex actions such as analyzing data, manipulating text, and querying databases.
background_label: However, existing natural language interfaces for such tasks are quite primitive compared to the power one wields with a programming language.
method_label: To bridge this gap, we start with a core programming language and allow users to"naturalize"the core language incrementally by defining alternative, more natural syntax and increasingly complex concepts in terms of compositions of simpler ones.
method_label: In a voxel world, we show that a community of users can simultaneously teach a common system a diverse language and use it to build hundreds of complex voxel structures.
result_label: Over the course of three days, these users went from using only the core language to using the naturalized language in 85.9\% of the last 10K utterances.
===================================
paper_id: 13004424; YEAR: 2014
adju relevance: Identical (+3)
difference: 1; annotator4: 2; annotator3: 3
sources: cited - title_tfidf - title_tfidfcbow200 - title_cbow200 - abs_cbow200 - specter
TITLE: NLyze: interactive programming by natural language for spreadsheet data analysis and manipulation
ABSTRACT: background_label: Millions of computer end users need to perform tasks over tabular spreadsheet data, yet lack the programming knowledge to do such tasks automatically.
objective_label: This paper describes the design and implementation of a robust natural language based interface to spreadsheet programming.
method_label: Our methodology involves designing a typed domain-specific language (DSL) that supports an expressive algebra of map, filter, reduce, join, and formatting capabilities at a level of abstraction appropriate for non-expert users.
method_label: The key algorithmic component of our methodology is a translation algorithm for converting a natural language specification in the context of a given spreadsheet to a ranked set of likely programs in the DSL.
method_label: The translation algorithm leverages the spreadsheet spatial and temporal context to assign interpretations to specifications with implicit references, and is thus robust to a variety of ways in which end users can express the same task.
method_label: The translation algorithm builds over ideas from keyword programming and semantic parsing to achieve both high precision and high recall.
method_label: We implemented the system as an Excel add-in called NLyze that supports a rich user interaction model including annotating the user's natural language specification and explaining the synthesized DSL programs by paraphrasing them into structured English.
result_label: We collected a total of 3570 English descriptions for 40 spreadsheet tasks and our system was able to generate the intended interpretation as the top candidate for 94% (97 for the top 3) of those instances.

===================================
paper_id: 2527577; YEAR: 1979
adju relevance: Similar (+2)
difference: 1; annotator4: 2; annotator3: 1
sources: specter - title_tfidfcbow200
TITLE: Programming in natural language: “NLC” as a prototype
ABSTRACT: background_label: The state of the art in computational linguistics has progressed to the point where it is now possible to process simple programs written in natural language.
objective_label: This report describes a natural language programming system called NLC which enables a computer user to type English commands into a display terminal and watch them executed on example data shown on the screen.
method_label: The system is designed to process data stored in matrices or tables, and any problem which can be represented in such structures can be handled if the total storage requirements are not excessive.

===================================
paper_id: 18698162; YEAR: 2015
adju relevance: Similar (+2)
difference: 1; annotator4: 1; annotator3: 2
sources: abs_tfidf - abs_tfidfcbow200
TITLE: Provably correct reactive control from natural language
ABSTRACT: background_label: This paper presents an integrated system for generating, troubleshooting, and executing correct-by-construction controllers for autonomous robots using natural language input, allowing non-expert users to command robots to perform high-level tasks.
method_label: This system unites the power of formal methods with the accessibility of natural language, providing controllers for implementable high-level task specifications, easy-to-understand feedback on those that cannot be achieved, and natural language explanation of the reason for the robot’s actions during execution.
method_label: The natural language system uses domain-general components that can easily be adapted to cover the vocabulary of new applications.
method_label: Generation of a linear temporal logic specification from the user’s natural language input uses a novel data structure that allows for subsequent mapping of logical propositions back to natural language, enabling natural language feedback about problems with the specification that are only identifiable in the logical form.
result_label: We demonstrate the robustness of the natural language understanding system through a user study where participants interacted with a simulated robot in a search and rescue scenario.
result_label: Automated analysis and user feedback on unimplementable specifications is demonstrated using an example involving a robot assistant in a hospital.

===================================
paper_id: 62564371; YEAR: 2011
adju relevance: Similar (+2)
difference: 1; annotator4: 1; annotator3: 2
sources: specter - abs_tfidf - abs_tfidfcbow200
TITLE: When FrameNet meets a Controlled Natural Language
ABSTRACT: background_label: There are two approaches to the natural language processing – one is going in width to cover at shallow level (parsing, syntax) the rich linguistic variety found in the natural language, while another is going in depth (semantics, discourse structure) for a monosemous subset of natural language referred to as a controlled natural language (CNL).
background_label: Today we are nowhere near to bridging the gap between the two approaches.
objective_label: In this presentation I argue that despite elusiveness of this goal, FrameNet might provide a sufficient insight into the deeper semantic layers of the natural language to envision a new kind of a rich CNL narrowing the gap with the true natural language.
other_label: A blueprint for PAO, a procedural CNL of such new

===================================
paper_id: 9864100; YEAR: 2016
adju relevance: Similar (+2)
difference: 1; annotator4: 2; annotator3: 1
sources: title_cbow200 - specter
TITLE: Learning a Natural Language Interface with Neural Programmer
ABSTRACT: background_label: Learning a natural language interface for database tables is a challenging task that involves deep language understanding and multi-step reasoning.
background_label: The task is often approached by mapping natural language queries to logical forms or programs that provide the desired response when executed on the database.
objective_label: To our knowledge, this paper presents the first weakly supervised, end-to-end neural network model to induce such programs on a real-world dataset.
method_label: We enhance the objective function of Neural Programmer, a neural network with built-in discrete operations, and apply it on WikiTableQuestions, a natural language question-answering dataset.
method_label: The model is trained end-to-end with weak supervision of question-answer pairs, and does not require domain-specific grammars, rules, or annotations that are key elements in previous approaches to program induction.
result_label: The main experimental result in this paper is that a single Neural Programmer model achieves 34.2% accuracy using only 10,000 examples with weak supervision.
result_label: An ensemble of 15 models, with a trivial combination technique, achieves 37.7% accuracy, which is competitive to the current state-of-the-art accuracy of 37.1% obtained by a traditional natural language semantic parser.

===================================
paper_id: 6630126; YEAR: 2005
adju relevance: Similar (+2)
difference: 1; annotator4: 1; annotator3: 2
sources: specter - title_tfidf - abs_tfidf - abs_tfidfcbow200
TITLE: Programming With Unrestricted Natural Language
ABSTRACT: background_label: AbstractWe argue it is better to program in a natural language such as English, instead of a programming language like Java.
background_label: A natural language interface for programming should result in greater readability, as well as making possible a more intuitive way of writing code.
method_label: In contrast to previous controlled language systems, we allow unrestricted syntax, using wide-coverage syntactic and semantic methods to extract information from the user's instructions.We also look at how people actually give programming instructions in English, collecting and annotating a corpus of such statements.
method_label: We identify differences between sentences in this corpus and in typical newspaper text, and the effect they have on how we process the natural language input.
result_label: Finally, we demonstrate a prototype system, that is capable of translating some English instructions into executable code.

===================================
paper_id: 7697328; YEAR: 1986
adju relevance: Similar (+2)
difference: 1; annotator4: 1; annotator3: 2
sources: specter
TITLE: Semantic Acquisition In TELI: A Transportable, User-Customized Natural Language Processor
ABSTRACT: background_label: We discuss ways of allowing the users of a natural language processor to define, examine, and modify the definitions of any domain-specific words or phrases known to the system.
background_label: An implementation of this work forms a critical portion of the knowledge acquisition component of our Transportable English-Language Interface (TELI).
background_label: which answers English questions about tabular (first normal-form) data files and runs on a Symbolics Lisp Machine.
method_label: However, our techniques enable the design of customization modules that are largely independent of the syntactic and retrieval components of the specific system they supply information to.
method_label: In addition to its obvious practical value.
result_label: this area of research is important because it requires careful attention to the formalisms used by a natural language system and to the interactions among the modules based on those formalisms.

===================================
paper_id: 2373023; YEAR: 2012
adju relevance: Similar (+2)
difference: 1; annotator4: 1; annotator3: 2
sources: abs_cbow200 - abs_tfidf
TITLE: A natural language interface plug-in for cooperative query answering in biological databases
ABSTRACT: background_label: BACKGROUND One of the many unique features of biological databases is that the mere existence of a ground data item is not always a precondition for a query response.
background_label: It may be argued that from a biologist's standpoint, queries are not always best posed using a structured language.
background_label: By this we mean that approximate and flexible responses to natural language like queries are well suited for this domain.
background_label: This is partly due to biologists' tendency to seek simpler interfaces and partly due to the fact that questions in biology involve high level concepts that are open to interpretations computed using sophisticated tools.
background_label: In such highly interpretive environments, rigidly structured databases do not always perform well.
objective_label: In this paper, our goal is to propose a semantic correspondence plug-in to aid natural language query processing over arbitrary biological database schema with an aim to providing cooperative responses to queries tailored to users' interpretations.
background_label: RESULTS Natural language interfaces for databases are generally effective when they are tuned to the underlying database schema and its semantics.
background_label: Therefore, changes in database schema become impossible to support, or a substantial reorganization cost must be absorbed to reflect any change.
method_label: We leverage developments in natural language parsing, rule languages and ontologies, and data integration technologies to assemble a prototype query processor that is able to transform a natural language query into a semantically equivalent structured query over the database.
method_label: We allow knowledge rules and their frequent modifications as part of the underlying database schema.
method_label: The approach we adopt in our plug-in overcomes some of the serious limitations of many contemporary natural language interfaces, including support for schema modifications and independence from underlying database schema.
method_label: CONCLUSIONS The plug-in introduced in this paper is generic and facilitates connecting user selected natural language interfaces to arbitrary databases using a semantic description of the intended application.
result_label: We demonstrate the feasibility of our approach with a practical example.

===================================
paper_id: 62573057; YEAR: 2013
adju relevance: Similar (+2)
difference: 0; annotator4: 2; annotator3: 2
sources: abs_cbow200
TITLE: Controlled English to facilitate human/machine analytical processing
ABSTRACT: background_label: Controlled English is a human-readable information representation format that is implemented using a restricted subset of the English language, but which is unambiguous and directly accessible by simple machine processes.
background_label: We have been researching the capabilities of CE in a number of contexts, and exploring the degree to which a flexible and more human-friendly information representation format could aid the intelligence analyst in a multi-agent collaborative operational environment; especially in cases where the agents are a mixture of other human users and machine processes aimed at assisting the human users.
background_label: CE itself is built upon a formal logic basis, but allows users to easily specify models for a domain of interest in a human-friendly language.
method_label: In our research we have been developing an experimental component known as the “CE Store” in which CE information can be quickly and flexibly processed and shared between human and machine agents.
method_label: The CE Store environment contains a number of specialized machine agents for common processing tasks and also supports execution of logical inference rules that can be defined in the same CE language.
method_label: This paper outlines the basic architecture of this approach, discusses some of the example machine agents that have been developed, and provides some typical examples of the CE language and the way in which it has been used to support complex analytical tasks on synthetic data sources.
result_label: We highlight the fusion of human and machine processing supported through the use of the CE language and CE Store environment, and show this environment with examples of highly dynamic extensions to the model(s) and integration between different user-defined models in a collaborative setting.

===================================
paper_id: 61651749; YEAR: 2013
adju relevance: Similar (+2)
difference: 1; annotator4: 1; annotator3: 2
sources: title_tfidfcbow200 - title_cbow200 - specter
TITLE: Improving Spoken Programming Through Language Design and the Incorporation of Dynamic Context
ABSTRACT: background_label: Spoken programming refers to the idea that human speech can be used as input (via dictation) to create the text of a program.
background_label: Most previous research on spoken programming has focused on enabling diction of text in existing programming languages, either by creating a spoken syntax for the existing language or by attempting to extract the meaning from general English and using it to produce a program.
method_label: We take an alternate approach of modifying the programming language syntax to support speech: We have created a new programming language that uses English words and phrases for its syntax.
result_label: This provides several benefits to the spoken programming process, including easier reuse of existing English-based speech tools and a more direct mapping from user speech onto the visible program text.

===================================
paper_id: 199627711; YEAR: 2011
adju relevance: Similar (+2)
difference: 2; annotator4: 2; annotator3: 0
sources: abs_cbow200
TITLE: Taking shortcuts with OWL using safe macros
ABSTRACT: background_label: Accurate representation of complex domains such as biology demands powerful and expressive ontology languages such as OWL.
background_label: However, the complex nested class expressions required for modeling can be a hindrance to ontology authoring and adoption.
background_label: These class expressions can appear opaque to domain experts, and even users proficient in OWL can benefit from some kind of syntactic sugar or “short-cut” strategy, especially when authoring large ontologies.
method_label: One solution is to have domain experts fill in simple templates (for example, in Excel) and translate the results into more complex axioms, but this has the disadvantage of being disconnected from full ontology authoring and reasoning environment.
method_label: We present here a method of specifying shortcut properties directly in OWL.
method_label: These shortcut properties can be used in similar ways as object properties within the OWL environment, with the resulting simple axioms translated automatically to more complex axioms via macro expansion.
method_label: We describe some example scenarios where this is of use in authoring existing bio-ontologies.
result_label: One of the main implications of this work is a way to simplify the translation between OBO format and OWL, and the use of RDF triple-stores with complex OWL ontologies.

===================================
paper_id: 13234077; YEAR: 2015
adju relevance: Similar (+2)
difference: 1; annotator4: 1; annotator3: 2
sources: specter - abs_cbow200
TITLE: Program Synthesis using Natural Language
ABSTRACT: background_label: Interacting with computers is a ubiquitous activity for millions of people.
background_label: Repetitive or specialized tasks often require creation of small, often one-off, programs.
background_label: End-users struggle with learning and using the myriad of domain-specific languages (DSLs) to effectively accomplish these tasks.
objective_label: We present a general framework for constructing program synthesizers that take natural language (NL) inputs and produce expressions in a target DSL.
method_label: The framework takes as input a DSL definition and training data consisting of NL/DSL pairs.
method_label: From these it constructs a synthesizer by learning optimal weights and classifiers (using NLP features) that rank the outputs of a keyword-programming based translation.
method_label: We applied our framework to three domains: repetitive text editing, an intelligent tutoring system, and flight information queries.
result_label: On 1200+ English descriptions, the respective synthesizers rank the desired program as the top-1 and top-3 for 80% and 90% descriptions respectively.

===================================
paper_id: 14534772; YEAR: 2013
adju relevance: Similar (+2)
difference: 1; annotator4: 2; annotator3: 1
sources: specter - title_cbow200 - abs_cbow200
TITLE: NLify: lightweight spoken natural language interfaces via exhaustive paraphrasing
ABSTRACT: objective_label: This paper presents the design and implementation of a programming system that enables third-party developers to add spoken natural language (SNL) interfaces to standalone mobile applications.
objective_label: The central challenge is to create statistical recognition models that are accurate and resource-efficient in the face of the variety of natural language, while requiring little specialized knowledge from developers.
method_label: We show that given a few examples from the developer, it is possible to elicit comprehensive sets of paraphrases of the examples using internet crowds.
method_label: The exhaustive nature of these paraphrases allows us to use relatively simple, automatically derived statistical models for speech and language understanding that perform well without per-application tuning.
method_label: We have realized our design fully as an extension to the Visual Studio IDE.
result_label: Based on a new benchmark dataset with 3500 spoken instances of 27 commands from 20 subjects and a small developer study, we establish the promise of our approach and the impact of various design choices.

===================================
paper_id: 3514435; YEAR: 2018
adju relevance: Similar (+2)
difference: 1; annotator4: 1; annotator3: 2
sources: specter
TITLE: NL2Bash: A Corpus and Semantic Parser for Natural Language Interface to the Linux Operating System
ABSTRACT: background_label: We present new data and semantic parsing methods for the problem of mapping English sentences to Bash commands (NL2Bash).
objective_label: Our long-term goal is to enable any user to perform operations such as file manipulation, search, and application-specific scripting by simply stating their goals in English.
method_label: We take a first step in this domain, by providing a new dataset of challenging but commonly used Bash commands and expert-written English descriptions, along with baseline methods to establish performance levels on this task.

===================================
paper_id: 12225249; YEAR: 2014
adju relevance: Similar (+2)
difference: 0; annotator4: 2; annotator3: 2
sources: specter - abs_tfidf - title_tfidfcbow200 - abs_cbow200
TITLE: Constructing an Interactive Natural Language Interface for Relational Databases
ABSTRACT: background_label: ABSTRACTNatural language has been the holy grail of query interface designers, but has generally been considered too hard to work with, except in limited specific circumstances.
objective_label: In this paper, we describe the architecture of an interactive natural language query interface for relational databases.
background_label: Through a carefully limited interaction with the user, we are able to correctly interpret complex natural language queries, in a generic manner across a range of domains.
method_label: By these means, a logically complex English language sentence is correctly translated into a SQL query, which may include aggregation, nesting, and various types of joins, among other things, and can be evaluated against an RDBMS.
method_label: We have constructed a system, NaLIR (Natural Language Interface for Relational databases), embodying these ideas.
result_label: Our experimental assessment, through user studies, demonstrates that NaLIR is good enough to be usable in practice: even naive users are able to specify quite complex ad-hoc queries.

===================================
paper_id: 12463490; YEAR: 2008
adju relevance: Similar (+2)
difference: 1; annotator4: 2; annotator3: 1
sources: specter - abs_tfidf - abs_tfidfcbow200
TITLE: Towards portable natural language interfaces to knowledge bases - The case of the ORAKEL system
ABSTRACT: background_label: AbstractThe customization of a natural language interface to a certain application, domain or knowledge base still represents a major effort for end users given the current state-of-the-art.
objective_label: In this article, we present our natural language interface ORA-KEL, describe its architecture, design choices and implementation.
method_label: In particular, we present ORAKEL's adaptation model which allows users which are not familiar with methods from natural language processing (NLP) or formal linguistics to port a natural language interface to a certain domain and knowledge base.
result_label: The claim that our model indeed meets our requirement of intuitive adaptation is experimentally corroborated by diverse experiments with end users showing that non-NLP experts can indeed create domain lexica for our natural language interface leading to similar performance compared to lexica engineered by NLP experts.

===================================
paper_id: 7190108; YEAR: 2005
adju relevance: Similar (+2)
difference: 1; annotator4: 2; annotator3: 1
sources: specter - title_tfidfcbow200
TITLE: NaLIX: an interactive natural language interface for querying XML
ABSTRACT: background_label: Database query languages can be intimidating to the non-expert, leading to the immense recent popularity for keyword based search in spite of its significant limitations.
background_label: The holy grail has been the development of a natural language query interface.
objective_label: We present NaLIX, a generic interactive natural language query interface to an XML database.
method_label: Our system can accept an arbitrary English language sentence as query input, which can include aggregation, nesting, and value joins, among other things.
method_label: This query is translated, potentially after reformulation, into an XQuery expression that can be evaluated against an XML database.
method_label: The translation is done through mapping grammatical proximity of natural language parsed tokens to proximity of corresponding elements in the result XML.
result_label: In this demonstration, we show that NaLIX, while far from being able to pass the Turing test, is perfectly usable in practice, and able to handle even quite complex queries in a variety of application domains.
result_label: In addition, we also demonstrate how carefully designed features in NaLIX facilitate the interactive query process and improve the usability of the interface.

===================================
paper_id: 479235; YEAR: 1998
adju relevance: Related (+1)
difference: 1; annotator4: 1; annotator3: 0
sources: specter
TITLE: A Multilingual Natural-Language Interface To Regular Expressions
ABSTRACT: background_label: This report explains a natural-language interface to the formalism of XFST (Xerox Finite State Tool), which is a rich language used for specifying finite state automata and transducers.
background_label: By using the interface, it is possible to give input to XFST in English and French, as well as to translate formal XFST code into these languages.
background_label: It is also possible to edit XFST source files and their natural-language equivalents interactively, in parallel.
method_label: The interface is based on an abstract syntax of the regular expression language and of a corresponding fragment of natural language.
method_label: The relations between the different components are defined by compositional interpretation and generation functions, and by corresponding combinatory parsers.
method_label: This design has been inspired by the logical grammar of Montague.
method_label: The grammar-driven design makes it easy to extend and to modify the interface, and also to link it with other functionalities such as compiling and semantic reasoning.
method_label: It is also easy to add new languages to the interface.
method_label: Both the grammatical theory and the interface facilities based on it have been implemented in the functional programming language Haskell, which supports a declarative and modular style of programming.
result_label: Some of the modules developed for the interface have other uses as well: there is a type system of regular expressions, preventing some compiler errors, a denotational semantics in terms of lazy lists, and an extension of the XFST script language by definitions of functions.

===================================
paper_id: 105477; YEAR: 1997
adju relevance: Related (+1)
difference: 0; annotator4: 1; annotator3: 1
sources: abs_tfidfcbow200
TITLE: A Semantics-based Communication System for Dysphasic Subjects
ABSTRACT: background_label: Dysphasic subjects do not have complete linguistic abilities and only produce a weakly structured, topicalized language.
background_label: They are offered artificial symbolic languages to help them communicate in a way more adapted to their linguistic abilities.
method_label: After a structural analysis of a corpus of utterances from children with cerebral palsy, we define a semantic lexicon for such a symbolic language.
method_label: We use it as the basis of a semantic analysis process able to retrieve an interpretation of the utterances.
result_label: This semantic analyser is currently used in an application designed to convert iconic languages into natural language; it might find other uses in the field of language rehabilitation.

===================================
paper_id: 2604338; YEAR: 1983
adju relevance: Related (+1)
difference: 1; annotator4: 2; annotator3: 1
sources: specter - abs_tfidf - abs_tfidfcbow200
TITLE: Usable natural language interfaces through menu-based natural language understanding
ABSTRACT: background_label: Conventional natural language interfaces suffer from several ease-of-use problems.
background_label: They require a user to type and to formulate questions in a way that the system can understand.
background_label: They have high failure rates which often frustrate users, and users often do not use features of the systems because they are unaware of them or don't trust them.
background_label: In addition, conventional natural language systems are expensive to build and require large amounts of storage to use.
objective_label: This paper describes a new approach to natural language interfaces called menu-based natural language understanding.
method_label: This new approach solves the problems listed above.
method_label: The paper compares the menu-based natural language approach to conventional natural language interfaces and to other forms of interface and discusses the advantages and limitations of this new approach.

===================================
paper_id: 26580610; YEAR: 2017
adju relevance: Related (+1)
difference: 1; annotator4: 1; annotator3: 0
sources: abs_tfidf - specter
TITLE: Natural Language Data Management and Interfaces: Recent Development and Open Challenges
ABSTRACT: background_label: The volume of natural language text data has been rapidly increasing over the past two decades, due to factors such as the growth of the Web, the low cost associated to publishing and the progress on the digitization of printed texts.
background_label: This growth combined with the proliferation of natural language systems for search and retrieving information provides tremendous opportunities for studying some of the areas where database systems and natural language processing systems overlap.
method_label: This tutorial explores two more relevant areas of overlap to the database community: (1) managing natural language text data in a relational database, and (2) developing natural language interfaces to databases.
method_label: The tutorial presents state-of-the-art methods, related systems, research opportunities and challenges covering both areas.

===================================
paper_id: 6216733; YEAR: 2013
adju relevance: Related (+1)
difference: 0; annotator4: 1; annotator3: 1
sources: cited - title_tfidf - title_tfidfcbow200 - title_cbow200 - abs_cbow200 - specter
TITLE: Using Semantic Unification to Generate Regular Expressions from Natural Language
ABSTRACT: background_label: AbstractWe consider the problem of translating natural language text queries into regular expressions which represent their meaning.
background_label: The mismatch in the level of abstraction between the natural language representation and the regular expression representation make this a novel and challenging problem.
background_label: However, a given regular expression can be written in many semantically equivalent forms, and we exploit this flexibility to facilitate translation by finding a form which more directly corresponds to the natural language.
result_label: We evaluate our technique on a set of natural language queries and their associated regular expressions which we gathered from Amazon Mechanical Turk.
result_label: Our model substantially outperforms a stateof-the-art semantic parsing baseline, yielding a 29% absolute improvement in accuracy.

===================================
paper_id: 6228816; YEAR: 2010
adju relevance: Related (+1)
difference: 1; annotator4: 1; annotator3: 0
sources: cited - title_tfidf - title_tfidfcbow200 - title_cbow200 - abs_cbow200 - specter
TITLE: Inducing Probabilistic CCG Grammars from Logical Form with Higher-Order Unification
ABSTRACT: objective_label: AbstractThis paper addresses the problem of learning to map sentences to logical form, given training data consisting of natural language sentences paired with logical representations of their meaning.
method_label: Previous approaches have been designed for particular natural languages or specific meaning representations; here we present a more general method.
method_label: The approach induces a probabilistic CCG grammar that represents the meaning of individual words and defines how these meanings can be combined to analyze complete sentences.
method_label: We use higher-order unification to define a hypothesis space containing all grammars consistent with the training data, and develop an online learning algorithm that efficiently searches this space while simultaneously estimating the parameters of a log-linear parsing model.
result_label: Experiments demonstrate high accuracy on benchmark data sets in four languages with two different meaning representations.

===================================
paper_id: 2916543; YEAR: 2015
adju relevance: Related (+1)
difference: 1; annotator4: 1; annotator3: 2
sources: specter - abs_tfidf - abs_tfidfcbow200
TITLE: Language to Code: Learning Semantic Parsers for If-This-Then-That Recipes
ABSTRACT: background_label: Using natural language to write programs is a touchstone problem for computational linguistics.
objective_label: We present an approach that learns to map natural-language descriptions of simple “if-then” rules to executable code.
method_label: By training and testing on a large corpus of naturally-occurring programs (called “recipes”) and their natural language descriptions, we demonstrate the ability to effectively map language to code.
result_label: We compare a number of semantic parsing approaches on the highly noisy training data collected from ordinary users, and find that loosely synchronous systems perform best.

===================================
paper_id: 29045129; YEAR: 2005
adju relevance: Related (+1)
difference: 0; annotator4: 1; annotator3: 1
sources: abs_cbow200
TITLE: XQBE: A Graphical Environment to Query XML Data
ABSTRACT: background_label: XQuery, the standard query language for XML, is increasingly popular among computer scientists with SQL background, since XQuery and SQL require comparable skills.
background_label: However, these experts are limited in number, and the availability of easier XQuery “dialects” could be extremely valuable.
objective_label: With this motivation in mind, we designed XQBE, a visual dialect of XQuery inspired by the QBE language (Query by Example).
method_label: Coherent with the hierarchical nature of XML, XQBE uses one or more hierarchical structures to denote the input documents and one structure to denote the document produced in output.
method_label: These structures are annotated to express selection predicates; explicit binding edges connecting the nodes of these structures visualize the input/output mappings.
method_label: This paper presents XQBE through several examples and describes the main features of our implementation of the language, a visual editor coupled with an XQBE-to-XQuery translator.
method_label: Indeed, the XQBE front-end is a general purpose user-friendly visual query interface, capable of providing access to any data storage system that exposes XQuery APIs.
method_label: Available schema information can be exploited to guide users in querying data sets they are not familiar with.
result_label: Also, switching between the visual and textual versions of the same query could be helpful for XQuery learners.

===================================
paper_id: 9955699; YEAR: 2012
adju relevance: Related (+1)
difference: 0; annotator4: 1; annotator3: 1
sources: specter - abs_tfidf - abs_cbow200 - abs_tfidfcbow200
TITLE: Macho: Writing Programs with Natural Language and Examples
ABSTRACT: background_label: Current natural language programming systems avoid the difficulties of dealing with abstract and ambiguous concepts by restricting the input words to those comparable to a normal high-level programming language.
background_label: Our system, Macho can write programs from significantly more abstract language by asking the programmer to provide a unit test: one or more examples of correct input and output.
result_label: This may seem unnecessarily complicated, but we show that natural language and examples have a surprising synergy both in constraining the ambiguity of the specification and in generating correct solutions.

===================================
paper_id: 2975249; YEAR: 2010
adju relevance: Related (+1)
difference: 1; annotator4: 0; annotator3: 1
sources: abs_cbow200 - specter
TITLE: Frame semantics in text-to-scene generation
ABSTRACT: other_label: Abstract.
background_label: 3D graphics scenes are difficult to create, requiring users to learn and utilize a series of complex menus, dialog boxes, and often tedious direct manipulation techniques.
background_label: By giving up some amount of control afforded by such interfaces we have found that users can use natural language to quickly and easily create a wide variety of 3D scenes.
background_label: Natural language offers an interface that is intuitive and immediately accessible by anyone, without requiring any special skill or training.
method_label: The WordsEye system (http://www.wordseye.com) has been used by several thousand users on the web to create over 10,000 scenes.
method_label: The system relies on a large database of 3D models and poses to depict entities and actions.
result_label: We describe how the current version of the system incorporates the type of lexical and real-world knowledge needed to depict scenes from language.

===================================
paper_id: 14790149; YEAR: 2006
adju relevance: Related (+1)
difference: 0; annotator4: 1; annotator3: 1
sources: specter - abs_tfidf - abs_cbow200 - abs_tfidfcbow200
TITLE: NLP (Natural Language Processing) for NLP (Natural Language Programming)
ABSTRACT: background_label: Natural Language Processing holds great promise for making computer interfaces that are easier to use for people, since people will (hopefully) be able to talk to the computer in their own language, rather than learn a specialized language of computer commands.
background_label: For programming, however, the necessity of a formal programming language for communicating with a computer has always been taken for granted.
background_label: We would like to challenge this assumption.
method_label: We believe that modem Natural Language Processing techniques can make possible the use of natural language to (at least partially) express programming ideas, thus drastically increasing the accessibility of programming to non-expert users.
objective_label: To demonstrate the feasibility of Natural Language Programming, this paper tackles what are perceived to be some of the hardest cases: steps and loops.
method_label: We look at a corpus of English descriptions used as programming assignments, and develop some techniques for mapping linguistic constructs onto program structures, which we refer to as programmatic semantics.

===================================
paper_id: 16897092; YEAR: 2000
adju relevance: Related (+1)
difference: 0; annotator4: 1; annotator3: 1
sources: specter - title_tfidf - title_cbow200
TITLE: NaturalJava: a natural language interface for programming in Java
ABSTRACT: background_label: NaturalJava is a prototype for an intelligent natural-language-based user interface for creating, modifying, and examining Java programs.
background_label: The interface exploits three subsystems.
method_label: The Sundance natural language processing system accepts English sentences as input and uses information extraction techniques to generate case frames representing program construction and editing directives.
method_label: A knowledge-based case frame interpreter, PRISM, uses a decision tree to infer program modification operations from the case frames.
method_label: A Java abstract syntax tree manager, TreeFace, provides the interface that PRISM uses to build and navigate the tree representation of an evolving Java program.
result_label: In this paper, we describe the technical details of each component, explain the capabilities of the user interface, and present examples of NaturalJava in use.

===================================
paper_id: 195705682; YEAR: 2007
adju relevance: Related (+1)
difference: 1; annotator4: 1; annotator3: 0
sources: title_tfidfcbow200 - title_tfidf - title_cbow200
TITLE: The Domain-Specific Language Monaco and its Visual Interactive Programming Environment
ABSTRACT: background_label: Monaco is a domain-specific language for machine automation programming.
background_label: It has been developed with the objective to empower domain experts with limited programming capabilities.
background_label: Its main language features are an imperative notation for reactive systems, concepts for describing asynchronous event handling in a concise way, and a state-of-the-art component approach.
background_label: Monaco is a programming language with a Pascal-like syntax, but also comes with a visual programming environment.
result_label: In this paper we review the language Monaco, show the visual representation scheme, report on the programming environment and compare our visual notation to Statecharts.

===================================
paper_id: 195069123; YEAR: 2019
adju relevance: Related (+1)
difference: 0; annotator4: 1; annotator3: 1
sources: title_tfidfcbow200 - title_cbow200
TITLE: Declarative Learning-Based Programming as an Interface to AI Systems
ABSTRACT: background_label: Data-driven approaches are becoming more common as problem-solving techniques in many areas of research and industry.
background_label: In most cases, machine learning models are the key component of these solutions, but a solution involves multiple such models, along with significant levels of reasoning with the models' output and input.
objective_label: Current technologies do not make such techniques easy to use for application experts who are not fluent in machine learning nor for machine learning experts who aim at testing ideas and models on real-world data in the context of the overall AI system.
objective_label: We review key efforts made by various AI communities to provide languages for high-level abstractions over learning and reasoning techniques needed for designing complex AI systems.
result_label: We classify the existing frameworks based on the type of techniques and the data and knowledge representations they use, provide a comparative study of the way they address the challenges of programming real-world applications, and highlight some shortcomings and future directions.

===================================
paper_id: 12867072; YEAR: 2014
adju relevance: Related (+1)
difference: 1; annotator4: 1; annotator3: 0
sources: title_cbow200 - title_tfidfcbow200
TITLE: Task Oriented Programming with Purely Compositional Interactive Scalable Vector Graphics
ABSTRACT: background_label: iTasks enables the rapid creation of multi-user web-applications by automatically generating form-based graphical user interfaces (GUIs) for any first-order type.
background_label: In some situations, however, form-based GUIs are not sufficient or do not even make sense.
objective_label: We introduce a purely compositional library for creating interactive user interface components, based on Scalable Vector Graphics (SVG).
background_label: Not only are all images purely compositional, interaction on them is specified by pure functions.
method_label: The graphics library is integrated with iTasks in such a way that one can easily switch between the generic form-like GUIs and graphics-based user interfaces.
method_label: Still, a large part of the library is fully iTasks-agnostic and can therefore be used in other contexts as well.
result_label: We demonstrate the capabilities of this library by implementing the multi-player Ligretto card game in iTasks.
result_label: This is an interesting case study because it requires a good answer to the challenges of defining multi-user, distributed applications with appealing graphics.

===================================
paper_id: 38805447; YEAR: 2013
adju relevance: Related (+1)
difference: 0; annotator4: 1; annotator3: 1
sources: abs_tfidf - specter - abs_tfidfcbow200
TITLE: Natural language processing future
ABSTRACT: background_label: Natural Language Processing is a technique where machine can become more human and thereby reducing the distance between human being and the machine can be reduced.
background_label: Therefore in simple sense NLP makes human to communicate with the machine easily.
background_label: There are many applications developed in past few decades in NLP.
background_label: Most of these are very useful in everyday life for example a machine that takes instructions by voice.
background_label: There are lots of research groups working on this topic to develop more practical are useful systems.
background_label: Natural Language Processing holds great promise for making computer interfaces that are easier to use for people, since people will hopefully be able to talk to the computer in their own language, rather than learn a specialized language of computer commands.
background_label: For programming, however, the necessity of a formal programming language for communicating with a computer has always been taken for granted.
objective_label: We would like to challenge this assumption.
result_label: We believe that modern Natural Language Processing techniques can make possible the use of natural language to express programming ideas, thus drastically increasing the accessibility of programming to non-expert users.
result_label: To demonstrate the feasibility of Natural Language Programming, this paper tackles what are perceived to be some of the hardest cases: steps and loops.

===================================
paper_id: 30261317; YEAR: 2017
adju relevance: Related (+1)
difference: 0; annotator4: 1; annotator3: 1
sources: abs_cbow200
TITLE: Programming Bots by Synthesizing Natural Language Expressions into API Invocations
ABSTRACT: background_label: At present, bots are still in their preliminary stages of development.
background_label: Many are relatively simple, or developed ad-hoc for a very specific use-case.
background_label: For this reason, they are typically programmed manually, or utilize machine-learning classifiers to interpret a fixed set of user utterances.
background_label: In reality, real world conversations with humans require support for dynamically capturing users expressions.
background_label: Moreover, bots will derive immeasurable value by programming them to invoke APIs for their results.
background_label: Today, within the Web and Mobile development community, complex applications are being stringed together with a few lines of code -- all made possible by APIs.
background_label: Yet, developers today are not as empowered to program bots in much the same way.
method_label: To overcome this, we introduce BotBase, a bot programming platform that dynamically synthesizes natural language user expressions into API invocations.
method_label: Our solution is two faceted: Firstly, we construct an API knowledge graph to encode and evolve APIs; secondly, leveraging the above we apply techniques in NLP, ML and Entity Recognition to perform the required synthesis from natural language user expressions into API calls.

===================================
paper_id: 1836129; YEAR: 2006
adju relevance: Related (+1)
difference: 1; annotator4: 1; annotator3: 0
sources: title_cbow200 - title_tfidfcbow200 - specter
TITLE: Realization of natural language interfaces using lazy functional programming
ABSTRACT: background_label: The construction of natural language interfaces to computers continues to be a major challenge.
background_label: The need for such interfaces is growing now that speech recognition technology is becoming more readily available, and people cannot speak those computer-oriented formal languages that are frequently used to interact with computer applications.
background_label: Much of the research related to the design and implementation of natural language interfaces has involved the use of high-level declarative programming languages.
background_label: This is to be expected as the task is extremely difficult, involving syntactic and semantic analysis of potentially ambiguous input.
background_label: The use of LISP and Prolog in this area is well documented.
result_label: However, research involving the relatively new lazy functional programming paradigm is less well known.
result_label: This paper provides a comprehensive survey of that research.

===================================
paper_id: 11294519; YEAR: 2016
adju relevance: Related (+1)
difference: 0; annotator4: 1; annotator3: 1
sources: specter - abs_cbow200
TITLE: Eviza: A Natural Language Interface for Visual Analysis
ABSTRACT: background_label: Natural language interfaces for visualizations have emerged as a promising new way of interacting with data and performing analytics.
background_label: Many of these systems have fundamental limitations.
background_label: Most return minimally interactive visualizations in response to queries and often require experts to perform modeling for a set of predicted user queries before the systems are effective.
method_label: Eviza provides a natural language interface for an interactive query dialog with an existing visualization rather than starting from a blank sheet and asking closed-ended questions that return a single text answer or static visualization.
method_label: The system employs a probabilistic grammar based approach with predefined rules that are dynamically updated based on the data from the visualization, as opposed to computationally intensive deep learning or knowledge based approaches.
method_label: The result of an interaction is a change to the view (e.g., filtering, navigation, selection) providing graphical answers and ambiguity widgets to handle ambiguous queries and system defaults.
result_label: There is also rich domain awareness of time, space, and quantitative reasoning built in, and linking into existing knowledge bases for additional semantics.
result_label: Eviza also supports pragmatics and exploring multi-modal interactions to help enhance the expressiveness of how users can ask questions about their data during the flow of visual analysis.

===================================
paper_id: 625316; YEAR: 2014
adju relevance: Related (+1)
difference: 0; annotator4: 1; annotator3: 1
sources: title_cbow200 - title_tfidfcbow200
TITLE: A New Skill Based Robot Programming Language Using UML/P Statecharts
ABSTRACT: background_label: This paper introduces the new robot programming language LightRocks (Light Weight Robot Coding for Skills), a domain specific language (DSL) for robot programming.
background_label: The language offers three different level of abstraction for robot programming.
background_label: On lowest level skills are coded by domain experts.
background_label: On a more abstract level these skills are supposed to be combined by shop floor workers or technicians to define tasks.
method_label: The language is designed to allow as much flexibility as necessary on the lowest level of abstraction and is kept as simple as possible with the more abstract layers.
method_label: A Statechart like model is used to describe the different levels of detail.
method_label: For this we apply the UML/P and the language workbench MontiCore.
method_label: To this end we are able to generate code while hiding controller specific implementation details.
result_label: In addition the development in LightRocks is supported by a generic graphical editor implemented as an Eclipse plugin.

===================================
paper_id: 776614; YEAR: 2007
adju relevance: Related (+1)
difference: 0; annotator4: 1; annotator3: 1
sources: specter
TITLE: NaLIX: A generic natural language search environment for XML data
ABSTRACT: background_label: We describe the construction of a generic natural language query interface to an XML database.
background_label: Our interface can accept a large class of English sentences as a query, which can be quite complex and include aggregation, nesting, and value joins, among other things.
method_label: This query is translated, potentially after reformulation, into an XQuery expression.
method_label: The translation is based on mapping grammatical proximity of natural language parsed tokens in the parse tree of the query sentence to proximity of corresponding elements in the XML data to be retrieved.
method_label: Iterative search in the form of followup queries is also supported.
result_label: Our experimental assessment, through a user study, demonstrates that this type of natural language interface is good enough to be usable now, with no restrictions on the application domain.

===================================
paper_id: 7738268; YEAR: 1986
adju relevance: Related (+1)
difference: 1; annotator4: 1; annotator3: 0
sources: abs_tfidfcbow200 - title_tfidf - abs_tfidf - title_tfidfcbow200
TITLE: The PSG system: from formal language definitions to interactive programming environments
ABSTRACT: background_label: The PSG programming system generator developed at the Technical University of Darmstadt produces interactive, language-specific programming environments from formal language definitions.
background_label: All language-dependent parts of the environment are generated from an entirely nonprocedural specification of the language's syntax, context conditions, and dynamic semantics.
method_label: The generated environment consists of a language-based editor, supporting systematic program development by named program fragments, an interpreter, and a fragment library system.
method_label: The major component of the environment is a full-screen editor, which allows both structure and text editing.
method_label: In structure mode the editor guarantees prevention of both syntactic and semantic errors, whereas in textual mode it guarantees their immediate recognition.
method_label: PSG editors employ a novel algorithm for incremental semantic analysis which is based on unification.
method_label: The algorithm will immediately detect semantic errors even in incomplete program fragments.
method_label: The dynamic semantics of the language are defined in denotational style using a functional language based on the lambda calculus.
method_label: Program fragments are compiled to terms of the functional language which are executed by an interpreter.
result_label: The PSG generator has been used to produce environments for Pascal, ALGOL 60, MODULA-2, and the formal language definition language itself.

===================================
paper_id: 449252; YEAR: 2012
adju relevance: Related (+1)
difference: 1; annotator4: 1; annotator3: 0
sources: cited - title_tfidf - title_tfidfcbow200 - title_cbow200 - abs_cbow200 - specter
TITLE: Learning to Map Sentences to Logical Form: Structured Classification with Probabilistic Categorial Grammars
ABSTRACT: objective_label: This paper addresses the problem of mapping natural language sentences to lambda-calculus encodings of their meaning.
method_label: We describe a learning algorithm that takes as input a training set of sentences labeled with expressions in the lambda calculus.
method_label: The algorithm induces a grammar for the problem, along with a log-linear model that represents a distribution over syntactic and semantic analyses conditioned on the input sentence.
result_label: We apply the method to the task of learning natural language interfaces to databases and show that the learned parsers outperform previous methods in two benchmark database domains.

===================================
paper_id: 8580484; YEAR: 2009
adju relevance: Related (+1)
difference: 1; annotator4: 0; annotator3: 1
sources: title_cbow200 - title_tfidfcbow200 - abs_tfidfcbow200
TITLE: Ezhil: A Tamil Programming Language
ABSTRACT: background_label: Ezhil is a Tamil language based interpreted procedural programming language.
background_label: Tamil keywords and grammar are chosen to make the native Tamil speaker write programs in the Ezhil system.
background_label: Ezhil allows easy representation of computer program closer to the Tamil language logical constructs equivalent to the conditional, branch and loop statements in modern English based programming languages.
method_label: Ezhil is a compact programming language aimed towards Tamil speaking novice computer users.
result_label: Grammar for Ezhil and a few example programs are reported here, from the initial proof-of-concept implementation using the Python programming language1.
result_label: To the best of our knowledge, Ezhil language is the first freely available Tamil programming language.

===================================
paper_id: 6774937; YEAR: 2009
adju relevance: Related (+1)
difference: 0; annotator4: 1; annotator3: 1
sources: abs_cbow200
TITLE: DBMSs Should Talk Back Too
ABSTRACT: background_label: Natural language user interfaces to database systems have been studied for several decades now.
background_label: They have mainly focused on parsing and interpreting natural language queries to generate them in a formal database language.
background_label: We envision the reverse functionality, where the system would be able to take the internal result of that translation, say in SQL form, translate it back into natural language, and show it to the initiator of the query for verification.
method_label: Likewise, information extraction has received considerable attention in the past ten years or so, identifying structured information in free text so that it may then be stored appropriately and queried.
result_label: Validation of the records stored with a backward translation into text would again be very powerful.
background_label: Verification and validation of query and data input of a database system correspond to just one example of the many important applications that would benefit greatly from having mature techniques for translating such database constructs into free-flowing text.
background_label: The problem appears to be deceivingly simple, as there are no ambiguities or other complications in interpreting internal database elements, so initially a straightforward translation appears adequate.
background_label: Reality teaches us quite the opposite, however, as the resulting text should be expressive, i.e., accurate in capturing the underlying queries or data, and effective, i.e., allowing fast and unique interpretation of them.
background_label: Achieving both of these qualities is very difficult and raises several technical challenges that need to be addressed.
method_label: In this paper, we first expose the reader to several situations and applications that need translation into natural language, thereby, motivating the problem.
method_label: We then outline, by example, the research problems that need to be solved, separately for data translations and query translations.

===================================
paper_id: 8893652; YEAR: 1983
adju relevance: Related (+1)
difference: 1; annotator4: 1; annotator3: 0
sources: specter - abs_tfidf
TITLE: Menu-Based Natural Language Understanding
ABSTRACT: background_label: Menu-Based Natural Language Understanding is a new approach to building natural language interfaces.
background_label: It retains the main goals of natural language systems: flexibility, expressive power, learnability and mnemonicity.
background_label: However, it solves most of the problems inherent to conventional natural language systems.
background_label: All queries are understood by the system, interface generation is much simpler, and less computing power is required.
method_label: Many interfaces have been built using the menu-based natural language technology.

===================================
paper_id: 62952792; YEAR: 1983
adju relevance: Related (+1)
difference: 1; annotator4: 1; annotator3: 0
sources: title_tfidf
TITLE: Natural Language Programming
ABSTRACT: background_label: A procedural semantics system is described for English imperative sentences in natural language programming.
background_label: Issues related to the handling of dialog focus, noun group resolution, quantifier processing, and imperative verb execution are discussed.
method_label: Sequences of imperative sentences may be assembled to build natural language programs and techniques are given for processing such programs.
result_label: The final sections include a discussion of related research and a brief overview of the field.

===================================
paper_id: 15391397; YEAR: 1978
adju relevance: Related (+1)
difference: 1; annotator4: 1; annotator3: 0
sources: abs_tfidfcbow200 - abs_tfidf - specter
TITLE: Developing a natural language interface to complex data
ABSTRACT: background_label: Aspects of an intelligent interface that provides natural language access to a large body of data distributed over a computer network are described.
method_label: The overall system architecture is presented, showing how a user is buffered from the actual database management systems (DBMSs) by three layers of insulating components.
method_label: These layers operate in series to convert natural language queries into calls to DBMSs at remote sites.
method_label: Attention is then focused on the first of the insulating components, the natural language system.
method_label: A pragmatic approach to language access that has proved useful for building interfaces to databases is described and illustrated by examples.
method_label: Special language features that increase system usability, such as spelling correction, processing of incomplete inputs, and run-time system personalization, are also discussed.
result_label: The language system is contrasted with other work in applied natural language processing, and the system's limitations are analyzed.

===================================
paper_id: 18504610; YEAR: 2014
adju relevance: Related (+1)
difference: 1; annotator4: 0; annotator3: 1
sources: specter - abs_tfidf - abs_tfidfcbow200
TITLE: CommandSpace: modeling the relationships between tasks, descriptions and features
ABSTRACT: background_label: Users often describe what they want to accomplish with an application in a language that is very different from the application's domain language.
method_label: To address this gap between system and human language, we propose modeling an application's domain language by mining a large corpus of Web documents about the application using deep learning techniques.
method_label: A high dimensional vector space representation can model the relationships between user tasks, system commands, and natural language descriptions and supports mapping operations, such as identifying likely system commands given natural language queries and identifying user tasks given a trace of user operations.
result_label: We demonstrate the feasibility of this approach with a system, CommandSpace, for the popular photo editing application Adobe Photoshop.
result_label: We build and evaluate several applications enabled by our model showing the power and flexibility of this approach.

===================================
paper_id: 53783607; YEAR: 1995
adju relevance: Related (+1)
difference: 0; annotator4: 1; annotator3: 1
sources: title_tfidfcbow200 - title_cbow200 - specter
TITLE: From natural language to shell script: A case-based reasoning system for automatic UNIX programming
ABSTRACT: background_label: Abstract We present a case-based approach for natural language interface to a UNIX system with automatic programming ability.
method_label: Natural language commands are analyzed by case-based parsing and then transformed into UNIX shell-scripts by case-based planning with derivational analogy.
method_label: Our system, a Dialogue Interface to uNIX (DINX) demonstrates that natural language parsing should be augmented with automatic programming to provide efficient and user friendly interfaces.
result_label: We suggest case-based reasoning as a unifying framework to combine natural language parsing with automatic programming in a synergistic way.

===================================
paper_id: 52112656; YEAR: 2018
adju relevance: Related (+1)
difference: 1; annotator4: 1; annotator3: 0
sources: specter
TITLE: Mapping Natural Language Commands to Web Elements
ABSTRACT: background_label: The web provides a rich, open-domain environment with textual, structural, and spatial properties.
objective_label: We propose a new task for grounding language in this environment: given a natural language command (e.g.,"click on the second article"), choose the correct element on the web page (e.g., a hyperlink or text box).
other_label: We collected a dataset of over 50,000 commands that capture various phenomena such as functional references (e.g.
other_label: "find who made this site"), relational reasoning (e.g.
other_label: "article by john"), and visual reasoning (e.g.
method_label: "top-most article").
result_label: We also implemented and analyzed three baseline models that capture different phenomena present in the dataset.

===================================
paper_id: 17071916; YEAR: 2014
adju relevance: Related (+1)
difference: 0; annotator4: 1; annotator3: 1
sources: abs_tfidfcbow200 - abs_tfidf
TITLE: Using graph transformation algorithms to generate natural language equivalents of icons expressing medical concepts
ABSTRACT: background_label: A graphical language addresses the need to communicate medical information in a synthetic way.
background_label: Medical concepts are expressed by icons conveying fast visual information about patients' current state or about the known effects of drugs.
background_label: In order to increase the visual language's acceptance and usability, a natural language generation interface is currently developed.
method_label: In this context, this paper describes the use of an informatics method ---graph transformation--- to prepare data consisting of concepts in an OWL-DL ontology for use in a natural language generation component.
method_label: The OWL concept may be considered as a star-shaped graph with a central node.
method_label: The method transforms it into a graph representing the deep semantic structure of a natural language phrase.
result_label: This work may be of future use in other contexts where ontology concepts have to be mapped to half-formalized natural language expressions.

===================================
paper_id: 2623680; YEAR: 2010
adju relevance: Related (+1)
difference: 1; annotator4: 0; annotator3: 1
sources: abs_cbow200
TITLE: Dyna: Extending Datalog For Modern AI ⋆
ABSTRACT: other_label: Abstract.
background_label: Modern statistical AI systems are quite large and complex; this interferes with research, development, and education.
background_label: We point out that most of the computation involves database-like queries and updates on complex views of the data.
background_label: Specifically, recursive queries look up and aggregate relevant or potentially relevant values.
background_label: If the results of these queries are memoized for reuse, the memos may need to be updated through change propagation.
method_label: We propose a declarative language, which generalizes Datalog, to support this work in a generic way.
method_label: Through examples, we show that a broad spectrum of AI algorithms can be concisely captured by writing down systems of equations in our notation.
background_label: Many strategies could be used to actually solve those systems.
background_label: Our examples motivate certain extensions to Datalog, which are connected to functional and object-oriented programming paradigms.
background_label: Why a New Data-Oriented Language for AI?Modern AI systems are frustratingly big, making them time-consuming to engineer and difficult to modify.
objective_label: In this chapter, we describe our work toward a declarative language that was motivated originally by various use cases in AI.
objective_label: Our goal is to make it easier to specify a wide range of new systems that are more or less in the mold of existing AI systems.
method_label: Our declarative language should simplify inferential computation in the same way that the declarative language of regular expressions has simplified string pattern matching and transduction.All areas of AI have become data-intensive, owing to the flood of data and the pervasiveness of statistical modeling and machine learning.
other_label: A system's extensional data (inputs) include not only current sensory input but also background ⋆ This chapter has been condensed for publication; the full version is available as [22] .

===================================
paper_id: 126147940; YEAR: 2019
adju relevance: Related (+1)
difference: 0; annotator4: 1; annotator3: 1
sources: specter
TITLE: Genie: A Generator of Natural Language Semantic Parsers for Virtual Assistant Commands
ABSTRACT: background_label: To understand diverse natural language commands, virtual assistants today are trained with numerous labor-intensive, manually annotated sentences.
background_label: This paper presents a methodology and the Genie toolkit that can handle new compound commands with significantly less manual effort.
objective_label: We advocate formalizing the capability of virtual assistants with a Virtual Assistant Programming Language (VAPL) and using a neural semantic parser to translate natural language into VAPL code.
method_label: Genie needs only a small realistic set of input sentences for validating the neural model.
method_label: Developers write templates to synthesize data; Genie uses crowdsourced paraphrases and data augmentation, along with the synthesized data, to train a semantic parser.
method_label: We also propose design principles that make VAPL languages amenable to natural language translation.
method_label: We apply these principles to revise ThingTalk, the language used by the Almond virtual assistant.
method_label: We use Genie to build the first semantic parser that can support compound virtual assistants commands with unquoted free-form parameters.
method_label: Genie achieves a 62% accuracy on realistic user inputs.
result_label: We demonstrate Genie's generality by showing a 19% and 31% improvement over the previous state of the art on a music skill, aggregate functions, and access control.

===================================
paper_id: 201140361; YEAR: 2017
adju relevance: Related (+1)
difference: 0; annotator4: 1; annotator3: 1
sources: abs_tfidf - abs_cbow200
TITLE: Survey on Natural Language Database Interfaces
ABSTRACT: background_label: This is the era of information technology and most of our data or information is stored in the form of databases on our computers.
background_label: To extract information from our database we need to use a structured language such as SQL (Structured Query Language).
background_label: Thus only the person who has a good knowledge of the SQL language can interact with the database.
background_label: Natural language can be used to retrieve the information from the database in an easier way.
background_label: But computers cannot understand the natural language without any external help.
method_label: Thus Natural language database interfaces(NLDBI) were developed, that converts the query given by the user in natural language into a language that is understood by the computer's database management system i.e.
method_label: Database Query Language(DBQL).
method_label: In this paper, we present a literature review of various Natural Language Database interfaces which have been built over the time and the new techniques that were added every time to make the interface faster than before.
result_label: Then we present some future work that can be done in the field of Natural language Database interfaces to make them faster, reliable, robust and easier.

===================================
paper_id: 269759; YEAR: 2015
adju relevance: Related (+1)
difference: 0; annotator4: 1; annotator3: 1
sources: abs_cbow200
TITLE: AR2SPARQL: An Arabic Natural Language Interface for the Semantic Web
ABSTRACT: background_label: With the growing interest in supporting the Arabic language on the Semantic Web (SW), there is an emerging need to enable Arab users to query ontologies and RDF stores without being challenged with the formal logic of the SW.
background_label: In the domain of English language, several efforts provided Natural Language (NL) interfaces to enable ordinary users to query ontologies using NL queries.
background_label: However, none of these efforts were designed to support the Arabic language which has different morphological and semantic structures.
objective_label: As a step towards supporting Arabic Question Answering (QA) on the SW, this work presents AR2SPARQL, a NL interface that takes questions expressed in Arabic and returns answers drawn from an ontology-based knowledge base.
objective_label: The core of AR2SPARQL is the approach we propose to translate Arabic questions into triples which are matched against RDF data to retrieve an answer.
method_label: The system uses both linguistic and semantic features to resolve ambiguity when matching words to the ontology content.
method_label: To overcome the limited support for Arabic Natural Language Processing (NLP), the system does not make intensive use of sophisticated linguistic methods.
method_label: Instead, it relies more on the knowledge defined in the ontology and the grammar rules we define to capture the structures of Arabic questions and to construct an adequate RDF representations.
result_label: AR2SPARQL has been tested with two different datasets and results have shown that it achieves a good retrieval performance in terms of precision and recall.

===================================
paper_id: 60955048; YEAR: 1989
adju relevance: Related (+1)
difference: 2; annotator4: 0; annotator3: 2
sources: specter
TITLE: LIFE - A Natural Language for Natural Language
ABSTRACT: background_label: Experimenting with formalisms for Natural Language Processing involves costly programming overhead in conventional computing idioms, even as “advanced” as Lisp or Prolog.
background_label: LIFE (Logic, Inheritance, Functions, and Equations) is a programming language which incorporates an elegant type system which supports a powerful facility for structured type inheritance.
background_label: Also, LIFE reconciles styles from Functional Programming and Logic Programming by implicitly delegating control to an automatic suspension mechanism.
method_label: This allows interleaving interpretation of relational and functional expressions which specify abstract structural dependencies on objects.
background_label: Together, these features provide a convenient and versatile power of abstraction for very high-level expression of constrained data structures.
background_label: Computational linguistics is a discipline where such abstractions are particularly useful.
result_label: Therefore, obvious convenience is offered by LIFE for experimentation to the computational linguist, who becomes relieved from burdensome yet extrinsic programming complications.
result_label: We presently attempt to show how LIFE may be a natural computer language for processing natural human languages.

===================================
paper_id: 12736898; YEAR: 2012
adju relevance: Related (+1)
difference: 1; annotator4: 0; annotator3: 1
sources: title_tfidfcbow200
TITLE: mbeddr: an extensible C-based programming language and IDE for embedded systems
ABSTRACT: background_label: While the C programming language provides good support for writing efficient, low-level code, it is not adequate for defining higher-level abstractions relevant to embedded software.
background_label: In this paper we present the mbeddr technology stack that supports extension of C with constructs adequate for embedded systems.
method_label: In mbeddr, efficient low-level programs can be written using the well-known concepts from C. Higher-level domain-specific abstractions can be seamlessly integrated into C by means of modular language extension regarding syntax, type system, semantics and IDE.
method_label: In the paper we show how language extension can address the challenges of embedded software development and report on our experience in building these extensions.
result_label: We show that language workbenches deliver on the promise of significantly reducing the effort of language engineering and the construction of corresponding IDEs.
method_label: mbeddr is built on top of the JetBrains MPS language workbench.
result_label: Both MPS and mbeddr are open source software.

===================================
paper_id: 18681074; YEAR: 2008
adju relevance: Related (+1)
difference: 1; annotator4: 1; annotator3: 0
sources: abs_tfidfcbow200 - abs_tfidf - abs_cbow200 - specter
TITLE: Using natural language processing in order to create SQL queries
ABSTRACT: background_label: Using query language for dealing with databases is always a professional and complex problem.
background_label: This complexity causes the userpsilas usage of data existing in database limits to use definite reports there are in some pre implemented softwares.
background_label: However, you can create this opportunity that each none professional user transfers his questions and requirements to computer in natural language and derives his desired data by natural language processing.
method_label: In this paper we represent a method for building a ldquonatural languages interfaces to data basesrdquo (NLIDB) system.
method_label: This system prepares an ldquoexpert systemrdquo implemented in prolog which it can identify synonymous words in any language.
method_label: It first parses the input sentences, and then the natural language expressions are transformed to SQL language.

===================================
paper_id: 3338644; YEAR: 2005
adju relevance: Related (+1)
difference: 1; annotator4: 1; annotator3: 0
sources: abs_cbow200
TITLE: XQBE (XQuery By Example): A visual interface to the standard XML query language
ABSTRACT: background_label: The spreading of XML data in many contexts of modern computing infrastructures and systems causes a pressing need for adequate XML querying capabilities; to address this need, the W3C is proposing XQuery as the standard query language for XML, with a language paradigm and a syntactic flavor comparable to the SQL relational language.
objective_label: XQuery is designed for meeting the requirements of skilled database programmers; its inherent complexity makes the new language unsuited to unskilled users.In this article we present XQBE (XQuery By Example), a visual query language for expressing a large subset of XQuery in a visual form.
method_label: In designing XQBE, we targeted both unskilled users and expert users wishing to speed up the construction of their queries; we have been inspired by QBE, a relational language initially proposed as an alternative to SQL, which is supported by Microsoft Access.
method_label: QBE is extremely successful among users who are not computer professionals and do not understand the subtleties of query languages, as well as among professionals who can draft their queries very quickly.According to the hierarchical nature of XML, XQBE's main graphical elements are trees.
method_label: One or more trees denote the documents assumed as query input, and one tree denotes the document produced by the query.
result_label: Similar to QBE, trees are annotated so as to express selection predicates, joins, and the passing of information from the input trees to the output tree.This article formally defines the syntax and semantics of XQBE, provides a large set of examples, and presents a prototype implementation.

===================================
paper_id: 58822924; YEAR: 1968
adju relevance: Related (+1)
difference: 0; annotator4: 1; annotator3: 1
sources: abs_tfidfcbow200 - abs_tfidf - specter
TITLE: Natural language learning by computer
ABSTRACT: background_label: Abstract : Learning a natural language is taken as an improvement in a system's ability to express situations in a natural language.
objective_label: This dissertation describes a computer program, called Zbie, written in IPL-V, which accepts the description of situations in a uniform, structured functional language and tries to express these situations in a natural language.
method_label: Examples are given for German and, mostly, Russian.
method_label: At run-time, Zbie builds simple memory structures.
method_label: Patterns and sets are built on the functional language.
method_label: The translation rules of the patterns and an in-context vocabulary provide the transition to the natural language.
result_label: Zbie is a cautious learner, and avoids errors by several mechanisms.
result_label: Zbie is capable of some evolutionary learning.

===================================
paper_id: 17953497; YEAR: 2016
adju relevance: Related (+1)
difference: 1; annotator4: 1; annotator3: 0
sources: specter - abs_tfidf - abs_cbow200 - abs_tfidfcbow200
TITLE: Understanding Natural Language Queries over Relational Databases
ABSTRACT: background_label: Natural language has been the holy grail of query interface designers, but has generally been considered too hard to work with, except in limited specific circumstances.
objective_label: In this paper, we describe the architecture of an interactive natural language query interface for relational databases.
background_label: Through a carefully limited interaction with the user, we are able to correctly interpret complex natural language queries, in a generic manner across a range of domains.
method_label: By these means, a logically complex English language sentence is correctly translated into a SQL query, which may include aggregation, nesting, and various types of joins, among other things, and can be evaluated against an RDBMS.We have constructed a\ system, NaLIR (Natural Language Interface for Relational databases), embodying these ideas.
result_label: Our experimental assessment, through user studies, demonstrates that NaLIR is good enough to be usable in practice: even naive users are able to specify quite complex ad-hoc queries.

===================================
paper_id: 1109254; YEAR: 2012
adju relevance: Related (+1)
difference: 1; annotator4: 1; annotator3: 0
sources: abs_tfidfcbow200 - abs_tfidf
TITLE: Make It So : Continuous , Flexible Natural Language Interaction with an Autonomous Robot
ABSTRACT: background_label: While highly constrained language can be used for robot control, robots that can operate as fully autonomous subordinate agents communicating via rich language remain an open challenge.
objective_label: Toward this end, we developed an autonomous system that supports natural, continuous interaction with the operator through language before, during, and after mission execution.
method_label: The operator communicates instructions to the system through natural language and is given feedback on how each instruction was understood as the system constructs a logical representation of its orders.
method_label: While the plan is executed, the operator is updated on relevant progress via language and images and can change the robot's orders.
method_label: Unlike many other integrated systems of this type, the language interface is built using robust, general purpose parsing and semantics systems that do not rely on domain-specific grammars.
result_label: This system demonstrates a new level of continuous natural language interaction and a novel approach to using general-purpose language and planning components instead of hand-building for the domain.
result_label: Language-enabled autonomous systems of this type represent important progress toward the goal of integrating robots as effective members of human teams.

===================================
paper_id: 23441487; YEAR: 2015
adju relevance: Related (+1)
difference: 1; annotator4: 1; annotator3: 0
sources: abs_cbow200
TITLE: Creating New Languages in Blockly: Two Case Studies in Media Computation and Robotics (Abstract Only)
ABSTRACT: background_label: Introducing programming concepts to children early in their education can be beneficial because the type of problem solving that encompasses computational thinking is becoming increasingly relevant in our daily lives.
background_label: A relatively new breed of programming environments has emerged to address this need.
background_label: Visual programming languages (VPLs) allow programming logic to be represented with diagrams that illustrate its execution flow.
background_label: Popular VPLs (e.g., Scratch, Snap, Alice, App Inventor) exist as full-featured, stand-alone programming environments with diagrammatic representations of the program instructions.
background_label: This representation removes the syntactical barrier to entry that may exist with textual languages.
method_label: Blockly, developed by Google, is a type of block language development kit that allows the rapid construction of new block-based visual programming languages to address a specific pedagogical or content focus.
objective_label: This poster provides a brief tutorial on the steps used to create a new Blockly environment, along with two case studies demonstrating the power of Blockly.
method_label: The two environments introduced are focused on the manipulation of images via operations on pixels (Pixly), and programmatic control of a Sphero robot (Spherly).
method_label: The construction and specific details of these two environments are described and illustrated with html, xml, and Javascript code examples and some of their potential applications.
other_label: More information about Pixly and Spherly can be found at: http://outreach.cs.ua.edu/pixly and http://outreach.cs.ua.edu/spherly

===================================
paper_id: 7643679; YEAR: 2011
adju relevance: Related (+1)
difference: 1; annotator4: 1; annotator3: 0
sources: abs_cbow200 - specter
TITLE: A Concise Query Language with Search and Transform Operations for Corpora with Multiple Levels of Annotation
ABSTRACT: background_label: The usefulness of annotated corpora is greatly increased if there is an associated tool that can allow various kinds of operations to be performed in a simple way.
background_label: Different kinds of annotation frameworks and many query languages for them have been proposed, including some to deal with multiple layers of annotation.
method_label: We present here an easy to learn query language for a particular kind of annotation framework based on 'threaded trees', which are somewhere between the complete order of a tree and the anarchy of a graph.
method_label: Through 'typed' threads, they can allow multiple levels of annotation in the same document.
method_label: Our language has a simple, intuitive and concise syntax and high expressive power.
method_label: It allows not only to search for complicated patterns with short queries but also allows data manipulation and specification of arbitrary return values.
method_label: Many of the commonly used tasks that otherwise require writing programs, can be performed with one or more queries.
result_label: We compare the language with some others and try to evaluate it.

===================================
paper_id: 196101565; YEAR: 2014
adju relevance: Related (+1)
difference: 1; annotator4: 1; annotator3: 2
sources: abs_cbow200
TITLE: SQUALL: the expressiveness of SPARQL 1.1 made available as a controlled natural language 1
ABSTRACT: background_label: The Semantic Web (SW) is now made of billions of triples, which are available as Linked Open Data (LOD) or as RDF stores.
background_label: The SPARQL query language provides a very expressive way to search and explore this wealth of semantic data.
background_label: However, userfriendly interfaces are needed to bridge the gap between end-users and SW formalisms.
background_label: Navigation-based interfaces and natural language interfaces require no or little training, but they cover a small fragment of SPARQL’s expressivity.
method_label: We propose SQUALL, a query and update language that provides the full expressiveness of SPARQL 1.1 through a exible controlled natural language (e.g., solution modiers through superlatives, relational algebra through coordinations, lters through comparatives).
method_label: A comprehensive and modular denition is given as a Montague grammar, and an evaluation of naturalness is done on the QALD challenge.
method_label: SQUALL is conceived as a component of natural language interfaces, to be combined with lexicons, guided input, and contextual disambiguation.
result_label: It is available as a Web service that translates SQUALL sentences to SPARQL, and submits them to SPARQL endpoints (e.g., DBpedia), therefore ensuring SW compliance, and leveraging the eciency of SPARQL engines.

===================================
paper_id: 2705742; YEAR: 2016
adju relevance: Related (+1)
difference: 0; annotator4: 1; annotator3: 1
sources: cited - title_tfidf - title_tfidfcbow200 - title_cbow200 - abs_cbow200 - specter
TITLE: Learning Language Games through Interaction
ABSTRACT: background_label: We introduce a new language learning setting relevant to building adaptive natural language interfaces.
background_label: It is inspired by Wittgenstein's language games: a human wishes to accomplish some task (e.g., achieving a certain configuration of blocks), but can only communicate with a computer, who performs the actual actions (e.g., removing all red blocks).
method_label: The computer initially knows nothing about language and therefore must learn it from scratch through interaction, while the human adapts to the computer's capabilities.
method_label: We created a game in a blocks world and collected interactions from 100 people playing it.
method_label: First, we analyze the humans' strategies, showing that using compositionality and avoiding synonyms correlates positively with task performance.
result_label: Second, we compare computer strategies, showing how to quickly learn a semantic parsing model from scratch, and that modeling pragmatics further accelerates learning for successful players.

===================================
paper_id: 340852; YEAR: 2011
adju relevance: Related (+1)
difference: 1; annotator4: 1; annotator3: 0
sources: cited - title_tfidf - title_tfidfcbow200 - title_cbow200 - abs_cbow200 - specter
TITLE: Learning Dependency-Based Compositional Semantics
ABSTRACT: background_label: Suppose we want to build a system that answers a natural language question by representing its semantics as a logical form and computing the answer given a structured database of facts.
background_label: The core part of such a system is the semantic parser that maps questions to logical forms.
background_label: Semantic parsers are typically trained from examples of questions annotated with their target logical forms, but this type of annotation is expensive.
objective_label: Our goal is to learn a semantic parser from question-answer pairs instead, where the logical form is modeled as a latent variable.
method_label: Motivated by this challenging learning problem, we develop a new semantic formalism, dependency-based compositional semantics (DCS), which has favorable linguistic, statistical, and computational properties.
method_label: We define a log-linear distribution over DCS logical forms and estimate the parameters using a simple procedure that alternates between beam search and numerical optimization.
result_label: On two standard semantic parsing benchmarks, our system outperforms all existing state-of-the-art systems, despite using no annotated logical forms.

===================================
paper_id: 13712055; YEAR: 2018
adju relevance: Related (+1)
difference: 1; annotator4: 1; annotator3: 0
sources: abs_tfidf - specter
TITLE: Natural Language Interfaces with Fine-Grained User Interaction: A Case Study on Web APIs
ABSTRACT: background_label: The rapidly increasing ubiquity of computing puts a great demand on next-generation human-machine interfaces.
background_label: Natural language interfaces, exemplified by virtual assistants like Apple Siri and Microsoft Cortana, are widely believed to be a promising direction.
background_label: However, current natural language interfaces provide users with little help in case of incorrect interpretation of user commands.
objective_label: We hypothesize that the support of fine-grained user interaction can greatly improve the usability of natural language interfaces.
method_label: In the specific setting of natural language interface to web APIs, we conduct a systematic study to verify our hypothesis.
method_label: To facilitate this study, we propose a novel modular sequence-to-sequence model to create interactive natural language interfaces.
method_label: By decomposing the complex prediction process of a typical sequence-to-sequence model into small, highly-specialized prediction units called modules, it becomes straightforward to explain the model prediction to the user, and solicit user feedback to correct possible prediction errors at a fine-grained level.
result_label: We test our hypothesis by comparing an interactive natural language interface with its non-interactive version through both simulation and human subject experiments with real-world APIs.
result_label: We show that with the interactive natural language interface, users can achieve a higher success rate and a lower task completion time, which lead to greatly improved user satisfaction.

===================================
paper_id: 55371239; YEAR: 2017
adju relevance: Related (+1)
difference: 1; annotator4: 1; annotator3: 2
sources: abs_tfidf - abs_cbow200
TITLE: Modeling robotic operations controlled by natural language
ABSTRACT: background_label: There are multiple ways to control a robotic system.
background_label: Most of them require the users to have prior knowledge about robots or get trained before using them.
background_label: Natural language based control attracts increasing attention due to its versatility and less requirements for users.
background_label: Since natural language instructions from users cannot be understood by the robots directly, the linguistic input has to be processed into a formal representation which captures the task specification and removes the ambiguity inherent in natural language.
background_label: For most of existing natural language controlled robotic system, they assume the given language instructions are already in correct orders.
background_label: However, it is very likely for untrained users to give commands in a mixed order based on their direct observation and intuitive thinking.
background_label: Simply following the order of the commands can lead to failures of tasks.
method_label: To provide a remedy for the problem, we propose a novel framework named dependency relation matrix (DRM) to model and organize the semantic information extracted from language input, in order to figure out an executable sequence of subtasks for later execution.
method_label: In addition, the proposed approach projects abstract language input and detailed sensory information into the same space, and uses the difference between the goal specification and temporal status of the task under implementation to monitor the progress of task execution.
result_label: In this paper, we describe the DRM framework in detail, and illustrate the utility of this approach with experiment results.

===================================
paper_id: 202542455; YEAR: 2019
adju relevance: Irrelevant (0)
difference: 0; annotator4: 0; annotator3: 0
sources: abs_tfidfcbow200 - abs_tfidf
TITLE: Countering Language Drift via Visual Grounding
ABSTRACT: background_label: Emergent multi-agent communication protocols are very different from natural language and not easily interpretable by humans.
background_label: We find that agents that were initially pretrained to produce natural language can also experience detrimental language drift: when a non-linguistic reward is used in a goal-based task, e.g.
background_label: some scalar success metric, the communication protocol may easily and radically diverge from natural language.
method_label: We recast translation as a multi-agent communication game and examine auxiliary training constraints for their effectiveness in mitigating language drift.
result_label: We show that a combination of syntactic (language model likelihood) and semantic (visual grounding) constraints gives the best communication performance, allowing pre-trained agents to retain English syntax while learning to accurately convey the intended meaning.

===================================
paper_id: 202661163; YEAR: 2019
adju relevance: Irrelevant (0)
difference: 0; annotator4: 0; annotator3: 0
sources: specter
TITLE: Natural Language Generation for Non-Expert Users
ABSTRACT: objective_label: Motivated by the difficulty in presenting computational results, especially when the results are a collection of atoms in a logical language, to users, who are not proficient in computer programming and/or the logical representation of the results, we propose a system for automatic generation of natural language descriptions for applications targeting mainstream users.
objective_label: Differently from many earlier systems with the same aim, the proposed system does not employ templates for the generation task.
method_label: It assumes that there exist some natural language sentences in the application domain and uses this repository for the natural language description.
method_label: It does not require, however, a large corpus as it is often required in machine learning approaches.
method_label: The systems consist of two main components.
method_label: The first one aims at analyzing the sentences and constructs a Grammatical Framework (GF) for given sentences and is implemented using the Stanford parser and an answer set program.
method_label: The second component is for sentence construction and relies on GF Library.
method_label: The paper includes two use cases to demostrate the capability of the system.
result_label: As the sentence construction is done via GF, the paper includes a use case evaluation showing that the proposed system could also be utilized in addressing a challenge to create an abstract Wikipedia, which is recently discussed in the BlueSky session of the 2018 International Semantic Web Conference.

===================================
paper_id: 10015034; YEAR: 2008
adju relevance: Irrelevant (0)
difference: 1; annotator4: 0; annotator3: 1
sources: title_cbow200 - title_tfidfcbow200 - specter
TITLE: Factorie: Efficient probabilistic programming via imperative declarations of structure, inference and learning
ABSTRACT: background_label: Discriminatively trained undirected graphical models have garnered tremendous interest and empirical success in natural language processing, computer vision, bioinformatics and many other areas [16, 1, 11].
background_label: Some of these models use simple structure (e.g.
background_label: linear-chains, grids, fully-connected affinity graphs), but there has been increasing interest in more complex relational structure— capturing more arbitrary dependencies among sets of variables, in repeated patterns.
background_label: Reimplementing variant structures from scratch is difficult and error-prone, however, and thus there have been several efforts to provide a high-level language in which new undirected model structures can be specified.
result_label: These include SQL [17], first-order logic [13], and others such as Csoft [18].

===================================
paper_id: 8106325; YEAR: 2005
adju relevance: Irrelevant (0)
difference: 0; annotator4: 0; annotator3: 0
sources: abs_tfidfcbow200 - abs_tfidf
TITLE: Connecting language to the world
ABSTRACT: background_label: Language in the WorldHow does language relate to the non-linguistic world?
background_label: If an agent is able to communicate linguistically and is also able to directly perceive and/or act on the world, how do perception, action, and language interact with and influence each other?
background_label: Such questions are surely amongst the most important in Cognitive Science and Artificial Intelligence (AI).
background_label: Language, after all, is a central aspect of the human mind -indeed it may be what distinguishes us from other species.There is sometimes a tendency in the academic world to study language in isolation, as a formal system with rules for well-constructed sentences; or to focus on how language relates to formal notations such as symbolic logic.
background_label: But language did not evolve as an isolated system or as a way of communicating symbolic logic; it presumably evolved as a mechanism for exchanging information about the world, ultimately providing the medium for cultural transmission across generations.
objective_label: Motivated by these observations, the goal of this special issue is to bring together research in AI that focuses on relating language to the physical world.
result_label: Language is of course also used to communicate about non-physical referents, but the ubiquity of physical metaphor in language [21] suggests that grounding in the physical world provides the foundations of semantics.

===================================
paper_id: 1362718; YEAR: 2015
adju relevance: Irrelevant (0)
difference: 0; annotator4: 0; annotator3: 0
sources: abs_cbow200
TITLE: Source-code queries with graph databases - with application to programming language usage and evolution
ABSTRACT: background_label: AbstractProgram querying and analysis tools are of growing importance, and occur in two main variants.
background_label: Firstly there are source-code query languages which help software engineers to explore a system, or to find code in need of refactoring as coding standards evolve.
background_label: These also enable language designers to understand the practical uses of language features and idioms over a software corpus.
background_label: Secondly there are program analysis tools in the style of Coverity which perform deeper program analysis searching for bugs as well as checking adherence to coding standards such as MISRA.The former class are typically implemented on top of relational or deductive databases and make ad-hoc trade-offs between scalability and the amount of source-code detail held-with consequent limitations on the expressiveness of queries.
method_label: The latter class are more commercially driven and involve more ad-hoc queries over program representations, nonetheless similar pressures encourage user-visible domain-specific languages to specify analyses.We argue that a graph data model and associated query language provides a unifying conceptual model and gives efficient scalable implementation even when storing full source-code detail.
result_label: It also supports overlays allowing a query DSL to pose queries at a mixture of syntax-tree, type, control-flow-graph or dataflow levels.We describe a prototype source-code query system built on top of Neo4j using its Cypher graph query language; experiments show it scales to multi-million-line programs while also storing full source-code detail.

===================================
paper_id: 11131225; YEAR: 2006
adju relevance: Irrelevant (0)
difference: 0; annotator4: 0; annotator3: 0
sources: title_tfidf
TITLE: Learning sparse metrics via linear programming
ABSTRACT: background_label: Calculation of object similarity, for example through a distance function, is a common part of data mining and machine learning algorithms.
background_label: This calculation is crucial for efficiency since distances are usually evaluated a large number of times, the classical example being query-by-example (find objects that are similar to a given query object).
background_label: Moreover, the performance of these algorithms depends critically on choosing a good distance function.
background_label: However, it is often the case that (1) the correct distance is unknown or chosen by hand, and (2) its calculation is computationally expensive (e.g., such as for large dimensional objects).
method_label: In this paper, we propose a method for constructing relative-distance preserving low-dimensional mapping (sparse mappings).
background_label: This method allows learning unknown distance functions (or approximating known functions) with the additional property of reducing distance computation time.
method_label: We present an algorithm that given examples of proximity comparisons among triples of objects (object i is more like object j than object k), learns a distance function, in as few dimensions as possible, that preserves these distance relationships.
method_label: The formulation is based on solving a linear programming optimization problem that finds an optimal mapping for the given dataset and distance relationships.
method_label: Unlike other popular embedding algorithms, this method can easily generalize to new points, does not have local minima, and explicitly models computational efficiency by finding a mapping that is sparse, i.e.
method_label: one that depends on a small subset of features or dimensions.
result_label: Experimental evaluation shows that the proposed formulation compares favorably with a state-of-the art method in several publicly available datasets.

===================================
paper_id: 66993832; YEAR: 2013
adju relevance: Irrelevant (0)
difference: 0; annotator4: 0; annotator3: 0
sources: abs_cbow200 - specter
TITLE: Learning Python: Powerful Object-Oriented Programming
ABSTRACT: background_label: The authors of Learning Python show you enough essentials of the Python scripting language to enable you to begin solving problems right away, then reveal more powerful aspects of the language one at a time.
background_label: This approach is sure to appeal to programmers and system administrators who have urgent problems and a preference for learning by semi-guided experimentation.
method_label: First off, Learning Python shows the relationships among Python scripts and their interpreter (in a mostly platform-neutral way).
method_label: Then, the authors address the mechanics of the language itself, providing illustrations of how Python conceives of numbers, strings, and other objects as well as the operators you use to work with them.
method_label: Dictionaries, lists, tuples, and other data structures specific to Python receive plenty of attention including complete examples.
method_label: Authors Mark Lutz and David Ascher build on that fundamental information in their discussions of functions and modules, which evolve into coverage of namespaces, classes, and the object-oriented aspects of Python programming.
method_label: There's also information on creating graphical user interfaces (GUIs) for Python applications with Tkinter.
result_label: In addition to its careful expository prose, Learning Python includes exercises that both test your Python skills and help reveal more elusive truths about the language.

===================================
paper_id: 14812404; YEAR: 2007
adju relevance: Irrelevant (0)
difference: 0; annotator4: 0; annotator3: 0
sources: abs_cbow200
TITLE: Lost in translation: formalizing proposed extensions to c#
ABSTRACT: background_label: Current real-world software applications typically involve heavy use of relational and XML data and their query languages.
background_label: Unfortunately object-oriented languages and database query languages are based on different semantic foundations and optimization strategies.
background_label: The resulting ''ROX (Relations, Objects, XML) impedance mismatc'' makes life very difficult for developers.
background_label: Microsoft Corporation is developing extensions to the .NET framework to facilitate easier processing of non-object-oriented data models.
background_label: Part of this project (known as "LINQ") includes various extensions to the .NET languages to leverage this support.
objective_label: In this paper we consider proposals for C# 3.0, the next version of the C# programming language.
method_label: We give both an informal introduction to the new language features, and a precise formal account by defining a translation from C# 3.0 to C# 2.0.
result_label: This translation also demonstrates how these language extensions do not require any changes to the underlying CLR.

===================================
paper_id: 14412362; YEAR: 1968
adju relevance: Irrelevant (0)
difference: 0; annotator4: 0; annotator3: 0
sources: title_cbow200
TITLE: PAL—a language designed for teaching programming linguistics
ABSTRACT: background_label: This paper describes PAL—a new computer language.
background_label: Given the fact that new languages seem to appear in computer literature at the rate of several per month, it seems incumbent on one who creates a new language to justify having done so.
background_label: In the present case, there are two important considerations: control and specification.
method_label: Let us consider each of these in turn.
result_label: By virtue of our having designed PAL, it is ours.
background_label: There is no PAL Users Group or Committee of Vested Interests concerned with retaining upward compatibility with what was done last year (or last month).
background_label: This doesn't mean we change the specifications of the language every few weeks (our students are, in a real sense, our Committee of Vested Interests), but it does mean we can make decisions on changes solely on technical grounds.
method_label: More important, though, we can design the language to meet the criteria we think important.
background_label: For example, the language almost demands interpretive execution.
method_label: Since no one writes production programs in PAL we are able to put up with inefficiencies in the implementation that would otherwise be intolerable.
result_label: Thus we have designed our own language so that we will have control over it.

===================================
paper_id: 12681857; YEAR: 2014
adju relevance: Irrelevant (0)
difference: 0; annotator4: 0; annotator3: 0
sources: title_tfidfcbow200
TITLE: Bricklayer: An Authentic Introduction to the Functional Programming Language SML
ABSTRACT: background_label: Functional programming languages are seen by many as instrumental to effectively utilizing the computational power of multi-core platforms.
background_label: As a result, there is growing interest to introduce functional programming and functional thinking as early as possible within the computer science curriculum.
background_label: Bricklayer is an API, written in SML, that provides a set of abstractions for creating LEGO artifacts which can be viewed using LEGO Digital Designer.
objective_label: The goal of Bricklayer is to create a problem space (i.e., a set of LEGO artifacts) that is accessible and engaging to programmers (especially novice programmers) while providing an authentic introduction to the functional programming language SML.

===================================
paper_id: 29783854; YEAR: 2006
adju relevance: Irrelevant (0)
difference: 0; annotator4: 0; annotator3: 0
sources: title_tfidf
TITLE: Learning programming by programming: a case study
ABSTRACT: background_label: Programming is a challenging field of computer science for both to teach and learn.
background_label: Although studied extensively, a definite method for teaching programming is yet to be found.
objective_label: In quest of finding success factors in both elementary and more advanced programming courses, this paper discusses some findings made studying exam success and home assignment activity in programming courses.
result_label: Our claim is that there is no shortcut in learning to program, but extensive practise and sufficient time to become familiar with programming concepts is needed.

===================================
paper_id: 121303955; YEAR: 2019
adju relevance: Irrelevant (0)
difference: 1; annotator4: 0; annotator3: 1
sources: title_tfidf
TITLE: Exquisitor: Interactive Learning at Large
ABSTRACT: background_label: Increasing scale is a dominant trend in today's multimedia collections, which especially impacts interactive applications.
background_label: To facilitate interactive exploration of large multimedia collections, new approaches are needed that are capable of learning on the fly new analytic categories based on the visual and textual content.
background_label: To facilitate general use on standard desktops, laptops, and mobile devices, they must furthermore work with limited computing resources.
method_label: We present Exquisitor, a highly scalable interactive learning approach, capable of intelligent exploration of the large-scale YFCC100M image collection with extremely efficient responses from the interactive classifier.
method_label: Based on relevance feedback from the user on previously suggested items, Exquisitor uses semantic features, extracted from both visual and text attributes, to suggest relevant media items to the user.
method_label: Exquisitor builds upon the state of the art in large-scale data representation, compression and indexing, introducing a cluster-based retrieval mechanism that facilitates the efficient suggestions.
method_label: With Exquisitor, each interaction round over the full YFCC100M collection is completed in less than 0.3 seconds using a single CPU core.
result_label: That is 4x less time using 16x smaller computational resources than the most efficient state-of-the-art method, with a positive impact on result quality.
result_label: These results open up many interesting research avenues, both for exploration of industry-scale media collections and for media exploration on mobile devices.

===================================
paper_id: 1777833; YEAR: 2012
adju relevance: Irrelevant (0)
difference: 0; annotator4: 0; annotator3: 0
sources: title_tfidf
TITLE: Evaluating interactive support for secure programming
ABSTRACT: background_label: Implementing secure code is an important and oft-overlooked non-functional requirement.
background_label: Secure programming errors are a subset of program errors that result in many common privacy and security breaches in commercial software.
background_label: We are seeking to provide interactive support for secure programming in the development environment.
method_label: In this paper, we have evaluated our prototype tool, ASIDE, which provides real-time warnings and code generation to reduce secure programming errors introduced by programmers.
method_label: We evaluate the potential use and effectiveness of ASIDE on both novice and professional developers in two comparison user studies.
result_label: Our results demonstrate that the interactive support can help address this important non-functional requirement, and suggest guidelines for such tools to support programmers.

===================================
paper_id: 7451112; YEAR: 2002
adju relevance: Irrelevant (0)
difference: 0; annotator4: 0; annotator3: 0
sources: title_tfidfcbow200 - title_tfidf - title_cbow200
TITLE: LISA: An Interactive Environment for Programming Language Development
ABSTRACT: other_label: Abstract.
background_label: The LISA system is an interactive environment for programming language development.
background_label: From the formal language specifications of a particular programming language LISA produces a language specific environment that includes editors (a language-knowledgable editor and a structured editor), a compiler/interpreter and other graphic tools.
method_label: The LISA is a set of related tools such as scanner generators, parser generators, compiler generators, graphic tools, editors and conversion tools, which are integrated by well-designed interfaces.

===================================
paper_id: 7271567; YEAR: 2012
adju relevance: Irrelevant (0)
difference: 0; annotator4: 0; annotator3: 0
sources: title_cbow200 - title_tfidfcbow200
TITLE: A visual programming language for drawing and executing flowcharts
ABSTRACT: background_label: With recent advances in graphical user interfaces, more and more tasks on computers have become easier to perform.
background_label: Out of the belief that creating computer programs can also be one of them, visual programming languages (VPLs) have emerged.
objective_label: The goal of VPLs is to shift a part of work from the programmer to the IDE so that the programmer can focus more on algorithm logic than the syntax of the implementation programming language.
method_label: In this article, the methods required to build a VPL are presented, with an emphasis on a novel method of code generation in a WHILE language.
method_label: Also, the methods for achieving basic principles of VPLs will be shown - suitable visual presentation of information and guiding the programmer in the right direction using constraints.
method_label: These methods are demonstrated on an example of vIDE, a VPL based on the Eclipse integrated development environment (IDE).
method_label: The design of vIDE with respect to the Eclipse Graphical Modeling Framework (GMF) is described.
method_label: The concept of a flowchart graphical notation is examined in contrast with the algorithm model it maps to.
result_label: Finally, the disambiguity of the model representation of an algorithm is discussed and the methods for transforming it to an actual implementation in a programming language.

===================================
paper_id: 17449634; YEAR: 2014
adju relevance: Irrelevant (0)
difference: 0; annotator4: 0; annotator3: 0
sources: abs_tfidfcbow200
TITLE: Language Transfer Hypotheses with Linear SVM Weights
ABSTRACT: background_label: Language transfer, the characteristic second language usage patterns caused by native language interference, is investigated by Second Language Acquisition (SLA) researchers seeking to find overused and underused linguistic features.
method_label: In this paper we develop and present a methodology for deriving ranked lists of such features.
method_label: Using very large learner data, we show our method’s ability to find relevant candidates using sophisticated linguistic features.
method_label: To illustrate its applicability to SLA research, we formulate plausible language transfer hypotheses supported by current evidence.
result_label: This is the first work to extend Native Language Identification to a broader linguistic interpretation of learner data and address the automatic extraction of underused features on a per-native language basis.

===================================
paper_id: 62016977; YEAR: 2012
adju relevance: Irrelevant (0)
difference: 1; annotator4: 0; annotator3: 1
sources: specter - abs_cbow200
TITLE: On the naturalness of software
ABSTRACT: background_label: Natural languages like English are rich, complex, and powerful.
background_label: The highly creative and graceful use of languages like English and Tamil, by masters like Shakespeare and Avvaiyar, can certainly delight and inspire.
background_label: But in practice, given cognitive constraints and the exigencies of daily life, most human utterances are far simpler and much more repetitive and predictable.
background_label: In fact, these utterances can be very usefully modeled using modern statistical methods.
result_label: This fact has led to the phenomenal success of statistical approaches to speech recognition, natural language translation, question-answering, and text mining and comprehension.
background_label: We begin with the conjecture that most software is also natural, in the sense that it is created by humans at work, with all the attendant constraints and limitations — and thus, like natural language, it is also likely to be repetitive and predictable.
method_label: We then proceed to ask whether a) code can be usefully modeled by statistical language models and b) such models can be leveraged to support software engineers.
method_label: Using the widely adopted n-gram model, we provide empirical evidence supportive of a positive answer to both these questions.
method_label: We show that code is also very repetitive, and in fact even more so than natural languages.
method_label: As an example use of the model, we have developed a simple code completion engine for Java that, despite its simplicity, already improves Eclipse's built-in completion capability.
result_label: We conclude the paper by laying out a vision for future research in this area.

===================================
paper_id: 18412720; YEAR: 2013
adju relevance: Irrelevant (0)
difference: 0; annotator4: 0; annotator3: 0
sources: abs_cbow200
TITLE: Composing DTI Visualizations with End-user Programming
ABSTRACT: background_label: We present the design and prototype implementation of a scientific visualization language called Zifazah for composing 3D visualizations of diffusion tensor magnetic resonance imaging (DT-MRI or DTI) data.
objective_label: Unlike existing tools allowing flexible customization of data visualizations that are programmer-oriented, we focus on domain scientists as end users in order to enable them to freely compose visualizations of their scientific data set.
method_label: We analyzed end-user descriptions extracted from interviews with neurologists and physicians conducting clinical practices using DTI about how they would build and use DTI visualizations to collect syntax and semantics for the language design, and have discovered the elements and structure of the proposed language.
method_label: Zifazah makes use of the initial set of lexical terms and semantics to provide a declarative language in the spirit of intuitive syntax and usage.
objective_label: This work contributes three, among others, main design principles for scientific visualization language design as well as a practice of such language for DTI visualization with Zifazah.
method_label: First, Zifazah incorporated visual symbolic mapping based on color, size and shape, which is a sub-set of Bertin's taxonomy migrated to scientific visualizations.
method_label: Second, Zifazah is defined as a spatial language whereby lexical representation of spatial relationship for 3D object visualization and manipulations, which is characteristic of scientific data, can be programmed.
method_label: Third, built on top of Bertin's semiology, flexible data encoding specifically for scientific visualizations is integrated in our language in order to allow end users to achieve optimal visual composition at their best.
result_label: Along with sample scripts representative of our language design features, some new DTI visualizations as the running results created by end users using the novel visualization language have also been presented.

===================================
paper_id: 7632414; YEAR: 2014
adju relevance: Irrelevant (0)
difference: 0; annotator4: 0; annotator3: 0
sources: title_tfidfcbow200
TITLE: Pabble: Parameterised Scribble for Parallel Programming
ABSTRACT: background_label: Many parallel and distributed message-passing programs are written in a parametric way over available resources, in particular the number of nodes and their topologies, so that a single parallel program can scale over different environments.
objective_label: This paper presents a parameterised protocol description language, Pabble, which can guarantee safety and progress in a large class of practical, complex parameterised message-passing programs through static checking.
method_label: Pabble can describe an overall interaction topology, using a concise and expressive notation, designed for a variable number of participants arranged in multiple dimensions.
method_label: These parameterised protocols in turn automatically generate local protocols for type checking parameterised MPI programs for communication safety and deadlock freedom.
method_label: In spite of undecidability of endpoint projection and type checking in the underlying parameterised session type theory, our method guarantees the termination of endpoint projection and type checking.

===================================
paper_id: 15219837; YEAR: 2008
adju relevance: Irrelevant (0)
difference: 0; annotator4: 0; annotator3: 0
sources: title_tfidfcbow200 - title_cbow200
TITLE: Meaningful learning in the tutoring system for programming
ABSTRACT: background_label: Tutoring systems for programming helps students to understand features of target programming language, and develops their general problem solving skill.
background_label: Our system guides novices in learning syntax and semantics of programming language, problem decomposition, program design and testing.
method_label: The notional machine defined by programming language and its verbal description of instruction actions helps students to understand semantics of instructions.
result_label: Advancement through the course material controlled by computer teacher supports connection of new concepts to the present studentpsilas knowledge.

===================================
paper_id: 53743215; YEAR: 2006
adju relevance: Irrelevant (0)
difference: 0; annotator4: 0; annotator3: 0
sources: title_cbow200 - title_tfidfcbow200
TITLE: Parson's programming puzzles: a fun and effective learning tool for first programming courses
ABSTRACT: background_label: Mastery of basic syntactic and logical constructs is an essential part of learning to program.
background_label: Unfortunately, practice exercises for programming basics can be very tedious, making it difficult to motivate students.
objective_label: In this paper we describe Parson's Programming Puzzles, an automated, interactive tool that provides practice with basic programming principles in an entertaining puzzle-like format.
method_label: Careful design of the items in the puzzles allows the tutor to highlight particular topics and common programming errors.
method_label: Since each puzzle solution is a complete sample of well-written code, use of the tool exposes students to good programming practice.
objective_label: This paper discusses the motivation of Parson's Programming Puzzles, and gives several examples.
method_label: We describe the web-based authoring tool used to build the puzzles, and present our plans for future development.

===================================
paper_id: 855173; YEAR: 2016
adju relevance: Irrelevant (0)
difference: 0; annotator4: 0; annotator3: 0
sources: title_tfidfcbow200 - title_cbow200
TITLE: Juniper: a functional reactive programming language for the Arduino
ABSTRACT: objective_label: This paper presents the design and implementation of Juniper: a functional reactive programming language (FRP) targeting the Arduino and related microcontroller systems.
background_label: Juniper provides a number of high level features, including parametric polymorphic functions, anonymous functions, automatic memory management, and immutable data structures.
method_label: Also included is a standard library which offers many useful FRP signal processing functions.
method_label: Juniper is translated to standard C++ and compiled with the existing Arduino development tools, allowing Juniper programs to fit on resource-constrained devices, and enabling seamless interoperability with existing C++ libraries for these devices.

===================================
paper_id: 3588950; YEAR: 2008
adju relevance: Irrelevant (0)
difference: 0; annotator4: 0; annotator3: 0
sources: title_cbow200 - title_tfidf
TITLE: Towards adaptive programming: integrating reinforcement learning into a programming language
ABSTRACT: background_label: Current programming languages and software engineering paradigms are proving insufficient for building intelligent multi-agent systems--such as interactive games and narratives--where developers are called upon to write increasingly complex behavior for agents in dynamic environments.
background_label: A promising solution is to build adaptive systems; that is, to develop software written specifically to adapt to its environment by changing its behavior in response to what it observes in the world.
method_label: In this paper we describe a new programming language, An Adaptive Behavior Language (A2BL), that implements adaptive programming primitives to support partial programming, a paradigm in which a programmer need only specify the details of behavior known at code-writing time, leaving the run-time system to learn the rest.
method_label: Partial programming enables programmers to more easily encode software agents that are difficult to write in existing languages that do not offer language-level support for adaptivity.
result_label: We motivate the use of partial programming with an example agent coded in a cutting-edge, but non-adaptive agent programming language (ABL), and show how A2BL can encode the same agent much more naturally.

===================================
paper_id: 11777029; YEAR: 1962
adju relevance: Irrelevant (0)
difference: 0; annotator4: 0; annotator3: 0
sources: title_tfidf
TITLE: A programming language
ABSTRACT: background_label: The paper describes a succinct problem-oriented programming language.
background_label: The language is broad in scope, having been developed for, and applied effectively in, such diverse areas as microprogramming, switching theory, operations research, information retrieval, sorting theory, structure of compilers, search procedures, and language translation.
background_label: The language permits a high degree of useful formalism.
method_label: It relies heavily on a systematic extension of a small set of basic operations to vectors, matrices, and trees, and on a family of flexible selection operations controlled by logical vectors.
result_label: Illustrations are drawn from a variety of applications.

===================================
paper_id: 43081235; YEAR: 2001
adju relevance: Irrelevant (0)
difference: 0; annotator4: 0; annotator3: 0
sources: title_tfidfcbow200 - title_tfidf - title_cbow200
TITLE: Design and implementation of an intelligent web-based interactive language learning system
ABSTRACT: objective_label: The design and implementation of an Intelligent Web-based Interactive Language Learning (IWiLL) system to support English learning on the Internet is described.
method_label: We designed two kinds of learning environments: (1) interactive English writing environment and (2) mining movies for real English.
method_label: These are intended to improve learners’ basic language skills such as listening, reading, and writing.
method_label: In addition, the system also offers authoring tools that facilitate teachers’ content preparation.
method_label: The system not only provides multimedia learning environments for users, but also builds a learner corpus, an archive of annotated English texts written by learners for whom English is a second language.
result_label: Further analysis of the learner corpus creates the potential to detect the users’ persistent errors and then provide adequate help to the users.

===================================
paper_id: 16141377; YEAR: 2007
adju relevance: Irrelevant (0)
difference: 0; annotator4: 0; annotator3: 0
sources: title_tfidfcbow200
TITLE: WinHIPE: an IDE for functional programming based on rewriting and visualization
ABSTRACT: background_label: The article describes an IDE for functional programming, called WinHIPE.
background_label: It provides an interactive and flexible tracer, as well as a powerful visualization and animation system.
method_label: The former tool is based on the rewriting model of evaluation, and the latter provides automatic generation of visualizations and animations, friendly support for customization, maintenance and exportation of animations to the Web, and facilities to cope with large scale.
method_label: Its main advantage over other visualization systems is an effortless approach to animation creation and maintenance, based on generating visualizations and animations automatically, as a side effect of program execution.
result_label: Finally, we briefly describe our experience using the system during several years in educational settings.

===================================
paper_id: 61849710; YEAR: 2005
adju relevance: Irrelevant (0)
difference: 0; annotator4: 0; annotator3: 0
sources: title_tfidf
TITLE: A Language for Generic Programming
ABSTRACT: background_label: The past decade of software library construction has demonstrated that the discipline of generic programming is an effective approach to the design and implementation of large-scale software libraries.
background_label: At the heart of generic programming is a semi-formal interface specification language for generic components.
background_label: Many programming languages have features for describing interfaces, but none of them match the generic programming specification language, and none are as suitable for specifying generic components.
background_label: This lack of language support impedes the current practice of generic programming.
objective_label: In this dissertation I present and evaluate the design of a new programming language, named G (for generic), that integrates the generic programming specification language with the type system and features of a full programming language.
method_label: The design of G is based on my experiences, and those of colleagues, in the construction of generic libraries over the past decade.
method_label: The design space for programming languages is large, thus this experience is vital in guiding choices among the many tradeoffs.
method_label: The design of G emphasizes modularity because generic programming is inherently about composing separately developed components.
result_label: In this dissertation I demonstrate that the design is implementable by constructing a compiler for G (translating to C++) and show the suitability of G for generic programming with prototypes of the Standard Template Library and the Boost Graph Library in G .
result_label: I formalize the essential features of G in a small language and prove type soundness.

===================================
paper_id: 9491703; YEAR: 2012
adju relevance: Irrelevant (0)
difference: 0; annotator4: 0; annotator3: 0
sources: title_cbow200 - title_tfidf - abs_cbow200 - specter
TITLE: MyProLang - My Programming Language: A Template-Driven Automatic Natural Programming Language
ABSTRACT: background_label: Modern computer programming languages are governed by complex syntactic rules.
background_label: They are unlike natural languages; they require extensive manual work and a significant amount of learning and practicing for an individual to become skilled at and to write correct programs.
background_label: Computer programming is a difficult, complicated, unfamiliar, non-automated, and a challenging discipline for everyone; especially, for students, new programmers and end-users.
objective_label: This paper proposes a new programming language and an environment for writing computer applications based on source-code generation.
method_label: It is mainly a template-driven automatic natural imperative programming language called MyProLang.
background_label: It harnesses GUI templates to generate proprietary natural language source-code, instead of having computer programmers write the code manually.
background_label: MyProLang is a blend of five elements.
method_label: A proprietary natural programming language with unsophisticated grammatical rules and expressive syntax; automation templates that automate the generation of instructions and thereby minimizing the learning and training time; an NLG engine to generate natural instructions; a source-to-source compiler that analyzes, parses, and build executables; and an ergonomic IDE that houses diverse functions whose role is to simplify the software development process.
method_label: MyProLang is expected to make programming open to everyone including students, programmers and end-users.
method_label: In that sense, anyone can start programming systematically, in an automated manner and in natural language; without wasting time in learning how to formulate instructions and arrange expressions, without putting up with unfamiliar structures and symbols, and without being annoyed by syntax errors.
result_label: In the long run, this increases the productivity, quality and time-to-market in software development.

===================================
paper_id: 7626370; YEAR: 2012
adju relevance: Irrelevant (0)
difference: 0; annotator4: 0; annotator3: 0
sources: title_tfidfcbow200
TITLE: A decentralized approach for programming interactive applications with JavaScript and blockly
ABSTRACT: background_label: We present a decentralized-control methodology and a tool-set for developing interactive user interfaces.
objective_label: We focus on the common case of developing the client side of Web applications.
objective_label: Our approach is to combine visual programming using Google Blockly with a single-threaded implementation of behavioral programming in JavaScript.
method_label: We show how the behavioral programming principles can be implemented with minimal programming resources, i.e., with a single-threaded environment using coroutines.
method_label: We give initial, yet full, examples of how behavioral programming is instrumental in addressing common issues in this application domain, e.g., that it facilitates separation of graphical representation from logic and handling of complex inter-object scenarios.
result_label: The implementation in JavaScript and Blockly (separately and together) expands the availability of behavioral programming capabilities, previously implemented in LSC, Java, Erlang and C++, to audiences with different skill-sets and design approaches.

===================================
paper_id: 15425134; YEAR: 2012
adju relevance: Irrelevant (0)
difference: 0; annotator4: 0; annotator3: 0
sources: abs_tfidfcbow200 - abs_cbow200
TITLE: Cross-Language Code Analysis and Refactoring
ABSTRACT: background_label: Software composed of artifacts written in multiple (programming) languages is pervasive in today's enterprise, desktop, and mobile applications.
background_label: Since they form one system, artifacts from different languages reference one another, thus creating what we call semantic cross-language links.
background_label: By their very nature, such links are out of scope of the individual programming language, they are ignored by most language-specific tools and are often only established -- and checked for errors -- at runtime.
background_label: This is unfortunate since it requires additional testing, leads to brittle code, and lessens maintainability.
objective_label: In this paper, we advocate a generic approach to understanding, analyzing and refactoring cross-language code by explicitly specifying and exploiting semantic links with the aim of giving developers the same amount of control over and confidence in multi-language programs they have for single-language code today.

===================================
paper_id: 1942340; YEAR: 2004
adju relevance: Irrelevant (0)
difference: 0; annotator4: 0; annotator3: 0
sources: specter
TITLE: Modern Natural Language Interfaces To Databases: Composing Statistical Parsing With Semantic Tractability
ABSTRACT: background_label: Natural Language Interfaces to Databases (NLIs) can benefit from the advances in statistical parsing over the last fifteen years or so.
background_label: However, statistical parsers require training on a massive, labeled corpus, and manually creating such a corpus for each database is prohibitively expensive.
objective_label: To address this quandary, this paper reports on the PRECISE NLI, which uses a statistical parser as a "plug in".
method_label: The paper shows how a strong semantic model coupled with "light re-training" enables PRECISE to overcome parser errors, and correctly map from parsed questions to the corresponding SQL queries.
result_label: We discuss the issues in using statistical parsers to build database-independent NLIs, and report on experimental results with the benchmark ATIS data set where PRECISE achieves 94% accuracy.

===================================
paper_id: 53280703; YEAR: 2018
adju relevance: Irrelevant (0)
difference: 0; annotator4: 0; annotator3: 0
sources: abs_cbow200
TITLE: Computational Thinking with the Web Crowd using CodeMapper
ABSTRACT: background_label: It has been argued that computational thinking should precede computer programming in the course of a career in computing.
background_label: This argument is the basis for the slogan"logic first, syntax later"and the development of many cryptic syntax removed programming languages such as Scratch!, Blockly and Visual Logic.
objective_label: The goal is to focus on the structuring of the semantic relationships among the logical building blocks to yield solutions to computational problems.
background_label: While this approach is helping novice programmers and early learners, the gap between computational thinking and professional programming using high level languages such as C++, Python and Java is quite wide.
background_label: It is wide enough for about one third students in first college computer science classes to drop out or fail.
method_label: In this paper, we introduce a new programming platform, called the CodeMapper, in which learners are able to build computational logic in independent modules and aggregate them to create complex modules.
method_label: Code{\em Mapper} is an abstract development environment in which rapid visual prototyping of small to substantially large systems is possible by combining already developed independent modules in logical steps.
method_label: The challenge we address involves supporting a visual development environment in which"annotated code snippets"authored by the masses in social computing sites such as SourceForge, StackOverflow or GitHub can also be used as is into prototypes and mapped to real executable programs.
result_label: CodeMapper thus facilitates soft transition from visual programming to syntax driven programming without having to practice syntax too heavily.

===================================
paper_id: 15539014; YEAR: 2004
adju relevance: Irrelevant (0)
difference: 0; annotator4: 0; annotator3: 0
sources: abs_tfidfcbow200
TITLE: Lexical triggers and latent semantic analysis for cross-lingual language model adaptation
ABSTRACT: background_label: In-domain texts for estimating statistical language models are not easily found for most languages of the world.
objective_label: We present two techniques to take advantage of in-domain text resources in other languages.
method_label: First, we extend the notion of <i>lexical triggers</i>, which have been used monolingually for language model adaptation, to the cross-lingual problem, permitting the construction of sharper language models for a target-language document by drawing statistics from related documents in a resource-rich language.
method_label: Next, we show that <i>cross-lingual latent semantic analysis</i> is similarly capable of extracting useful statistics for language modeling.
method_label: Neither technique requires explicit translation capabilities between the two languages!
result_label: We demonstrate significant reductions in both perplexity and word error rate on a Mandarin speech recognition task by using these techniques.

===================================
paper_id: 13465688; YEAR: 2014
adju relevance: Irrelevant (0)
difference: 1; annotator4: 1; annotator3: 0
sources: title_tfidf - abs_tfidfcbow200
TITLE: Assessing automatic text classification for interactive language learning
ABSTRACT: objective_label: In this paper we discuss the design options for a language processing tool that supports humans in their task of classifying text excerpts according to CEFR levels of language proficiency.
method_label: We describe the tool that we developed on the basis of these design options and provide an assessment of its functioning.
method_label: This tool is suitable to be used by students taking courses of Portuguese as a second language, as well as by expert instructors selecting items of exam that are aimed at assessing and certifying the language level of these students.
method_label: It is an instrument that aims at supporting humans in their language level classification judgments by providing conditions to more consistent and objectively sustained judgments across different occasions and input texts and across different human classifiers.
result_label: Its design principles and underlying language technology can be applied to develop similar tools for any other language.

===================================
paper_id: 1691990; YEAR: 2016
adju relevance: Irrelevant (0)
difference: 0; annotator4: 0; annotator3: 0
sources: abs_tfidf - abs_tfidfcbow200
TITLE: Language Networks as Models of Cognition: Understanding Cognition through Language
ABSTRACT: background_label: Language is inherently cognitive and distinctly human.
background_label: Separating the object of language from the human mind that processes and creates language fails to capture the full language system.
background_label: Linguistics traditionally has focused on the study of language as a static representation, removed from the human mind.
background_label: Network analysis has traditionally been focused on the properties and structure that emerge from network representations.
result_label: Both disciplines could gain from looking at language as a cognitive process.
background_label: In contrast, psycholinguistic research has focused on the process of language without committing to a representation.
background_label: However, by considering language networks as approximations of the cognitive system we can take the strength of each of these approaches to study human performance and cognition as related to language.
objective_label: This paper reviews research showcasing the contributions of network science to the study of language.
method_label: Specifically, we focus on the interplay of cognition and language as captured by a network representation.
method_label: To this end, we review different types of language network representations before considering the influence of global level network features.
result_label: We continue by considering human performance in relation to network structure and conclude with theoretical network models that offer potential and testable explanations of cognitive and linguistic phenomena.

===================================
paper_id: 497108; YEAR: 2017
adju relevance: Irrelevant (0)
difference: 0; annotator4: 0; annotator3: 0
sources: specter
TITLE: Learning a Neural Semantic Parser from User Feedback
ABSTRACT: background_label: We present an approach to rapidly and easily build natural language interfaces to databases for new domains, whose performance improves over time based on user feedback, and requires minimal intervention.
method_label: To achieve this, we adapt neural sequence models to map utterances directly to SQL with its full expressivity, bypassing any intermediate meaning representations.
method_label: These models are immediately deployed online to solicit feedback from real users to flag incorrect queries.
method_label: Finally, the popularity of SQL facilitates gathering annotations for incorrect predictions using the crowd, which is directly used to improve our models.
method_label: This complete feedback loop, without intermediate representations or database specific engineering, opens up new ways of building high quality semantic parsers.
result_label: Experiments suggest that this approach can be deployed quickly for any new target domain, as we show by learning a semantic parser for an online academic database from scratch.

===================================
paper_id: 6674405; YEAR: 2011
adju relevance: Irrelevant (0)
difference: 1; annotator4: 1; annotator3: 0
sources: abs_tfidf
TITLE: Fence - An Efficient Parser with Ambiguity Support for Model-Driven Language Specification
ABSTRACT: background_label: Model-based language specification has applications in the implementation of language processors, the design of domain-specific languages, model-driven software development, data integration, text mining, natural language processing, and corpus-based induction of models.
background_label: Model-based language specification decouples language design from language processing and, unlike traditional grammar-driven approaches, which constrain language designers to specific kinds of grammars, it needs general parser generators able to deal with ambiguities.
objective_label: In this paper, we propose Fence, an efficient bottom-up parsing algorithm with lexical and syntactic ambiguity support that enables the use of model-based language specification in practice.

===================================
paper_id: 8034253; YEAR: 2010
adju relevance: Irrelevant (0)
difference: 0; annotator4: 0; annotator3: 0
sources: title_tfidfcbow200 - title_cbow200
TITLE: BioRuby: bioinformatics software for the Ruby programming language
ABSTRACT: background_label: SUMMARY The BioRuby software toolkit contains a comprehensive set of free development tools and libraries for bioinformatics and molecular biology, written in the Ruby programming language.
background_label: BioRuby has components for sequence analysis, pathway analysis, protein modelling and phylogenetic analysis; it supports many widely used data formats and provides easy access to databases, external programs and public web services, including BLAST, KEGG, GenBank, MEDLINE and GO.
background_label: BioRuby comes with a tutorial, documentation and an interactive environment, which can be used in the shell, and in the web browser.
method_label: AVAILABILITY BioRuby is free and open source software, made available under the Ruby license.
method_label: BioRuby runs on all platforms that support Ruby, including Linux, Mac OS X and Windows.
method_label: And, with JRuby, BioRuby runs on the Java Virtual Machine.
other_label: The source code is available from http://www.bioruby.org/.
other_label: CONTACT katayama@bioruby.org

===================================
paper_id: 5088062; YEAR: 2014
adju relevance: Irrelevant (0)
difference: 0; annotator4: 0; annotator3: 0
sources: title_tfidf
TITLE: Polymonadic Programming
ABSTRACT: background_label: Monads are a popular tool for the working functional programmer to structure effectful computations.
background_label: This paper presents polymonads, a generalization of monads.
background_label: Polymonads give the familiar monadic bind the more general type forall a,b.
background_label: L a ->(a ->M b) ->N b, to compose computations with three different kinds of effects, rather than just one.
background_label: Polymonads subsume monads and parameterized monads, and can express other constructions, including precise type-and-effect systems and information flow tracking; more generally, polymonads correspond to Tate's productoid semantic model.
method_label: We show how to equip a core language (called lambda-PM) with syntactic support for programming with polymonads.
method_label: Type inference and elaboration in lambda-PM allows programmers to write polymonadic code directly in an ML-like syntax--our algorithms compute principal types and produce elaborated programs wherein the binds appear explicitly.
result_label: Furthermore, we prove that the elaboration is coherent: no matter which (type-correct) binds are chosen, the elaborated program's semantics will be the same.
result_label: Pleasingly, the inferred types are easy to read: the polymonad laws justify (sometimes dramatic) simplifications, but with no effect on a type's generality.

===================================
paper_id: 16686628; YEAR: 2015
adju relevance: Irrelevant (0)
difference: 0; annotator4: 0; annotator3: 0
sources: title_cbow200
TITLE: Enabling Learning by Teaching: Intuitive Composing of E-Learning Modules
ABSTRACT: objective_label: In an effort to foster learning by teaching, we propose the development of a canvas system that makes composing e-learning modules intuitive.
method_label: We try to empower and liberate non-technical module users by lowering the bar for turning them into module authors, a bar previously set far too high.
method_label: In turn, this stimulates learning through teaching.
method_label: By making a damn fine piece of software, we furthermore make module authoring more pleasant for experienced authors as well.
method_label: We propose a system that initially enables users to easily compose H5P modules.
method_label: These modules are successively easy to share and modify.
result_label: Through gamification we encourage authors to share their work, and to improve the works of others.

===================================
paper_id: 20191900; YEAR: 2010
adju relevance: Irrelevant (0)
difference: 0; annotator4: 0; annotator3: 0
sources: abs_tfidfcbow200 - abs_tfidf - abs_cbow200
TITLE: An N-Gram-and-Wikipedia joint approach to Natural Language Identification
ABSTRACT: background_label: Natural Language Identification is the process of detecting and determining in which language or languages a given piece of text is written.
background_label: As one of the key steps in Computational Linguistics/Natural Language Processing(NLP) tasks, such as Machine Translation, Multi-lingual Information Retrieval and Processing of Language Resources, Natural Language Identification has drawn widespread attention and extensive research, making it one of the few relatively well studied sub-fields in the whole NLP field.
background_label: However, various problems remain far from resolved in this field.
background_label: Current non-computational approaches require researchers possess sufficient prior linguistic knowledge about the languages to be identified, while current computational (statistical) approaches demand large-scale training set for each to-be-identified language.
background_label: Apparently, drawbacks for both are that, few computer scientists are equipped with sufficient knowledge in Linguistics, and the size of the training set may get endlessly larger in pursuit of higher accuracy and the ability to process more languages.
method_label: Also, faced with multi-lingual documents on the Internet, neither approach can render satisfactory results.
objective_label: To address these problems, this paper proposes a new approach to Natural Language Identification.
method_label: It exploits N-Gram frequency statistics to segment a piece of text in a language-specific fashion, and then takes advantage of Wikipedia to determine the language used in each segment.
result_label: Multiple experiments have demonstrated that satisfactory results can be rendered by this approach, especially with multi-lingual documents.

===================================
paper_id: 7571487; YEAR: 2013
adju relevance: Irrelevant (0)
difference: 0; annotator4: 0; annotator3: 0
sources: abs_tfidfcbow200
TITLE: A model-based approach to language integration
ABSTRACT: background_label: The interactions of several languages within a software system pose a number of problems.
background_label: There is several anecdotal and empirical evidence supporting such concerns.
objective_label: This paper presents a solution to achieve proper language integration in the context of language workbenches and with limited effort.
method_label: A simple example is presented to show how cross-language constraints can be addressed and the quality of the support attainable, which covers error-checking and refactoring.
result_label: A research agenda is then presented, to support future work in the area of language integration, taking advantage of modern language workbenches features.

===================================
paper_id: 3935841; YEAR: 2017
adju relevance: Irrelevant (0)
difference: 0; annotator4: 0; annotator3: 0
sources: abs_cbow200
TITLE: Synthesizing Bijective Lenses
ABSTRACT: background_label: Bidirectional transformations between different data representations occur frequently in modern software systems.
background_label: They appear as serializers and deserializers, as database views and view updaters, and more.
background_label: Manually building bidirectional transformations---by writing two separate functions that are intended to be inverses---is tedious and error prone.
background_label: A better approach is to use a domain-specific language in which both directions can be written as a single expression.
background_label: However, these domain-specific languages can be difficult to program in, requiring programmers to manage fiddly details while working in a complex type system.
method_label: To solve this, we present Optician, a tool for type-directed synthesis of bijective string transformers.
result_label: The inputs to Optician are two ordinary regular expressions representing two data formats and a few concrete examples for disambiguation.
background_label: The output is a well-typed program in Boomerang (a bidirectional language based on the theory of lenses).
background_label: The main technical challenge involves navigating the vast program search space efficiently enough.
background_label: Unlike most prior work on type-directed synthesis, our system operates in the context of a language with a rich equivalence relation on types (the theory of regular expressions).
method_label: We synthesize terms of a equivalent language and convert those generated terms into our lens language.
method_label: We prove the correctness of our synthesis algorithm.
method_label: We also demonstrate empirically that our new language changes the synthesis problem from one that admits intractable solutions to one that admits highly efficient solutions.
result_label: We evaluate Optician on a benchmark suite of 39 examples including both microbenchmarks and realistic examples derived from other data management systems including Flash Fill, a tool for synthesizing string transformations in spreadsheets, and Augeas, a tool for bidirectional processing of Linux system configuration files.

===================================
paper_id: 7028302; YEAR: 2016
adju relevance: Irrelevant (0)
difference: 0; annotator4: 0; annotator3: 0
sources: title_tfidfcbow200
TITLE: Probabilistic programming in Python using PyMC3
ABSTRACT: background_label: ABSTRACTProbabilistic programming allows for automatic Bayesian inference on user-defined probabilistic models.
background_label: Recent advances in Markov chain Monte Carlo (MCMC) sampling allow inference on increasingly complex models.
background_label: This class of MCMC, known as Hamiltonian Monte Carlo, requires gradient information which is often not readily available.
method_label: PyMC3 is a new open source probabilistic programming framework written in Python that uses Theano to compute gradients via automatic differentiation as well as compile probabilistic programs on-the-fly to C for increased speed.
method_label: Contrary to other probabilistic programming languages, PyMC3 allows model specification directly in Python code.
method_label: The lack of a domain specific language allows for great flexibility and direct interaction with the model.
result_label: This paper is a tutorial-style introduction to this software package.

===================================
paper_id: 14524541; YEAR: 1994
adju relevance: Irrelevant (0)
difference: 0; annotator4: 0; annotator3: 0
sources: title_tfidfcbow200
TITLE: COOL: An object-based language for parallel programming
ABSTRACT: background_label: Effectively using shared-memory multiprocessors requires substantial programming effort.
objective_label: We present the programming language COOL (Concurrent Object-Oriented Language), which was designed to exploit coarse-grained parallelism at the task level in shared-memory multiprocessors.
objective_label: COOL's primary design goals are efficiency and expressiveness.
background_label: By efficiency we mean that the language constructs should be efficient to implement and a program should not have to pay for features it does not use.
method_label: By expressiveness, we imply that the program should flexibly support different concurrency patterns, thereby allowing various decompositions of a problem.
method_label: COOL emphasizes the integration of concurrency and synchronization with data abstraction to ease the task of creating modular and efficient parallel programs.
other_label: It is an extension of C++, which was chosen because it supports abstract data type definitions and is widely used.<<ETX>>

===================================
paper_id: 38494544; YEAR: 2017
adju relevance: Irrelevant (0)
difference: 0; annotator4: 0; annotator3: 0
sources: title_cbow200
TITLE: Guiding Reinforcement Learning Exploration Using Natural Language
ABSTRACT: background_label: In this work we present a technique to use natural language to help reinforcement learning generalize to unseen environments.
method_label: This technique uses neural machine translation, specifically the use of encoder-decoder networks, to learn associations between natural language behavior descriptions and state-action information.
method_label: We then use this learned model to guide agent exploration using a modified version of policy shaping to make it more effective at learning in unseen environments.
method_label: We evaluate this technique using the popular arcade game, Frogger, under ideal and non-ideal conditions.
result_label: This evaluation shows that our modified policy shaping algorithm improves over a Q-learning agent as well as a baseline version of policy shaping.

===================================
paper_id: 6429546; YEAR: 2016
adju relevance: Irrelevant (0)
difference: 1; annotator4: 0; annotator3: 1
sources: title_cbow200 - title_tfidfcbow200
TITLE: TerpreT: A Probabilistic Programming Language for Program Induction
ABSTRACT: background_label: We study machine learning formulations of inductive program synthesis; given input-output examples, we try to synthesize source code that maps inputs to corresponding outputs.
objective_label: Our aims are to develop new machine learning approaches based on neural networks and graphical models, and to understand the capabilities of machine learning techniques relative to traditional alternatives, such as those based on constraint solving from the programming languages community.
objective_label: Our key contribution is the proposal of TerpreT, a domain-specific language for expressing program synthesis problems.
method_label: TerpreT is similar to a probabilistic programming language: a model is composed of a specification of a program representation (declarations of random variables) and an interpreter describing how programs map inputs to outputs (a model connecting unknowns to observations).
method_label: The inference task is to observe a set of input-output examples and infer the underlying program.
result_label: TerpreT has two main benefits.
background_label: First, it enables rapid exploration of a range of domains, program representations, and interpreter models.
background_label: Second, it separates the model specification from the inference algorithm, allowing like-to-like comparisons between different approaches to inference.
method_label: From a single TerpreT specification we automatically perform inference using four different back-ends.
method_label: These are based on gradient descent, linear program (LP) relaxations for graphical models, discrete satisfiability solving, and the Sketch program synthesis system.
method_label: We illustrate the value of TerpreT by developing several interpreter models and performing an empirical comparison between alternative inference algorithms.
result_label: Our key empirical finding is that constraint solvers dominate the gradient descent and LP-based formulations.
result_label: We conclude with suggestions for the machine learning community to make progress on program synthesis.

===================================
paper_id: 14920302; YEAR: 2011
adju relevance: Irrelevant (0)
difference: 1; annotator4: 1; annotator3: 0
sources: title_tfidf
TITLE: Cedalion: a language for language oriented programming
ABSTRACT: background_label: Language Oriented Programming (LOP) is a paradigm that puts domain specific programming languages (DSLs) at the center of the software development process.
background_label: Currently, there are three main approaches to LOP: (1) the use of internal DSLs, implemented as libraries in a given host language; (2) the use of external DSLs, implemented as interpreters or compilers in an external language; and (3) the use of language workbenches, which are integrated development environments (IDEs) for defining and using external DSLs.
method_label: In this paper, we contribute: (4) a novel language-oriented approach to LOP for defining and using internal DSLs.
method_label: While language workbenches adapt internal DSL features to overcome some of the limitations of external DSLs, our approach adapts language workbench features to overcome some of the limitations of internal DSLs.
method_label: We introduce Cedalion, an LOP host language for internal DSLs, featuring static validation and projectional editing.
result_label: To validate our approach we present a case study in which Cedalion was used by biologists in designing a DNA microarray for molecular Biology research.

===================================
paper_id: 2435394; YEAR: 2014
adju relevance: Irrelevant (0)
difference: 0; annotator4: 0; annotator3: 0
sources: abs_tfidf
TITLE: Modeling Language Variability
ABSTRACT: background_label: A systematic way of defining variants of a modeling language is useful for adapting the language to domain or project specific needs.
background_label: Variants can be obtained by adapting the syntax or semantics of the language.
objective_label: In this paper, we take a formal approach to define modeling language variability and show how this helps to reason about language variants, models, and their semantics formally.
method_label: We introduce the notion of semantic language refinement meaning that one semantics variant is implied by another.
method_label: Leaving open all variation points that a modeling language offers yields the notion of the inner semantics of that language.
method_label: Properties of the modeling language which do not depend on the selection of specific variants are called invariant language properties with respect to a variation point.
result_label: These properties consequently follow from the inner semantics of a model or language.

===================================
paper_id: 18534583; YEAR: 2001
adju relevance: Irrelevant (0)
difference: 0; annotator4: 0; annotator3: 0
sources: abs_tfidf - abs_tfidfcbow200
TITLE: Tools for Authoring Tutorial Dialogue Knowledge
ABSTRACT: background_label: The current generation of intelligent tutoring systems (ITS) have successfully produced learning gains without the use of natural language technology, but the goal for the next generation is to add natural language dialogue capabilities.
background_label: Since it is already a tremendous effort to add domain and pedagogical knowledge to the current generation of ITSs, adding natural language dialogue capabilities can further increase the development time by requiring that language knowledge also be engineered.
objective_label: Rather than having natural language knowledge become an additional engineering burden, we seek to build tools that will allow us to attack the problem of pedagogical and language knowledge engineering in tandem.
method_label: In this paper, we describe the authoring tool suite we are building to address this problem.
method_label: We have found that our prototype tools do facilitate the rapid development of natural language dialogue interfaces for ITSs.
method_label: With these tools we were able to build knowledge sources for our dialogue interface to an ITS in only 3 man months.
result_label: The resulting dialogue system was able to hold natural language dialogues with students on 50 physics concepts and students showed significant learning gains over seeing only monologue text hints [8].

===================================
paper_id: 16488741; YEAR: 2008
adju relevance: Irrelevant (0)
difference: 0; annotator4: 0; annotator3: 0
sources: title_tfidfcbow200 - title_cbow200
TITLE: A machine vision extension for the Ruby programming language
ABSTRACT: background_label: Dynamically typed scripting languages have become popular in recent years.
background_label: Although interpreted languages allow for substantial reduction of software development time, they are often rejected due to performance concerns.
objective_label: In this paper we present an extension for the programming language Ruby, called HornetsEye, which facilitates the development of real-time machine vision algorithms within Ruby.
method_label: Apart from providing integration of crucial libraries for input and output, HornetsEye provides fast native implementations (compiled code) for a generic set of array operators.
method_label: Different array operators were compared with equivalent implementations in C++.
method_label: Not only was it possible to achieve comparable real-time performance, but also to exceed the efficiency of the C++ implementation in several cases.
result_label: Implementations of several algorithms were given to demonstrate how the array operators can be used to create concise implementations.

===================================
paper_id: 14552146; YEAR: 2001
adju relevance: Irrelevant (0)
difference: 1; annotator4: 0; annotator3: 1
sources: title_tfidfcbow200
TITLE: TACO: prototyping high-level object-oriented programming constructs by means of template based programming techniques
ABSTRACT: background_label: Taco (Topologies and Collections) is a template based object platform for cluster architectures, that provides the flavour of distributed data-parallel programming based on distributed object groups.
objective_label: This paper introduces Taco's basic concepts and discusses template based programming techniques to control the behaviour of (collective) method invocations.
method_label: In particular, the problem of polymorphism and concurrency control in the context of distributed, parallel computing is addressed.

===================================
paper_id: 202537512; YEAR: 2019
adju relevance: Irrelevant (0)
difference: 0; annotator4: 0; annotator3: 0
sources: abs_tfidfcbow200
TITLE: MULE: Multimodal Universal Language Embedding
ABSTRACT: background_label: Existing vision-language methods typically support two languages at a time at most.
objective_label: In this paper, we present a modular approach which can easily be incorporated into existing vision-language methods in order to support many languages.
method_label: We accomplish this by learning a single shared Multimodal Universal Language Embedding (MULE) which has been visually-semantically aligned across all languages.
method_label: Then we learn to relate the MULE to visual data as if it were a single language.
method_label: Our method is not architecture specific, unlike prior work which typically learned separate branches for each language, enabling our approach to easily be adapted to many vision-language methods and tasks.
method_label: Since MULE learns a single language branch in the multimodal model, we can also scale to support many languages, and languages with fewer annotations to take advantage of the good representation learned from other (more abundant) language data.
result_label: We demonstrate the effectiveness of our embeddings on the bidirectional image-sentence retrieval task, supporting up to four languages in a single model.
result_label: In addition, we show that Machine Translation can be used for data augmentation in multilingual learning, which, combined with MULE, improves mean recall by up to 20.2% on a single language compared to prior work, with the most significant gains seen on languages with relatively few annotations.

===================================
paper_id: 61292926; YEAR: 2015
adju relevance: Irrelevant (0)
difference: 0; annotator4: 0; annotator3: 0
sources: title_tfidf - abs_cbow200
TITLE: The Go Programming Language
ABSTRACT: background_label: The Go Programming Language is the authoritative resource for any programmer who wants to learn Go.
background_label: It shows how to write clear and idiomatic Go to solve real-world problems.
background_label: The book does not assume prior knowledge of Go nor experience with any specific language, so youll find it accessible whether youre most comfortable with JavaScript, Ruby, Python, Java, or C++.
method_label: The first chapter is a tutorial on the basic concepts of Go, introduced through programs for file I/O and text processing, simple graphics, and web clients and servers.
method_label: Early chapters cover the structural elements of Go programs: syntax, control flow, data types, and the organization of a program into packages, files, and functions.
method_label: The examples illustrate many packages from the standard library and show how to create new ones of your own.
method_label: Later chapters explain the package mechanism in more detail, and how to build, test, and maintain projects using the go tool.
method_label: The chapters on methods and interfaces introduce Gos unconventional approach to object-oriented programming, in which methods can be declared on any type and interfaces are implicitly satisfied.
result_label: They explain the key principles of encapsulation, composition, and substitutability using realistic examples.
background_label: Two chapters on concurrency present in-depth approaches to this increasingly important topic.
background_label: The first, which covers the basic mechanisms of goroutines and channels, illustrates the style known as communicating sequential processes for which Go is renowned.
background_label: The second covers more traditional aspects of concurrency with shared variables.
background_label: These chapters provide a solid foundation for programmers encountering concurrency for the first time.
method_label: The final two chapters explore lower-level features of Go.
method_label: One covers the art of metaprogramming using reflection.
method_label: The other shows how to use the unsafe package to step outside the type system for special situations, and how to use the cgo tool to create Go bindings for C libraries.
method_label: The book features hundreds of interesting and practical examples of well-written Go code that cover the whole language, its most important packages, and a wide range of applications.
method_label: Each chapter has exercises to test your understanding and explore extensions and alternatives.
other_label: Source code is freely available for download from http://gopl.io/ and may be conveniently fetched, built, and installed using the go get command.

===================================
paper_id: 57115900; YEAR: 2004
adju relevance: Irrelevant (0)
difference: 0; annotator4: 0; annotator3: 0
sources: title_tfidfcbow200
TITLE: Developing the distributed component of a framework for processing intensional programming languages
ABSTRACT: background_label: Based on a simple non-procedural language with temporal logic operators, Lucid underlies a family of multi-dimensional programming languages based on intensional logic.
background_label: Intension is a concept rooted in an aspect of natural language called “intensional context”, in which the meaning of a statement (extension) depends on the context in which it is uttered (intension).
background_label: The implicit temporal feature of Lucid makes it suitable for use as a means of describing dynamic systems.
background_label: In the past, experiments have been performed and real applications have been developed with programs written in Lucid.
background_label: However, these systems focused mainly on improving the execution performance of one dialect of Lucid and not address the problem of interpreting variants of Lucid.
method_label: The GIPSY system is designed to not only process current Lucid variants efficiently but also to be modified easily to accept new dialects of Lucid.
method_label: In the thesis, we discuss the essence of executing intensional programming languages using the eduction (also called demand-driven or lazy) execution model; describe experiments with different approaches to interpreting programs written in Lucid; and focuses on execution over a network of processors.
method_label: We describe the implementation of a prototype for executing Lucid programs in a distributed environment.
method_label: We also explore the advantages of applying the object concept to distributed systems and describe experiments with these methods.
method_label: In addition, the thesis includes estimates of the impact of integrating computation functions into the Lucid code and proposes an advanced execution model consisting of self-contained and intelligent clients associated with a meta-level resource management.

===================================
paper_id: 5999738; YEAR: 2015
adju relevance: Irrelevant (0)
difference: 0; annotator4: 0; annotator3: 0
sources: abs_tfidfcbow200
TITLE: Integration of Heterogeneous Modeling Languages via Extensible and Composable Language Components
ABSTRACT: background_label: Effective model-driven engineering of complex systems requires to appropriately describe different specific system aspects.
background_label: To this end, efficient integration of different heterogeneous modeling languages is essential.
background_label: Modeling language integaration is onerous and requires in-depth conceptual and technical knowledge and ef- fort.
background_label: Traditional modeling lanugage integration approches require language engineers to compose monolithic language aggregates for a specific task or project.
background_label: Adapting these aggregates cannot be to different contexts requires vast effort and makes these hardly reusable.
method_label: This contribution presents a method for the engineering of grammar-based language components that can be independently developed, are syntactically composable, and ultimately reusable.
method_label: To this end, it introduces the concepts of language aggregation, language embed- ding, and language inheritance, as well as their realization in the language workbench MontiCore.
result_label: The result is a generalizable, systematic, and efficient syntax-oriented composition of languages that allows the agile employment of modeling languages efficiently tailored for individual software projects.

===================================
paper_id: 53235786; YEAR: 2018
adju relevance: Irrelevant (0)
difference: 0; annotator4: 0; annotator3: 0
sources: specter
TITLE: Syntactic Manipulation for Generating more Diverse and Interesting Texts
ABSTRACT: background_label: AbstractNatural Language Generation plays an important role in the domain of dialogue systems as it determines how users perceive the system.
background_label: Recently, deep-learning based systems have been proposed to tackle this task, as they generalize better and require less amounts of manual effort to implement them for new domains.
background_label: However, deep learning systems usually adapt a very homogeneous sounding writing style which expresses little variation.
method_label: In this work, we present our system for Natural Language Generation where we control various aspects of the surface realization in order to increase the lexical variability of the utterances, such that they sound more diverse and interesting.
method_label: For this, we use a Semantically Controlled Long Short-term Memory Network (SC-LSTM), and apply its specialized cell to control various syntactic features of the generated texts.
result_label: We present an in-depth human evaluation where we show the effects of these surface manipulation on the perception of potential users.

===================================
paper_id: 6401679; YEAR: 2013
adju relevance: Irrelevant (0)
difference: 0; annotator4: 0; annotator3: 0
sources: cited - title_tfidf - title_tfidfcbow200 - title_cbow200 - abs_cbow200 - specter
TITLE: Semantic Parsing on Freebase from Question-Answer Pairs
ABSTRACT: background_label: AbstractIn this paper, we train a semantic parser that scales up to Freebase.
background_label: Instead of relying on annotated logical forms, which is especially expensive to obtain at large scale, we learn from question-answer pairs.
objective_label: The main challenge in this setting is narrowing down the huge number of possible logical predicates for a given question.
method_label: We tackle this problem in two ways: First, we build a coarse mapping from phrases to predicates using a knowledge base and a large text corpus.
method_label: Second, we use a bridging operation to generate additional predicates based on neighboring predicates.
result_label: On the dataset of Cai and Yates (2013), despite not having annotated logical forms, our system outperforms their state-of-the-art parser.
result_label: Additionally, we collected a more realistic and challenging dataset of question-answer pairs and improves over a natural baseline.

===================================
paper_id: 34765991; YEAR: 2013
adju relevance: Irrelevant (0)
difference: 0; annotator4: 0; annotator3: 0
sources: title_tfidf
TITLE: Towards Interactive Object-Oriented Programming
ABSTRACT: background_label: To represent interactive objects, we propose a choice-disjunctive declaration statement of the form S R where S;R are the (procedure or field) declaration statements within a class.
method_label: This statement has the following semantics: request the user to choose one between S and R when an object of this class is created.
result_label: This statement is useful for representing interactive objects that require interactions with the user.

===================================
paper_id: 15904896; YEAR: 2009
adju relevance: Irrelevant (0)
difference: 0; annotator4: 0; annotator3: 0
sources: title_tfidfcbow200
TITLE: Flapjax: a programming language for Ajax applications
ABSTRACT: background_label: This paper presents Flapjax, a language designed for contemporary Web applications.
background_label: These applications communicate with servers and have rich, interactive interfaces.
objective_label: Flapjax provides two key features that simplify writing these applications.
method_label: First, it provides event streams, a uniform abstraction for communication within a program as well as with external Web services.
method_label: Second, the language itself is reactive: it automatically tracks data dependencies and propagates updates along those dataflows.
method_label: This allows developers to write reactive interfaces in a declarative and compositional style.
method_label: Flapjax is built on top of JavaScript.
method_label: It runs on unmodified browsers and readily interoperates with existing JavaScript code.
method_label: It is usable as either a programming language (that is compiled to JavaScript) or as a JavaScript library, and is designed for both uses.
result_label: This paper presents the language, its design decisions, and illustrative examples drawn from several working Flapjax applications.

===================================
paper_id: 60752931; YEAR: 1986
adju relevance: Irrelevant (0)
difference: 0; annotator4: 0; annotator3: 0
sources: abs_cbow200
TITLE: Programming with sets; an introduction to SETL
ABSTRACT: background_label: The programming language SETL is a relatively new member of the so-called "very-high-level" class of languages, some of whose other well-known mem bers are LISP, APL, SNOBOL, and PROLOG.
objective_label: These languages all aim to reduce the cost of programming, recognized today as a main obstacle to future progress in the computer field, by allowing direct manipulation of large composite objects, considerably more complex than the integers, strings, etc., available in such well-known mainstream languages as PASCAL, PL/I, ALGOL, and Ada.
method_label: For this purpose, LISP introduces structured lists as data objects, APL introduces vectors and matrices, and SETL introduces the objects characteristic for it, namely general finite sets and maps.
method_label: The direct availability of these abstract, composite objects, and of powerful mathematical operations upon them, improves programmer speed and pro ductivity significantly, and also enhances program clarity and readability.
result_label: The classroom consequence is that students, freed of some of the burden of petty programming detail, can advance their knowledge of significant algorithms and of broader strategic issues in program development more rapidly than with more conventional programming languages."

===================================
paper_id: 155092173; YEAR: 2019
adju relevance: Irrelevant (0)
difference: 0; annotator4: 0; annotator3: 0
sources: abs_tfidf
TITLE: Dual Supervised Learning for Natural Language Understanding and Generation
ABSTRACT: background_label: Natural language understanding (NLU) and natural language generation (NLG) are both critical research topics in the NLP field.
objective_label: Natural language understanding is to extract the core semantic meaning from the given utterances, while natural language generation is opposite, of which the goal is to construct corresponding sentences based on the given semantics.
background_label: However, such dual relationship has not been investigated in the literature.
objective_label: This paper proposes a new learning framework for language understanding and generation on top of dual supervised learning, providing a way to exploit the duality.
result_label: The preliminary experiments show that the proposed approach boosts the performance for both tasks.

===================================
paper_id: 14902296; YEAR: 2010
adju relevance: Irrelevant (0)
difference: 1; annotator4: 0; annotator3: 1
sources: title_tfidfcbow200 - title_cbow200
TITLE: Toque: designing a cooking-based programming language for and with children
ABSTRACT: background_label: An intergenerational design team of children (ages 7-11 years old) along with graduate students and faculty in computer science and information studies developed a programming language for children, Toque.
background_label: Concrete real-world cooking scenarios were used as programming metaphors to support an accessible programming learning experience.
method_label: The Wiimote and Nunchuk were used as physical programming input devices.
method_label: The programs that were created were pictorial recipes which dynamically controlled animations of an on-screen chef preparing virtual dishes in a graphical kitchen environment.
method_label: Through multiple design sessions, programming strategies were explored, cooking metaphors were developed and, prototypes of the Toque environment were iterated.
result_label: Results of these design experiences have shown us the importance of pair-programming, programming by storytelling, parallel programming, function-argument relationships, and the role of tangibility in overcoming challenges with constraints imposed by the system design.

===================================
paper_id: 57653087; YEAR: 1994
adju relevance: Irrelevant (0)
difference: 0; annotator4: 0; annotator3: 0
sources: title_tfidfcbow200
TITLE: Amphion: Automatic Programming for the NAIF Toolkit
ABSTRACT: background_label: A synchronizing check relay is used in an electrical transmission network for controlling a circuit breaker to interconnect first and second transmission lines to establish power flow therebetween and includes an input circuit for receiving signals from first and second transmission lines.
method_label: A phase difference generator generates a phase difference signal proportional to a phase difference between said signals from said first and second transmission lines.
method_label: A phase difference comparator receives the phase difference signal and produces a phase output signal at a selected phase condition.
method_label: An adjustable timer produces a timer signal after a selected time interval in response to the phase comparator to insure a proper phase difference between the transmission lines.
method_label: The voltage sensor produces a breaker closing inhibit signal when one of the alternating current voltages is outside a reference limit.
result_label: A control circuit is responsive to the phase output signal, the time signal and the breaker closing inhibit signal for providing a control response to the circuit breaker.

===================================
paper_id: 8441637; YEAR: 2011
adju relevance: Irrelevant (0)
difference: 0; annotator4: 0; annotator3: 0
sources: title_tfidf
TITLE: Robust Interactive Learning
ABSTRACT: background_label: In this paper we propose and study a generalization of the standard active-learning model where a more general type of query, class conditional query, is allowed.
background_label: Such queries have been quite useful in applications, but have been lacking theoretical understanding.
objective_label: In this work, we characterize the power of such queries under two well-known noise models.
method_label: We give nearly tight upper and lower bounds on the number of queries needed to learn both for the general agnostic setting and for the bounded noise model.
method_label: We further show that our methods can be made adaptive to the (unknown) noise rate, with only negligible loss in query complexity.

===================================
paper_id: 3250710; YEAR: 2013
adju relevance: Irrelevant (0)
difference: 0; annotator4: 0; annotator3: 0
sources: title_cbow200 - title_tfidf - title_tfidfcbow200
TITLE: Teaching and learning programming and software engineering via interactive gaming
ABSTRACT: background_label: Massive Open Online Courses (MOOCs) have recently gained high popularity among various universities and even in global societies.
background_label: A critical factor for their success in teaching and learning effectiveness is assignment grading.
background_label: Traditional ways of assignment grading are not scalable and do not give timely or interactive feedback to students.
objective_label: To address these issues, we present an interactive-gaming-based teaching and learning platform called Pex4Fun.
method_label: Pex4Fun is a browser-based teaching and learning environment targeting teachers and students for introductory to advanced programming or software engineering courses.
method_label: At the core of the platform is an automated grading engine based on symbolic execution.
method_label: In Pex4Fun, teachers can create virtual classrooms, customize existing courses, and publish new learning material including learning games.
method_label: Pex4Fun was released to the public in June 2010 and since then the number of attempts made by users to solve games has reached over one million.
result_label: Our work on Pex4Fun illustrates that a sophisticated software engineering technique -- automated test generation -- can be successfully used to underpin automatic grading in an online programming system that can scale to hundreds of thousands of users.

===================================
paper_id: 58028927; YEAR: 2019
adju relevance: Irrelevant (0)
difference: 0; annotator4: 0; annotator3: 0
sources: abs_cbow200
TITLE: Automatic Keyboard Layout Design for Low-Resource Latin-Script Languages
ABSTRACT: objective_label: We present our approach to automatically designing and implementing keyboard layouts on mobile devices for typing low-resource languages written in the Latin script.
background_label: For many speakers, one of the barriers in accessing and creating text content on the web is the absence of input tools for their language.
background_label: Ease in typing in these languages would lower technological barriers to online communication and collaboration, likely leading to the creation of more web content.
method_label: Unfortunately, it can be time-consuming to develop layouts manually even for language communities that use a keyboard layout very similar to English; starting from scratch requires many configuration files to describe multiple possible behaviors for each key.
method_label: With our approach, we only need a small amount of data in each language to generate keyboard layouts with very little human effort.
method_label: This process can help serve speakers of low-resource languages in a scalable way, allowing us to develop input tools for more languages.
result_label: Having input tools that reflect the linguistic diversity of the world will let as many people as possible use technology to learn, communicate, and express themselves in their own native languages.

===================================
paper_id: 13856098; YEAR: 2017
adju relevance: Irrelevant (0)
difference: 0; annotator4: 0; annotator3: 0
sources: abs_cbow200
TITLE: DeepAM: Migrate APIs with Multi-modal Sequence to Sequence Learning
ABSTRACT: background_label: Computer programs written in one language are often required to be ported to other languages to support multiple devices and environments.
background_label: When programs use language specific APIs (Application Programming Interfaces), it is very challenging to migrate these APIs to the corresponding APIs written in other languages.
background_label: Existing approaches mine API mappings from projects that have corresponding versions in two languages.
background_label: They rely on the sparse availability of bilingual projects, thus producing a limited number of API mappings.
objective_label: In this paper, we propose an intelligent system called DeepAM for automatically mining API mappings from a large-scale code corpus without bilingual projects.
method_label: The key component of DeepAM is based on the multimodal sequence to sequence learning architecture that aims to learn joint semantic representations of bilingual API sequences from big source code data.
result_label: Experimental results indicate that DeepAM significantly increases the accuracy of API mappings as well as the number of API mappings, when compared with the state-of-the-art approaches.

===================================
paper_id: 52098336; YEAR: 2018
adju relevance: Irrelevant (0)
difference: 2; annotator4: 2; annotator3: 0
sources: abs_tfidf
TITLE: Natural Language Data Management and Interfaces
ABSTRACT: background_label: Abstract The volume of natural language text data has been rapidly increasing over the past two decades, due to factors such as the growth of the Web, the low cost associated with publishing, and the progress on the digitization of printed texts.
background_label: This growth combined with the proliferation of natural language systems for search and retrieving information provides tremendous opportunities for studying some of the areas where database systems and natural language processing systems overlap.
objective_label: This book explores two interrelated and important areas of overlap: (1) managing natural language data and (2) developing natural language interfaces to databases.
method_label: It presents relevant concepts and research questions, state-of-the-art methods, related systems, and research opportunities and challenges covering both areas.
method_label: Relevant topics discussed on natural language data management include data models, data sources, queries, storage and indexing, and transforming natural language text.
result_label: Under natural language interfaces,...

===================================
paper_id: 123556377; YEAR: 1996
adju relevance: Irrelevant (0)
difference: 0; annotator4: 0; annotator3: 0
sources: abs_tfidf - abs_tfidfcbow200
TITLE: Introduction to algorithms
ABSTRACT: objective_label: The primary purpose of a programming language is to assist the programmer in the practice of her art.
background_label: Each language is either designed for a class of problems or supports a different style of programming.
background_label: In other words, a programming language turns the computer into a ‘virtual machine’ whose features and capabilities are unlimited.
method_label: In this article, we illustrate these aspects through a language similar tologo.
method_label: Programs are developed to draw geometric pictures using this language.

===================================
paper_id: 11761105; YEAR: 2014
adju relevance: Irrelevant (0)
difference: 0; annotator4: 0; annotator3: 0
sources: title_tfidfcbow200 - title_cbow200
TITLE: Programming Pluralism: Using Learning Analytics to Detect Patterns in the Learning of Computer Programming
ABSTRACT: background_label: New high-frequency, automated data collection and analysis algorithms could offer new insights into complex learning processes, especially for tasks in which students have opportunities to generate unique open-ended artifacts such as computer programs.
background_label: These approaches should be particularly useful because the need for scalable project-based and student-centered learning is growing considerably.
objective_label: In this article, we present studies focused on how students learn computer programming, based on data drawn from 154,000 code snapshots of computer programs under development by approximately 370 students enrolled in an introductory undergraduate programming course.
method_label: We use methods from machine learning to discover patterns in the data and try to predict final exam grades.
method_label: We begin with a set of exploratory experiments that use fully automated techniques to investigate how much students change their programming behavior throughout all assignments in the course.
result_label: The results show that students’ change in programming ...

===================================
paper_id: 58407336; YEAR: 1997
adju relevance: Irrelevant (0)
difference: 0; annotator4: 0; annotator3: 0
sources: title_cbow200
TITLE: Computer-Assisted Language Learning: Context and Conceptualization
ABSTRACT: background_label: So far the development of Computer-Assisted Language Learning (CALL) has been fragmented.
background_label: The points of departure for CALL projects have been enormously varied, and when the projects have been written up, they rarely refer to those that have gone before.
objective_label: Michael Levy addresses this shortcoming, setting CALL work into a context, both historical and interdisciplinary.
objective_label: He is the first person in the field to consider CALL as a body of work.
objective_label: He also aims to identify themes and patterns of development that relate contemporary CALL to earlier projects.
objective_label: The author goes on to explore how CALL practitioners have conceptualized the use of the computer in language teaching and learning.
method_label: He achieves this through a detailed review of the literature, and through the results of an international CALL survey, where key CALL practitioners from 18 countries respond to questions on aspects of CALL materials development.
method_label: Drawn from this rich source of information on actual CALL practice, Michael Levy analyses and expands on a tutor-tool framework.
result_label: He shows this to be of value for a better understanding of methodology, integration of CALL into the curriculum, the role of the teacher and learner, and evaluation.
result_label: This book is intended for researchers and teachers in Applied Linguistics with an interest in Computer-Assisted Language Learning, particularly those want a detailed overview of the field or who are involved in a CALL project.

===================================
paper_id: 16946662; YEAR: 2002
adju relevance: Irrelevant (0)
difference: 0; annotator4: 0; annotator3: 0
sources: abs_cbow200
TITLE: Locating and Reusing Sundry NLP Flotsam in an e-Learning Application
ABSTRACT: background_label: We describe the background and motivation for an e-learning project—IT-based Collaborative Learning in Grammar—where NLP resource reuse has become an important issue.
background_label: The resources are of several kinds: POS-tagged and syntactically annotated corpora (treebanks), parsing systems and grammar writer’ s workbenches, and visulization and manipulation tools for linguistically annotated corpora.
background_label: Our experience thus far has been that although there are a number of such resources available e.g.
background_label: on the Web, as a rule, numerous incompatibilities and lack of standardization at all levels—markup formats, linguistic annotation schemes, grammatical framework, software APIs, etc.—make the reuse of these resources into a non-trivial endeavor.
other_label: 0.
objective_label: Preamble: the Setting It is generally acknowledged that the goal of teaching grammar—especially at the university level—should not primarily be that students memorize definitions of concepts and grammatical constructions, but rather that they understand and learn to recognize different structural patterns.
method_label: This can hardly be achieved without giving students practical training in the skill of grammatical analysis.
result_label: Research has shown that hands-on problem-solving is more stimulating and thought-provoking than when the information and results are handed down to the pupils during lectures.
result_label: Further, our experience has been that students learn about grammatical constructions and phenomena more actively when these constructions are discussed by comparing the system found in their native language with that of another language.
background_label: An added factor contributing to an active student participation is the choice of the material forming the basis for exercises and group activities, which should preferably be as natural as possible.
objective_label: With these pedagogical considerations in mind, we formulated a project for realizing a new format for teaching courses in grammar in Linguistics and Computational Linguistics (the ability to reason about grammar and to carry out grammatical analyses of language utterances being necessary prerequisites for all linguistic studies of language and thereby part of the core curriculum of these subjects).
method_label: In the proposed format interactive practical training and corpus-based exercises comprise an integral part of the students’ learning process, giving them the opportunity and incentive to participate more actively in their own learning process.
method_label: Using IT as a tool for collaborative work allows the students to choose the problem-solving strategy which suits them best, as well as the time and place to work on the problem.
method_label: A corpus of natural language material for grammatical analysis contributes to a more active participation, as it not only presents the grammatical constructions in their context, but also gives students a greater freedom to approach the material and conduct the investigation from a perspective which suits their individual learning styles.
method_label: A text corpus consists of naturally occurring language in its natural physical context, since it is made up of complete texts or large text fragments, as opposed to the made-up or isolated single sentences or phrases often used to illustrate grammatical points in linguistics textbooks.
method_label: This accompanying physical context makes it possible to investigate the textual, discourse-level, functions of the grammatical phenomena.
method_label: An outline of the proposed training material is presented below.
result_label: It has a modular architecture, composed of four types of modules (see Figure 1, below):

===================================
paper_id: 54524760; YEAR: 2016
adju relevance: Irrelevant (0)
difference: 0; annotator4: 0; annotator3: 0
sources: abs_tfidfcbow200 - abs_tfidf
TITLE: The Now-or-Never bottleneck: A fundamental constraint on language.
ABSTRACT: background_label: Memory is fleeting.
background_label: New material rapidly obliterates previous material.
background_label: How, then, can the brain deal successfully with the continual deluge of linguistic input?
background_label: We argue that, to deal with this "Now-or-Never" bottleneck, the brain must compress and recode linguistic input as rapidly as possible.
result_label: This observation has strong implications for the nature of language processing: (1) the language system must "eagerly" recode and compress linguistic input; (2) as the bottleneck recurs at each new representational level, the language system must build a multilevel linguistic representation; and (3) the language system must deploy all available information predictively to ensure that local linguistic ambiguities are dealt with "Right-First-Time"; once the original input is lost, there is no way for the language system to recover.
background_label: This is "Chunk-and-Pass" processing.
background_label: Similarly, language learning must also occur in the here and now, which implies that language acquisition is learning to process, rather than inducing, a grammar.
background_label: Moreover, this perspective provides a cognitive foundation for grammaticalization and other aspects of language change.
background_label: Chunk-and-Pass processing also helps explain a variety of core properties of language, including its multilevel representational structure and duality of patterning.
objective_label: This approach promises to create a direct relationship between psycholinguistics and linguistic theory.
method_label: More generally, we outline a framework within which to integrate often disconnected inquiries into language processing, language acquisition, and language change and evolution.

===================================
paper_id: 13383837; YEAR: 2013
adju relevance: Irrelevant (0)
difference: 0; annotator4: 0; annotator3: 0
sources: title_tfidfcbow200 - title_cbow200
TITLE: Declarative Layer Composition with The JCop Programming Language
ABSTRACT: background_label: Abstract Program behavior that relies on contextual information, such as physical location or network accessibility, is common in today's applications, yet its representation at the source code level is not sufficiently supported by programming languages.
background_label: With context-oriented programming (COP), context-dependent behavior can be explicitly modularized and dynamically activated.
background_label: The available COP implementations offer language constructs that allow to describe context-dependent functionality and to specify for which control flows this functionality should be executed.
background_label: Since these language constructs require modifications to the source code, the contemporary approaches limit the use of COP to program parts whose source code is accessible to the developer (the user code).
result_label: The dynamic control over context-dependent behavior in frameworks cannot be directly addressed by COP as this would imply changes to the source code.
background_label: Instead, context-dependent behavior is addressed whenever a control flow from the framework code enters the user code.
background_label: Context composition must be addressed at any of these control flow entry points, which may lead to a redundant specification of this functionality.
objective_label: As a result, dynamic control over layers emerges as a crosscutting concern that obstructs the separation of concerns.In this article, we discuss crosscutting layer composition in frameworkbased applications in detail.
method_label: Moreover, we discuss limitations for the expression of semantic relationships of layers that might lead to code duplication.
method_label: We present a framework-based application, a simple action adventure game that we implemented using a conventional COP language.
result_label: Along this example, we show how our JCop language supports the declaration of layer composition and expression of layer relationships.

===================================
paper_id: 470312; YEAR: 2011
adju relevance: Irrelevant (0)
difference: 0; annotator4: 0; annotator3: 0
sources: title_tfidfcbow200 - title_cbow200
TITLE: On the Formal Semantics of Speech-Act Based Communication in an Agent-Oriented Programming Language
ABSTRACT: background_label: Research on agent communication languages has typically taken the speech acts paradigm as its starting point.
background_label: Despite their manifest attractions, speech-act models of communication have several serious disadvantages as a foundation for communication in artificial agent systems.
background_label: In particular, it has proved to be extremely difficult to give a satisfactory semantics to speech-act based agent communication languages.
background_label: In part, the problem is that speech-act semantics typically make reference to the"mental states"of agents (their beliefs, desires, and intentions), and there is in general no way to attribute such attitudes to arbitrary computational agents.
background_label: In addition, agent programming languages have only had their semantics formalised for abstract, stand-alone versions, neglecting aspects such as communication primitives.
background_label: With respect to communication, implemented agent programming languages have tended to be rather ad hoc.
objective_label: This paper addresses both of these problems, by giving semantics to speech-act based messages received by an AgentSpeak agent.
method_label: AgentSpeak is a logic-based agent programming language which incorporates the main features of the PRS model of reactive planning systems.
method_label: The paper builds upon a structural operational semantics to AgentSpeak that we developed in previous work.
result_label: The main contributions of this paper are as follows: an extension of our earlier work on the theoretical foundations of AgentSpeak interpreters; a computationally grounded semantics for (the core) performatives used in speech-act based agent communication languages; and a well-defined extension of AgentSpeak that supports agent communication.

===================================
paper_id: 59745579; YEAR: 1996
adju relevance: Irrelevant (0)
difference: 0; annotator4: 0; annotator3: 0
sources: abs_tfidfcbow200
TITLE: APPLAB -- A Laboratory For Application Languages
ABSTRACT: background_label: ) is an environment thatsupports the interactive development of application languages.
method_label: Thesystem allows the language designer to edit a language description andsimultaneously edit a program in the new (changing) language.
method_label: Thesystem also supports the design of static semantics for the language.APPLAB is used in a case study looking at the different levels of pro-gramming involved in programming industrial robots.

===================================
paper_id: 123308915; YEAR: 2008
adju relevance: Irrelevant (0)
difference: 0; annotator4: 0; annotator3: 0
sources: title_tfidf
TITLE: SEMANTICS OF QUANTUM PROGRAMMING LANGUAGE LANQ
ABSTRACT: background_label: We show a memory model of an imperative concurrent quantum programming language LanQ.
method_label: The memory model is used to specify the shape of semantical structure upon which the language operational semantics is defined.
method_label: We also outline the language abilities in the area of formal verification on an example implementation of teleportation protocol.

===================================
paper_id: 16098539; YEAR: 2007
adju relevance: Irrelevant (0)
difference: 0; annotator4: 0; annotator3: 0
sources: title_cbow200 - title_tfidf
TITLE: Online Pair-Programming for Learning Programming of Novices
ABSTRACT: objective_label: The purpose of this study is to determine the effects of online pair programming for novices.
objective_label: This paper describes two system designs for online pair programming: real-time synchronous pair programming and non-real-time asynchronous pair programming.
method_label: An experiment was conducted to test the feasibility of online pair programming, using Squeak eToys as an educational programming language.
method_label: Nebraska of Squeak eToys, a toolkit for building remote interactions with morphic (object-oriented and visual) projects in Squeak eToys, was used for sharing learners' screens and input devices, such as the keyboard and mouse.
method_label: In this experiment, the following were compared: co-located pair programming, distributed pair programming, and individual programming, through the statistical analysis of their task scores; and a number of creative ideas and their scores in the final test, using T-test, ANOVA F-test, and post-comparison.
result_label: The results showed that distributed pair programming is not significantly different from co-located pair programming, and that pair programming is more effective than individual programming.
result_label: In addition, based on the students' sentiments and class observations, several suggestions are given herein, such as environments or teaching methods in online pair programming.
result_label: The importance of communication, authority control, and peer pressure in online pair programming is also discussed in this paper.
result_label: In conclusion, the results of this experimental research show that educators can be helped in designing effective learning systems for online pair programming.

===================================
paper_id: 3648651; YEAR: 2015
adju relevance: Irrelevant (0)
difference: 0; annotator4: 0; annotator3: 0
sources: abs_tfidfcbow200 - abs_tfidf
TITLE: Structures, Not Strings: Linguistics as Part of the Cognitive Sciences.
ABSTRACT: background_label: There are many questions one can ask about human language: its distinctive properties, neural representation, characteristic uses including use in communicative contexts, variation, growth in the individual, and origin.
background_label: Every such inquiry is guided by some concept of what 'language' is.
background_label: Sharpening the core question--what is language?--and paying close attention to the basic property of the language faculty and its biological foundations makes it clear how linguistics is firmly positioned within the cognitive sciences.
result_label: Here we will show how recent developments in generative grammar, taking language as a computational cognitive mechanism seriously, allow us to address issues left unexplained in the increasingly popular surface-oriented approaches to language.

===================================
paper_id: 6098470; YEAR: 2010
adju relevance: Irrelevant (0)
difference: 0; annotator4: 0; annotator3: 0
sources: abs_tfidfcbow200 - abs_tfidf
TITLE: Deep Syntax Language Models and Statistical Machine Translation
ABSTRACT: background_label: AbstractHierarchical Models increase the reordering capabilities of MT systems by introducing non-terminal symbols to phrases that map source language (SL) words/phrases to the correct position in the target language (TL) translation.
background_label: Building translations via discontiguous TL phrases increases the difficulty of language modeling, however, introducing the need for heuristic techniques such as cube pruning (Chiang, 2005) , for example.
method_label: An additional possibility to aid language modeling in hierarchical systems is to use a language model that models fluency of words not using their local context in the string, as in traditional language models, but instead using the deeper context of a word.
method_label: In this paper, we explore the potential of deep syntax language models providing an interesting comparison with the traditional string-based language model.
result_label: We include an experimental evaluation that compares the two kinds of models independently of any MT system to investigate the possible potential of integrating a deep syntax language model into Hierarchical SMT systems.

===================================
paper_id: 34352074; YEAR: 2002
adju relevance: Irrelevant (0)
difference: 0; annotator4: 0; annotator3: 0
sources: title_tfidf
TITLE: Promoin: An Interactive System for Multiobjective Programming
ABSTRACT: background_label: The interactive system PROMOIN is presented in this paper.
objective_label: This system has been designed in order to work with interactive techniques for Linear Multiobjective Programming problems.
method_label: The main interactive procedures of the literature have been incorporated into the system, as well as the possibility to change between methods along the solution process, if the user wishes so.
method_label: This change-of-method option has been developed on a theoretical base devoted to transfer information from one method to the other, so that all this information is not lost when changing to another algorithm.
method_label: The program has been implemented under Windows environment, with the aim of providing the user with a friendly interface.

===================================
paper_id: 14475079; YEAR: 2016
adju relevance: Irrelevant (0)
difference: 0; annotator4: 0; annotator3: 0
sources: title_tfidfcbow200 - title_cbow200 - abs_cbow200 - specter
TITLE: CodeMend: Assisting Interactive Programming with Bimodal Embedding
ABSTRACT: background_label: Software APIs often contain too many methods and parameters for developers to memorize or navigate effectively.
background_label: Instead, developers resort to finding answers through online search engines and systems such as Stack Overflow.
background_label: However, the process of finding and integrating a working solution is often very time-consuming.
background_label: Though code search engines have increased in quality, there remain significant language- and workflow-gaps in meeting end-user needs.
background_label: Novice and intermediate programmers often lack the language to query, and the expertise in transferring found code to their task.
background_label: To address this problem, we present CodeMend, a system to support finding and integration of code.
background_label: CodeMend leverages a neural embedding model to jointly model natural language and code as mined from large Web and code datasets.
method_label: We also demonstrate a novel, mixed-initiative, interface to support query and integration steps.
method_label: Through CodeMend, end-users describe their goal in natural language.
method_label: The system makes salient the relevant API functions, the lines in the end-user's program that should be changed, as well as proposing the actual change.
result_label: We demonstrate the utility and accuracy of CodeMend through lab and simulation studies.

===================================
paper_id: 2119453; YEAR: 2012
adju relevance: Irrelevant (0)
difference: 1; annotator4: 1; annotator3: 0
sources: abs_tfidfcbow200
TITLE: Marco: Safe, Expressive Macros for Any Language ⋆
ABSTRACT: background_label: Abstract.
background_label: Macros improve expressiveness, concision, abstraction, and language interoperability without changing the programming language itself.
background_label: They are indispensable for building increasingly prevalent multilingual applications.
background_label: Unfortunately, existing macro systems are wellencapsulated but unsafe (e.g., the C preprocessor) or are safe but tightlyintegrated with the language implementation (e.g., Scheme macros).
objective_label: This paper introduces Marco, the first macro system that seeks both encapsulation and safety.
method_label: Marco is based on the observation that the macro system need not know all the syntactic and semantic rules of the target language but must only directly enforce some rules, such as variable name binding.
method_label: Using this observation, Marco off-loads most rule checking to unmodified target-language compilers and interpreters and thus becomes language-scalable.
method_label: We describe the Marco language, its languageindependent safety analysis, and how it uses two example target-language analysis plug-ins, one for C++ and one for SQL.
result_label: This approach opens the door to safe and expressive macros for any language.

===================================
paper_id: 2921786; YEAR: 2017
adju relevance: Irrelevant (0)
difference: 1; annotator4: 0; annotator3: 1
sources: abs_tfidfcbow200 - abs_tfidf
TITLE: Gated-Attention Architectures for Task-Oriented Language Grounding
ABSTRACT: background_label: To perform tasks specified by natural language instructions, autonomous agents need to extract semantically meaningful representations of language and map it to visual elements and actions in the environment.
background_label: This problem is called task-oriented language grounding.
objective_label: We propose an end-to-end trainable neural architecture for task-oriented language grounding in 3D environments which assumes no prior linguistic or perceptual knowledge and requires only raw pixels from the environment and the natural language instruction as input.
method_label: The proposed model combines the image and text representations using a Gated-Attention mechanism and learns a policy to execute the natural language instruction using standard reinforcement and imitation learning methods.
method_label: We show the effectiveness of the proposed model on unseen instructions as well as unseen maps, both quantitatively and qualitatively.
result_label: We also introduce a novel environment based on a 3D game engine to simulate the challenges of task-oriented language grounding over a rich set of instructions and environment states.

===================================
paper_id: 1981910; YEAR: 2004
adju relevance: Irrelevant (0)
difference: 0; annotator4: 0; annotator3: 0
sources: title_cbow200
TITLE: Decentralized language learning through acting
ABSTRACT: objective_label: This paper presents an algorithm for learning the meaning of messages communicated between agents that interact while acting optimally towards a cooperative goal.
method_label: Our reinforcement-learning method is based on Bayesian filtering and has been adapted for a decentralized control process.
result_label: Empirical results shed light on the complexity of the learning problem, and on factors affecting the speed of convergence.
method_label: Designing intelligent agents able to adapt their mutual interpretation of messages exchanged, in order to improve overall task-oriented performance, introduces an essential cognitive capability that can upgrade the current state of the art in multi-agent and human-machine systems to the next level.
result_label: Learning to communicate while acting will add to the robustness and flexibility of these systems and hence to a more efficient and productive performance.

===================================
paper_id: 15103971; YEAR: 2010
adju relevance: Irrelevant (0)
difference: 0; annotator4: 0; annotator3: 0
sources: abs_tfidf
TITLE: Language identification of names with SVMs
ABSTRACT: background_label: AbstractThe task of identifying the language of text or utterances has a number of applications in natural language processing.
background_label: Language identification has traditionally been approached with character-level language models.
background_label: However, the language model approach crucially depends on the length of the text in question.
objective_label: In this paper, we consider the problem of language identification of names.
method_label: We show that an approach based on SVMs with n-gram counts as features performs much better than language models.
method_label: We also experiment with applying the method to pre-process transliteration data for the training of separate models.

===================================
paper_id: 146468954; YEAR: 2003
adju relevance: Irrelevant (0)
difference: 0; annotator4: 0; annotator3: 0
sources: abs_tfidfcbow200
TITLE: Constructing a Language: A Usage-Based Theory of Language Acquisition
ABSTRACT: background_label: Drawing together a vast body of empirical research in cognitive science, linguistics, and developmental psychology, Michael Tomasello demonstrates that we don't need a self-contained "language instinct" to explain how children learn language.
background_label: Their linguistic ability is interwoven with other cognitive abilities.
objective_label: Tomasello argues that the essence of language is its symbolic dimension, which rests on the uniquely human ability to comprehend intention.
background_label: Grammar emerges as the speakers of a language create linguistic constructions out of recurring sequences of symbols, children pick up these patterns in the buzz of words they hear around them.
result_label: Constructing a Language offers a compellingly argued, psychologically sound new vision for the study of language acquisition.

===================================
paper_id: 10023477; YEAR: 2003
adju relevance: Irrelevant (0)
difference: 0; annotator4: 0; annotator3: 0
sources: abs_tfidfcbow200 - abs_cbow200
TITLE: Scripting embodied agents behaviour with CML: character markup language
ABSTRACT: background_label: Embodied agents present ongoing challenging agenda for research in multi-modal user interfaces and human-computer-interaction.
background_label: Such agent metaphors will only be widely applicable to online applications when there is a standardised way to map underlying engines with the visual presentation of the agents.
objective_label: This paper delineates the functions and specifications of a mark-up language for scripting the animation of virtual characters.
method_label: The language is called: Character Mark-up Language (CML) and is an XML-based character attribute definition and animation scripting language designed to aid in the rapid incorporation of lifelike characters/agents into online applications or virtual reality worlds.
method_label: This multi-modal scripting language is designed to be easily understandable by human animators and easily generated by a software process such as software agents.
method_label: CML is constructed based jointly on motion and multi-modal capabilities of virtual life-like figures.
result_label: The paper further illustrates the constructs of the language and describes a real-time execution architecture that demonstrates the use of such a language as a 4G language to easily utilise and integrate MPEG-4 media objects in online interfaces and virtual environments

===================================
paper_id: 1308791; YEAR: 2008
adju relevance: Irrelevant (0)
difference: 0; annotator4: 0; annotator3: 0
sources: abs_tfidfcbow200 - abs_tfidf
TITLE: Multilingual Text Entry using Automatic Language Detection
ABSTRACT: background_label: AbstractComputer users increasingly need to produce text written in multiple languages.
background_label: However, typical computer interfaces require the user to change the text entry software each time a different language is used.
objective_label: This is cumbersome, especially when language changes are frequent.To solve this problem, we propose TypeAny, a novel front-end interface that detects the language of the user's key entry and automatically dispatches the input to the appropriate text entry system.
result_label: Unlike previously reported methods, TypeAny can handle more than two languages, and can easily support any new language even if the available corpus is small.When evaluating this method, we obtained language detection accuracy of 96.7% when an appropriate language had to be chosen from among three languages.
result_label: The number of control actions needed to switch languages was decreased over 93% when using TypeAny rather than a conventional method.

===================================
paper_id: 62034515; YEAR: 2009
adju relevance: Irrelevant (0)
difference: 1; annotator4: 0; annotator3: 1
sources: title_tfidfcbow200
TITLE: Flapjax: a programming language for Ajax applications
ABSTRACT: background_label: This paper presents Flapjax, a language designed for contemporary Web applications.
background_label: These applications communicate with servers and have rich, interactive interfaces.
objective_label: Flapjax provides two key features that simplify writing these applications.
method_label: First, it provides event streams, a uniform abstraction for communication within a program as well as with external Web services.
method_label: Second, the language itself is reactive: it automatically tracks data dependencies and propagates updates along those dataflows.
method_label: This allows developers to write reactive interfaces in a declarative and compositional style.
method_label: Flapjax is built on top of JavaScript.
method_label: It runs on unmodified browsers and readily interoperates with existing JavaScript code.
method_label: It is usable as either a programming language (that is compiled to JavaScript) or as a JavaScript library, and is designed for both uses.
result_label: This paper presents the language, its design decisions, and illustrative examples drawn from several working Flapjax applications.

===================================
paper_id: 148068080; YEAR: 2015
adju relevance: Irrelevant (0)
difference: 0; annotator4: 0; annotator3: 0
sources: abs_tfidfcbow200 - abs_tfidf
TITLE: Why Only Us: Language and Evolution
ABSTRACT: background_label: We are born crying, but those cries signal the first stirring of language.
background_label: Within a year or so, infants master the sound system of their language; a few years after that, they are engaging in conversations.
background_label: This remarkable, species-specific ability to acquire any human language -- "the language faculty" -- raises important biological questions about language, including how it has evolved.
objective_label: This book by two distinguished scholars -- a computer scientist and a linguist -- addresses the enduring question of the evolution of language.
background_label: Robert Berwick and Noam Chomsky explain that until recently the evolutionary question could not be properly posed, because we did not have a clear idea of how to define "language" and therefore what it was that had evolved.
method_label: But since the Minimalist Program, developed by Chomsky and others, we know the key ingredients of language and can put together an account of the evolution of human language and what distinguishes us from all other animals.
result_label: Berwick and Chomsky discuss the biolinguistic perspective on language, which views language as a particular object of the biological world; the computational efficiency of language as a system of thought and understanding; the tension between Darwin's idea of gradual change and our contemporary understanding about evolutionary change and language; and evidence from nonhuman animals, in particular vocal learning in songbirds.

===================================
paper_id: 27267084; YEAR: 2006
adju relevance: Irrelevant (0)
difference: 0; annotator4: 0; annotator3: 0
sources: abs_cbow200
TITLE: GENERATING AMERICAN SIGN LANGUAGE CLASSIFIER PREDICATES FOR ENGLISH-TO-ASL MACHINE TRANSLATION
ABSTRACT: background_label: A majority of deaf 18-year-olds in the United States have an English reading level below that of a typical 10-year-old student, and so machine translation (MT) software that could translate English text into American Sign Language (ASL) animations could significantly improve these individuals' access to information, communication, and services.
background_label: Previous English-to-ASL MT projects have made limited progress by restricting their output to subsets of ASL phenomena---thus avoiding important linguistic and animation issues.
method_label: None of these systems have shown how to generate classifier predicates (CPs), a phenomenon in which signers use special hand movements to indicate the location and movement of invisible objects (representing entities under discussion) in space around their bodies.
background_label: CPs are frequent in ASL and are necessary for conveying many concepts.
result_label: This project has created an English-to-ASL MT design capable of producing classifier predicates.
background_label: The classifier predicate generator inside this design has a planning-based architecture that uses a 3D "visualization" model of the arrangement of objects in a scene discussed by the English input text.
background_label: This generator would be one pathway in a multi-path English-to-ASL MT design; a separate processing pathway would be used to generate classifier predicates, to generate other ASL sentences, and to generate animations of Signed English (if the system lacked lexical resources for some input).
method_label: Instead of representing the ASL animation as a string (of individual signs to perform), this system encodes the multimodal language signal as multiple channels that are hierarchically structured and coordinated over time.
method_label: While this design feature and others have been prompted by the unique requirements of generating a sign language, these technologies have applications for the machine translation of written languages, the representation of other multimodal language signals, and the production of meaningful gestures by other animated virtual human characters.
method_label: To evaluate the functionality and scalability of the most novel portion of this English-to-ASL MT design, this project has implemented a prototype-version of the planning-based classifier predicate generator.
result_label: The classifier predicate animations produced by the system have been shown to native ASL signers to evaluate the output.

===================================
paper_id: 7867412; YEAR: 2001
adju relevance: Irrelevant (0)
difference: 0; annotator4: 0; annotator3: 0
sources: title_tfidf
TITLE: An interactive semantics of logic programming
ABSTRACT: objective_label: We apply to logic programming some recently emerging ideas from the field of reduction-based communicating systems, with the aim of giving evidence of the hidden interactions and the coordination mechanisms that rule the operational machinery of such a programming paradigm.
method_label: The semantic framework we have chosen for presenting our results is tile logic, which has the advantage of allowing a uniform treatment of goals and observations and of applying abstract categorical tools for proving the results.
method_label: As main contributions, we mention the finitary presentation of abstract unification, and a concurrent and coordinated abstract semantics consistent with the most common semantics of logic programming.
method_label: Moreover, the compositionality of the tile semantics is guaranteed by standard results, as it reduces to check that the tile systems associated to logic programs enjoy the tile decomposition property.
result_label: An extension of the approach for handling constraint systems is also discussed.

===================================
paper_id: 37390552; YEAR: 2017
adju relevance: Irrelevant (0)
difference: 0; annotator4: 0; annotator3: 0
sources: specter - title_tfidf - abs_tfidf - abs_tfidfcbow200
TITLE: Learning with Latent Language
ABSTRACT: background_label: The named concepts and compositional operators present in natural language provide a rich source of information about the kinds of abstractions humans use to navigate the world.
background_label: Can this linguistic background knowledge improve the generality and efficiency of learned classifiers and control policies?
objective_label: This paper aims to show that using the space of natural language strings as a parameter space is an effective way to capture natural task structure.
other_label: In a pretraining phase, we learn a language interpretation model that transforms inputs (e.g.
method_label: images) into outputs (e.g.
method_label: labels) given natural language descriptions.
method_label: To learn a new concept (e.g.
method_label: a classifier), we search directly in the space of descriptions to minimize the interpreter's loss on training examples.
method_label: Crucially, our models do not require language data to learn these concepts: language is used only in pretraining to impose structure on subsequent learning.
result_label: Results on image classification, text editing, and reinforcement learning show that, in all settings, models with a linguistic parameterization outperform those without.

===================================
paper_id: 55996011; YEAR: 2015
adju relevance: Irrelevant (0)
difference: 1; annotator4: 0; annotator3: 1
sources: title_tfidfcbow200
TITLE: Probabilistic Programming in Python using PyMC
ABSTRACT: background_label: Probabilistic programming (PP) allows flexible specification of Bayesian statistical models in code.
background_label: PyMC3 is a new, open-source PP framework with an intutive and readable, yet powerful, syntax that is close to the natural syntax statisticians use to describe models.
background_label: It features next-generation Markov chain Monte Carlo (MCMC) sampling algorithms such as the No-U-Turn Sampler (NUTS; Hoffman, 2014), a self-tuning variant of Hamiltonian Monte Carlo (HMC; Duane, 1987).
method_label: Probabilistic programming in Python confers a number of advantages including multi-platform compatibility, an expressive yet clean and readable syntax, easy integration with other scientific libraries, and extensibility via C, C++, Fortran or Cython.
result_label: These features make it relatively straightforward to write and use custom statistical distributions, samplers and transformation functions, as required by Bayesian analysis.

===================================
paper_id: 11017969; YEAR: 2016
adju relevance: Irrelevant (0)
difference: 1; annotator4: 0; annotator3: 1
sources: abs_tfidf
TITLE: Learning Phrasal Lexicons for Robotic Commands using Crowdsourcing
ABSTRACT: background_label: Robotic commands in natural language usually contain lots of spatial descriptions which are semantically similar but syntactically different.
background_label: Mapping such syntactic variants into semantic concepts that can be understood by robots is challenging due to the high flexibility of natural language expressions.
method_label: To tackle this problem, we collect robotic commands for navigation and manipulation tasks using crowdsourcing.
method_label: We further define a robot language and use a generative machine translation model to translate robotic commands from natural language to robot language.
objective_label: The main purpose of this paper is to simulate the interaction process between human and robots using crowdsourcing platforms, and investigate the possibility of translating natural language to robot language with paraphrases.

===================================
paper_id: 146121146; YEAR: 2019
adju relevance: Irrelevant (0)
difference: 0; annotator4: 0; annotator3: 0
sources: title_tfidf
TITLE: TryLinks: An interactive tutorial system for a cross-tier Web programming language
ABSTRACT: background_label: Links is a web programming language under development in Edinburgh aimed at simplifying web development.
background_label: Conventional multi-tier applications involve programming in several languages for different layers, and the mismatches between these layers and abstractions need to be handled by the programmer, which can lead to costly errors or security vulnerabilities.
background_label: In Links, programs combine all of the code of a web application in a single program, and the implementation generates appropriate JavaScript and HTML for the client, and SQL queries for the database.
background_label: However, installing and using Links is non-trivial, making it difficult for new programmers to get started and learn about Links.
objective_label: This paper reports on a Web-based"TryLinks"system, allowing anyone to experiment with Links without going through the installation process.
method_label: TryLinks was designed with two major functionalities: an interactive Links shell that teaches the basic syntax of Links and acts as a playground, as well as a short tutorial series on how Links is used in practical web development.
method_label: Tutorials can also be created or modified by administrators.
result_label: We present the design and implementation of TryLinks, and conclude with discussion of lessons learned from this project and remaining challenges for Web-based tutorials for Web programming languages.

===================================
paper_id: 11730229; YEAR: 2017
adju relevance: Irrelevant (0)
difference: 1; annotator4: 0; annotator3: 1
sources: title_cbow200 - title_tfidf - title_tfidfcbow200
TITLE: Interactive Learning of State Representation through Natural Language Instruction and Explanation
ABSTRACT: background_label: One significant simplification in most previous work on robot learning is the closed-world assumption where the robot is assumed to know ahead of time a complete set of predicates describing the state of the physical world.
background_label: However, robots are not likely to have a complete model of the world especially when learning a new task.
objective_label: To address this problem, this extended abstract gives a brief introduction to our on-going work that aims to enable the robot to acquire new state representations through language communication with humans.

===================================
paper_id: 9027681; YEAR: 2015
adju relevance: Irrelevant (0)
difference: 0; annotator4: 0; annotator3: 0
sources: cited - title_tfidf - title_tfidfcbow200 - title_cbow200 - abs_cbow200 - specter
TITLE: Compositional Semantic Parsing on Semi-Structured Tables
ABSTRACT: background_label: Two important aspects of semantic parsing for question answering are the breadth of the knowledge source and the depth of logical compositionality.
background_label: While existing work trades off one aspect for another, this paper simultaneously makes progress on both fronts through a new task: answering complex questions on semi-structured tables using question-answer pairs as supervision.
method_label: The central challenge arises from two compounding factors: the broader domain results in an open-ended set of relations, and the deeper compositionality results in a combinatorial explosion in the space of logical forms.
method_label: We propose a logical-form driven parsing algorithm guided by strong typing constraints and show that it obtains significant improvements over natural baselines.
result_label: For evaluation, we created a new dataset of 22,033 complex questions on Wikipedia tables, which is made publicly available.

===================================
paper_id: 122872326; YEAR: 1972
adju relevance: Irrelevant (0)
difference: 0; annotator4: 0; annotator3: 0
sources: title_tfidf
TITLE: Interactive Goal Programming
ABSTRACT: background_label: The use of goal programming for the solution of the multiple criteria problem is discussed.
method_label: An extension of this use is presented in the form of an algorithm which requires interaction with the relevant decision-maker in order to obtain certain information regarding his utility function defined over the permissible values of the criteria.
method_label: This algorithm provides a bridge between goal programming and recently suggested interactive strategies for the optimization of the multiple criteria problem.

===================================
paper_id: 145287916; YEAR: 2013
adju relevance: Irrelevant (0)
difference: 0; annotator4: 0; annotator3: 0
sources: abs_tfidf
TITLE: Agent-based models of language competition
ABSTRACT: background_label: Abstract This article uses computer simulations as a means of assessing two different models for the competition between two languages from the interdisciplinary perspective of complex systems.
background_label: These models allow for the analysis of the role of bilingual speakers and they consider two of the basic factors determining the use of each language: their relative prestige and the language loyalty of their speakers.
objective_label: Here we assess the effect of these parameters in different social networks, with the aim of contributing to the understanding of the role of bilingualism and social networks in processes of language contact.
method_label: We first present a qualitative analysis based on a simulation tool that we have designed, in order to visualize the dynamics of the models.
method_label: Secondly, we consider a qualitative analysis of the role of complex networks, identifying mechanisms for the rapid extinction of a language and for situations of language segregation.
method_label: Finally, we present a quantitative analysis which shows, counter-intuitively, a transition from a final scenario of language maintenance to one of language shift as language loyalty increases.
result_label: Other findings are: (i) that the scenario of language coexistence is reduced in the presence of bilingual agents; and (ii) that networks which allow for local effects reduce further the situations for which language maintenance is possible.

===================================
paper_id: 60903435; YEAR: 2015
adju relevance: Irrelevant (0)
difference: 0; annotator4: 0; annotator3: 0
sources: title_cbow200 - title_tfidfcbow200
TITLE: Learning Basic Programming Concepts by Creating Games with Scratch Programming Environment
ABSTRACT: background_label: Abstract A number of researchers have documented several difficulties faced by learners of basic programming concepts.
background_label: Among the suggested pedagogical solutions to overcome these difficulties is the use of serious games inthe learning process.
background_label: In fact, these games are more likely to boost the motivation of students and allow them to develop their knowledge efficiently.
objective_label: Our studyfocuses on evaluating such usage and the resulting students’ motivation towards programming.
method_label: We’ve made students create simple games using the Scratch game environment in order for them to learn programming basics.
result_label: The experiment was conducted with a group of 69 high school science major students.
background_label: This group of students was arbitrarily chosen and divided into three sub-groups.
method_label: With the first sub-groupwe experimented with our pedagogical method based on the creation of simple games using Scratch environment.
method_label: With the other sub-groups we used a conventional method based on Pascal programming language.
method_label: Twosurveys were distributed at the beginning and at the end of the experimentation in order to identify the programming level of students, their gaming habits, their motivation and interest for programming in the future.
result_label: The analysis of the surveysshows that using an environment for learning programming such as Scratch highly motivate students and empower them to pursue their studies in programming.
result_label: In fact, when learners were asked about their desire to continue their studies in programming, 65% of students who have experienced with Scratch environment consider continuing their studies in programming whereas only 10.3% of students who used a standard programming environment showed some interest.

===================================
paper_id: 145088158; YEAR: 2004
adju relevance: Irrelevant (0)
difference: 0; annotator4: 0; annotator3: 0
sources: abs_tfidfcbow200
TITLE: Children creating core properties of language: Evidence from an emerging sign language in Nicaragua
ABSTRACT: background_label: A new sign language has been created by deaf Nicaraguans over the past 25 years, providing an opportunity to observe the inception of universal hallmarks of language.
background_label: We found that in their initial creation of the language, children analyzed complex events into basic elements and sequenced these elements into hierarchically structured expressions according to principles not observed in gestures accompanying speech in the surrounding language.
method_label: Successive cohorts of learners extended this procedure, transforming Nicaraguan signing from its early gestural form into a linguistic system.
method_label: We propose that this early segmentation and recombination reflect mechanisms with which children learn, and thereby perpetuate, language.
result_label: Thus, children naturally possess learning abilities capable of giving language its fundamental structure.

===================================
paper_id: 15544018; YEAR: 2014
adju relevance: Irrelevant (0)
difference: 1; annotator4: 0; annotator3: 1
sources: specter - abs_cbow200
TITLE: Generating Natural Language Descriptions from OWL Ontologies: the NaturalOWL System
ABSTRACT: background_label: We present NaturalOWL, a natural language generation system that produces texts describing individuals or classes of OWL ontologies.
objective_label: Unlike simpler OWL verbalizers, which typically express a single axiom at a time in controlled, often not entirely fluent natural language primarily for the benefit of domain experts, we aim to generate fluent and coherent multi-sentence texts for end-users.
method_label: With a system like NaturalOWL, one can publish information in OWL on the Web, along with automatically produced corresponding texts in multiple languages, making the information accessible not only to computer programs and domain experts, but also end-users.
method_label: We discuss the processing stages of NaturalOWL, the optional domain-dependent linguistic resources that the system can use at each stage, and why they are useful.
result_label: We also present trials showing that when the domain-dependent llinguistic resources are available, NaturalOWL produces significantly better texts compared to a simpler verbalizer, and that the resources can be created with relatively light effort.

===================================
paper_id: 29379427; YEAR: 2013
adju relevance: Irrelevant (0)
difference: 0; annotator4: 0; annotator3: 0
sources: abs_tfidf - abs_tfidfcbow200
TITLE: Building Statistical Language Models of code
ABSTRACT: background_label: We present the Source Code Statistical Language Model data analysis pattern.
background_label: Statistical language models have been an enabling tool for a wide array of important language technologies.
background_label: Speech recognition, machine translation, and document summarization (to name a few) all rely on statistical language models to assign probability estimates to natural language utterances or sentences.
method_label: In this data analysis pattern, we describe the process of building n-gram language models over software source files.
result_label: We hope that by introducing the empirical software engineering community to best practices that have been established over the years in research for natural languages, statistical language models can become a tool that SE researchers are able to use to explore new research directions.

===================================
paper_id: 14892379; YEAR: 2007
adju relevance: Irrelevant (0)
difference: 0; annotator4: 0; annotator3: 0
sources: title_cbow200 - title_tfidfcbow200
TITLE: PIDoc: Wiki style Literate Programming for Prolog
ABSTRACT: background_label: This document introduces PlDoc, a literate programming system for Prolog.
background_label: Starting point for PlDoc was minimal distraction from the programming task and maximal immediate reward, attempting to seduce the programmer to use the system.
method_label: Minimal distraction is achieved using structured comments that are as closely as possible related to common Prolog documentation practices.
method_label: Immediate reward is provided by a web interface powered from the Prolog development environment that integrates searching and browsing application and system documentation.
result_label: When accessed from localhost, it is possible to go from documentation shown in a browser to the source code displayed in the user's editor of choice.

===================================
paper_id: 8518817; YEAR: 2017
adju relevance: Irrelevant (0)
difference: 0; annotator4: 0; annotator3: 0
sources: title_cbow200 - title_tfidfcbow200
TITLE: Learning abstract visual concepts via probabilistic program induction in a Language of Thought
ABSTRACT: background_label: The ability to learn abstract concepts is a powerful component of human cognition.
background_label: It has been argued that variable binding is the key element enabling this ability, but the computational aspects of variable binding remain poorly understood.
objective_label: Here, we address this shortcoming by formalizing the Hierarchical Language of Thought (HLOT) model of rule learning.
method_label: Given a set of data items, the model uses Bayesian inference to infer a probability distribution over stochastic programs that implement variable binding.
method_label: Because the model makes use of symbolic variables as well as Bayesian inference and programs with stochastic primitives, it combines many of the advantages of both symbolic and statistical approaches to cognitive modeling.
method_label: To evaluate the model, we conducted an experiment in which human subjects viewed training items and then judged which test items belong to the same concept as the training items.
result_label: We found that the HLOT model provides a close match to human generalization patterns, significantly outperforming two variants of the Generalized Context Model, one variant based on string similarity and the other based on visual similarity using features from a deep convolutional neural network.
result_label: Additional results suggest that variable binding happens automatically, implying that binding operations do not add complexity to peoples' hypothesized rules.
result_label: Overall, this work demonstrates that a cognitive model combining symbolic variables with Bayesian inference and stochastic program primitives provides a new perspective for understanding people's patterns of generalization.

===================================
paper_id: 36117198; YEAR: 2017
adju relevance: Irrelevant (0)
difference: 0; annotator4: 0; annotator3: 0
sources: title_tfidf
TITLE: DeepMind_Commentary
ABSTRACT: background_label: We agree with Lake and colleagues on their list of key ingredients for building humanlike intelligence, including the idea that model-based reasoning is essential.
background_label: However, we favor an approach that centers on one additional ingredient: autonomy.
objective_label: In particular, we aim toward agents that can both build and exploit their own internal models, with minimal human hand-engineering.
method_label: We believe an approach centered on autonomous learning has the greatest chance of success as we scale toward real-world complexity, tackling domains for which ready-made formal models are not available.
result_label: Here we survey several important examples of the progress that has been made toward building autonomous agents with humanlike abilities, and highlight some outstanding challenges.

===================================
paper_id: 82456167; YEAR: 2007
adju relevance: Irrelevant (0)
difference: 0; annotator4: 0; annotator3: 0
sources: title_tfidf
TITLE: Janeway's Immunobiology
ABSTRACT: background_label: Part I An Introduction to Immunobiology and Innate Immunity 1.
background_label: Basic Concepts in Immunology 2.
background_label: Innate Immunity Part II The Recognition of Antigen 3.
background_label: Antigen Recognition by B-cell and T-cell Receptors 4.
method_label: The Generation of Lymphocyte Antigen Receptors 5.
method_label: Antigen Presentation to T Lymphocytes Part III The Development of Mature Lymphocyte Receptor Repertoires 6.
method_label: Signaling Through Immune System Receptors 7.
result_label: The Development and Survival of Lymphocytes Part IV The Adaptive Immune Response 8.
background_label: T Cell-Mediated Immunity 9.
background_label: The Humoral Immune Response 10.
background_label: Dynamics of Adaptive Immunity 11.
other_label: The Mucosal Immune System Part V The Immune System in Health and Disease 12.
background_label: Failures of Host Defense Mechanism 13.
other_label: Allergy and Hypersensitivity 14.
other_label: Autoimmunity and Transplantation 15.
other_label: Manipulation of the Immune Response Part VI The Origins of Immune Responses 16.
other_label: Evolution of the Immune System Appendix I Immunologists' Toolbox Appendix II CD Antigens Appendix III Cytokines and their Receptors Appendix IV Chemokines and their Receptors Appendix V Immunological Constants

===================================
paper_id: 70125628; YEAR: 2018
adju relevance: Irrelevant (0)
difference: 0; annotator4: 0; annotator3: 0
sources: title_cbow200 - title_tfidfcbow200
TITLE: Learning Libraries of Subroutines for Neurally–Guided Bayesian Program Learning
ABSTRACT: background_label: Successful approaches to program induction require a hand-engineered domain-specific language (DSL), constraining the space of allowed programs and imparting prior knowledge of the domain.
method_label: We contribute a program induction algorithm that learns a DSL while jointly training a neural network to efficiently search for programs in the learned DSL.
method_label: We use our model to synthesize functions on lists, edit text, and solve symbolic regression problems, showing how the model learns a domain-specific library of program components for expressing solutions to problems in the domain.

===================================
paper_id: 842659; YEAR: 1992
adju relevance: Irrelevant (0)
difference: 0; annotator4: 0; annotator3: 0
sources: abs_tfidf - abs_tfidfcbow200
TITLE: An incrementally extensible document retrieval system based on linguistic and logical principles
ABSTRACT: background_label: Most natural language based document retrieval systems use the syntax structures of constituent phrases of documents as index terms.
background_label: Many of these systems also attempt to reduce the syntactic variability of natural language by some normalisation procedure applied to these syntax structures.
background_label: However, the retrieval performance of such systems remains fairly disappointing.
background_label: Some systems therefore use a meaning representation language to index and retrieve documents.
method_label: In this paper, a system is presented that uses Horn Clause Logic as meaning representation language, employs advanced techniques from natural Language Processing to achieve incremental extensibility, and uses methods from Logic Programming to achieve robustness in the face of insufficient data.

===================================
paper_id: 15542847; YEAR: 2003
adju relevance: Irrelevant (0)
difference: 0; annotator4: 0; annotator3: 0
sources: title_tfidf
TITLE: Naturalizing consciousness: a theoretical framework.
ABSTRACT: background_label: Consciousness has a number of apparently disparate properties, some of which seem to be highly complex and even inaccessible to outside observation.
background_label: To place these properties within a biological framework requires a theory based on a set of evolutionary and developmental principles.
objective_label: This paper describes such a theory, which aims to provide a unifying account of conscious phenomena.

===================================
paper_id: 11341005; YEAR: 2010
adju relevance: Irrelevant (0)
difference: 0; annotator4: 0; annotator3: 0
sources: title_tfidf
TITLE: Learning with dynamic programming
ABSTRACT: background_label: We consider the role of dynamic programming in sequential learning problems.
background_label: These problems require deciding which information to collect in order to best support later actions.
background_label: Such problems are ubiquitous, appearing in simulation, global optimization, revenue management, and many other areas.
method_label: Dynamic programming oers a coherent framework for understanding and solving Bayesian formulations of these problems.
method_label: We present the dynamic programming formulation applied to a canonical problem, Bernoulli ranking and selection.
method_label: We then review other sequential learning problems from the literature and the role of dynamic programming in their analysis.

===================================
paper_id: 60529032; YEAR: 1990
adju relevance: Irrelevant (0)
difference: 0; annotator4: 0; annotator3: 0
sources: title_tfidf
TITLE: Programming in MacScheme
ABSTRACT: background_label: "Programming in MacScheme" is an introduction to programming using the Scheme Language on an Apple Macintosh.
background_label: It assumes no previous programming experience on the part of the reader, but covers all the basics of the language and many advanced topics as well.
background_label: Like all good computer language texts, it gets the learner on the machine early and provides an abundance of examples and exercises.Michael Eisenberg is a Ph.D candidate in Computer Science at MIT.
method_label: William Clinger is Assistant Professor of Computer Science at the University of Oregon.
result_label: Ann Hartheimer is a programmer and writer.Harold Abelson is an Associate Professor of Computer Science and Engineering at MIT.

===================================
paper_id: 1278819; YEAR: 2014
adju relevance: Irrelevant (0)
difference: 0; annotator4: 0; annotator3: 0
sources: abs_cbow200
TITLE: Sign Language Lexical Recognition With Propositional Dynamic Logic
ABSTRACT: objective_label: This paper explores the use of Propositional Dynamic Logic (PDL) as a suitable formal framework for describing Sign Language (SL), the language of deaf people, in the context of natural language processing.
background_label: SLs are visual, complete, standalone languages which are just as expressive as oral languages.
background_label: Signs in SL usually correspond to sequences of highly specific body postures interleaved with movements, which make reference to real world objects, characters or situations.
method_label: Here we propose a formal representation of SL signs, that will help us with the analysis of automatically-collected hand tracking data from French Sign Language (FSL) video corpora.
result_label: We further show how such a representation could help us with the design of computer aided SL verification tools, which in turn would bring us closer to the development of an automatic recognition system for these languages.

===================================
paper_id: 1735632; YEAR: 1994
adju relevance: Irrelevant (0)
difference: 0; annotator4: 0; annotator3: 0
sources: abs_tfidf - abs_tfidfcbow200
TITLE: Adaptive Statistical Language Modeling: A Maximum Entropy Approach
ABSTRACT: background_label: Abstract : Language modeling is the attempt to characterize, capture and exploit regularities in natural language.
background_label: In statistical language modeling, large amounts of text are used to automatically determine the model's parameters.
background_label: Language modeling is useful in automatic speech recognition, machine translation, and any other application that processes natural language with incomplete knowledge.
objective_label: In this thesis, I view language as an information source which emits a stream of symbols from a finite alphabet (the vocabulary).
objective_label: The goal of language modeling is then to identify and exploit sources of information in the language stream, so as to minimize its perceived entropy.
method_label: Most existing statistical language models exploit the immediate past only.
method_label: To extract information from further back in the document's history, I use trigger pairs as the basic information bearing elements.
background_label: This allows the model to adapt its expectations to the topic of discourse.
background_label: Next, statistical evidence from many sources must be combined.
background_label: Traditionally, linear interpolation and its variants have been used, but these are shown here to be seriously deficient.
method_label: Instead, I apply the principle of Maximum Entropy (ME).
method_label: Each information source gives rise to a set of constraints, to be imposed on the combined estimate.
method_label: The intersection of these constraints is the set of probability functions which are consistent with all the information sources.
method_label: The function with the highest entropy within that set is the NE solution.
result_label: Language modeling, Adaptive language modeling, Statistical language modeling, Maximum entropy, Speech recognition.

===================================
paper_id: 1335463; YEAR: 2012
adju relevance: Irrelevant (0)
difference: 1; annotator4: 0; annotator3: 1
sources: abs_tfidf
TITLE: Language composition untangled
ABSTRACT: background_label: In language-oriented programming and modeling, software developers are largely concerned with the definition of domain-specific languages (DSLs) and their composition.
background_label: While various implementation techniques and frameworks exist for defining DSLs, language composition has not obtained enough attention and is not well-enough understood.
background_label: In particular, there is a lack of precise terminology for describing observations about language composition in theory and in existing language-development systems.
method_label: To clarify the issue, we specify five forms of language composition: language extension, language restriction, language unification, self-extension, and extension composition.
method_label: We illustrate this classification by various examples and apply it to discuss the performance of different language-development systems with respect to language composition.
result_label: We hope that the terminology provided by our classification will enable more precise communication on language composition.

===================================
paper_id: 15767190; YEAR: 2015
adju relevance: Irrelevant (0)
difference: 0; annotator4: 0; annotator3: 0
sources: abs_tfidf
TITLE: Cross-lingual Text Classification Using Topic-Dependent Word Probabilities
ABSTRACT: background_label: Cross-lingual text classification is a major challenge in natural language processing, since often training data is available in only one language (target language), but not available for the language of the document we want to classify (source language).
method_label: Here, we propose a method that only requires a bilingual dictionary to bridge the language gap.
method_label: Our proposed probabilistic model allows us to estimate translation probabilities that are conditioned on the whole source document.
method_label: The assumption of our probabilistic model is that each document can be characterized by a distribution over topics that help to solve the translation ambiguity of single words.
method_label: Using the derived translation probabilities, we then calculate the expected word frequency of each word type in the target language.
method_label: Finally, these expected word frequencies can be used to classify the source text with any classifier that was trained using only target language documents.
result_label: Our experiments confirm the usefulness of our proposed method.

===================================
paper_id: 8292072; YEAR: 2016
adju relevance: Irrelevant (0)
difference: 0; annotator4: 0; annotator3: 0
sources: specter - abs_tfidf - abs_tfidfcbow200
TITLE: Visualizing Natural Language Descriptions: A Survey
ABSTRACT: background_label: A natural language interface exploits the conceptual simplicity and naturalness of the language to create a high-level user-friendly communication channel between humans and machines.
background_label: One of the promising applications of such interfaces is generating visual interpretations of semantic content of a given natural language that can be then visualized either as a static scene or a dynamic animation.
objective_label: This survey discusses requirements and challenges of developing such systems and reports 26 graphical systems that exploit natural language interfaces and addresses both artificial intelligence and visualization aspects.
result_label: This work serves as a frame of reference to researchers and to enable further advances in the field.

===================================
paper_id: 16895378; YEAR: 2006
adju relevance: Irrelevant (0)
difference: 0; annotator4: 0; annotator3: 0
sources: abs_tfidf - abs_tfidfcbow200
TITLE: Automatic segmentation and identification of mixed-language speech using delta-BIC and LSA-based GMMs
ABSTRACT: objective_label: This paper proposes an approach to segmenting and identifying mixed-language speech.
method_label: A delta Bayesian information criterion (delta-BIC) is firstly applied to segment the input speech utterance into a sequence of language-dependent segments using acoustic features.
method_label: A VQ-based bi-gram model is used to characterize the acoustic-phonetic dynamics of two consecutive codewords in a language.
method_label: Accordingly the language-specific acoustic-phonetic property of sequence of phones was integrated in the identification process.
method_label: A Gaussian mixture model (GMM) is used to model codeword occurrence vectors orthonormally transformed using latent semantic analysis (LSA) for each language-dependent segment.
method_label: A filtering method is used to smooth the hypothesized language sequence and thus eliminate noise-like components of the detected language sequence generated by the maximum likelihood estimation.
method_label: Finally, a dynamic programming method is used to determine globally the language boundaries.
result_label: Experimental results show that for Mandarin, English, and Taiwanese, a recall rate of 0.87 for language boundary segmentation was obtained.
result_label: Based on this recall rate, the proposed approach achieved language identification accuracies of 92.1% and 74.9% for single-language and mixed-language speech, respectively.

===================================
paper_id: 20239810; YEAR: 2014
adju relevance: Irrelevant (0)
difference: 0; annotator4: 0; annotator3: 0
sources: abs_tfidfcbow200 - abs_tfidf - abs_cbow200
TITLE: Sign Language Writing Acquisition -- Technology for a Writing System
ABSTRACT: background_label: The Deaf use Sign Language for intellectual development, communication and other language dependent tasks, including the learning of the oral language in which they are immersed.
background_label: However, Deaf children should no longer be expected to access academic learning using the oral language [1][4][6].
background_label: Rather they need to have access to a writing system in/for Sign Language.
background_label: Writing systems (sequence of characters to represent a language) store and retrieve vital information for literature, science, knowledge creation, information dissemination, communication etc.
background_label: SignWriting is a writing system deemed adequate to the spatial-visual nature of Sign Languages.
background_label: However, the existing learning methodologies and computational technologies fail to help the Deaf (they lack usability, and/or are one-to-one translation from the oral language etc.).
objective_label: This article proposes a new, more natural approach: that of using screen and stylus, in context.
objective_label: It also presents a framework with which to develop tools for written literacy in Sign Language.

===================================
paper_id: 586525; YEAR: 2002
adju relevance: Irrelevant (0)
difference: 1; annotator4: 1; annotator3: 0
sources: title_tfidf
TITLE: Interactive multi-modal robot programming
ABSTRACT: objective_label: This paper introduces a novel approach to program a robot interactively through a multi-modal interface.
objective_label: The key characteristic of this approach is that the user can provide feedback interactively at any time - during both the programming and the execution phase.
method_label: The framework takes a three-step approach to the problem: multi-modal recognition, intention interpretation, and prioritized task execution.
method_label: The multi-modal recognition module translates hand gestures and spontaneous speech into a structured symbolic data stream without abstracting away the user's intent.
method_label: The intention interpretation module selects the appropriate primitives to generate a task based on the user's input, the system's current state, and robot sensor data.
method_label: Finally, the prioritized task execution module selects and executes skill primitives based on the system's current state, sensor inputs, and prior tasks.
result_label: The framework is demonstrated by interactively controlling and programming a vacuum-cleaning robot.

===================================
paper_id: 17698747; YEAR: 2007
adju relevance: Irrelevant (0)
difference: 1; annotator4: 0; annotator3: 1
sources: abs_tfidfcbow200
TITLE: Implementing aspect-oriented programming constructs as modular language extensions
ABSTRACT: background_label: AbstractExtensible programming languages and their compilers are experimental systems that use highly modular specifications of languages and language extensions in order to allow a variety of language features to be easily imported, by the programmer, into his or her programming environment.
method_label: Our framework for extensible languages is based on higher-order attribute grammars extended with a mechanism called "forwarding" that mimics a simple rewriting process.
background_label: Forwarding is designed such that no additional attribute definitions need to be written when combining a "host" language with language extensions (specified as attribute grammars) thus allowing for the modular composition of language features.
background_label: This means that programmers can remain unaware of the underlying attribute grammars when building customized languages by importing language extensions.
method_label: This paper shows how aspects and the aspect weaving process from Aspect-Oriented Programming can be specified as a modular language extension and imported into an extensible host language.
result_label: This paper also illustrates how an extensible compiler framework exposes its underlying semantic analyses and how this can provide a convenient arena for researchers to explore new aspect-oriented language features.

===================================
paper_id: 17493942; YEAR: 2012
adju relevance: Irrelevant (0)
difference: 0; annotator4: 0; annotator3: 0
sources: abs_tfidfcbow200 - abs_tfidf
TITLE: Fly out-smarts man
ABSTRACT: background_label: Precopulatory courtship is a high-cost, non-well understood animal world mystery.
background_label: Drosophila's (=D.
background_label: 's) precopulatory courtship not only shows marked structural similarities with mammalian courtship, but also with human spoken language.
objective_label: This suggests the study of purpose, modalities and in particular of the power of this language and to compare it to human language.
method_label: Following a mathematical symbolic dynamics approach, we translate courtship videos of D.'s body language into a formal language.
method_label: This approach made it possible to show that D. may use its body language to express individual information - information that may be important for evolutionary optimization, on top of the sexual group membership.
method_label: Here, we use Chomsky's hierarchical language classification to characterize the power of D.'s body language, and then compare it with the power of languages spoken by humans.
result_label: We find that from a formal language point of view, D.'s body language is at least as powerful as the languages spoken by humans.
result_label: From this we conclude that human intellect cannot be the direct consequence of the formal grammar complexity of human language.

===================================
paper_id: 67280741; YEAR: 2015
adju relevance: Irrelevant (0)
difference: 0; annotator4: 0; annotator3: 0
sources: abs_cbow200
TITLE: A Basic Language Technology Toolkit for Quechua
ABSTRACT: background_label: In this thesis, we describe the development of several natural language processing tools and resources for the Andean language Cuzco Quechua as part of the SQUOIA project at the University of Zurich.
objective_label: The main focus of this work lies on the implementation of a machine translation system for the language pair Spanish-Cuzco Quechua.
background_label: Since the target language Quechua is not only a non-mainstream language in the field of computational linguistics, but also typologically quite different from the source language Spanish, several rather unusual problems became evident, and we had to find solutions in order to deal with them.
method_label: Therefore, the first part of this thesis presents monolingual tools and resources that are not directly related to machine translation, but are nevertheless indispensable.
method_label: The main contributions of this thesis are as follows:  - We built a hybrid machine translation system that can translate Spanish text into Cuzco Quechua.
result_label: The core system is a classical rule-based transfer engine, however, several statistical modules are included for tasks that cannot be resolved reliably with rules.
background_label: - We implemented a text normalization pipeline that automatically rewrites Quechua texts in different orthographies or dialects to the official Peruvian standard orthography.
background_label: This includes a tool for the morphological analysis of Quechua words that achieves high coverage.
method_label: Furthermore, we also created a slightly adapted version that can be used as spell checker back-end, in combination with a plug-in for the open-source productivity suite LibreOffice/OpenOffice.
method_label: - We built a Quechua dependency treebank of about 2000 annotated sentences, that provided not only training data for some of the translation modules, but also served as a source of verification, since it allows to observe the distribution of certain syntactic and morphological structures.
method_label: Furthermore, we trained a statistical parser on the treebank and thus have now a complete pipeline to morphologically analyze, disambiguate and then parse Quechua texts.
result_label: Apart from the scientific interest in developing tools and applications for a language that is typologically distant from the main stream languages in computational linguistics, we hope that the various resources presented in this thesis will be useful not only for language learners and linguists, but also to Quechua speakers who want to use modern technology in their native language.

===================================
paper_id: 60925535; YEAR: 1983
adju relevance: Irrelevant (0)
difference: 0; annotator4: 0; annotator3: 0
sources: abs_cbow200
TITLE: SISAL: streams and iteration in a single-assignment language. Language reference manual, Version 1. 1
ABSTRACT: background_label: Many multi-processor systems are currently under study by various groups around the world.
background_label: The understanding and exploitation of parallelism in these systems is a primary goal of these studies.
objective_label: To facilitate the use and comparison of these systems, we proposed to define a common high-level language.
method_label: The primary candidate was a single-assignment, applicative, dataflow language.
method_label: In spite of remarkable diversity in hardware structures, all proposed systems could benefit from the functional semantics of such a language, and from other characteristics such as implicit parallelism, freedom from side effects, locality of effects, etc.
result_label: A compiler would be produced having a single Front-end (language specific) parser and several Back-end (machine specific) code generators.
background_label: An Intermediate Format is defined to serve as the interface between parser and code generators and interface between this system and other language systems.
background_label: Benchmark programs were produced.
background_label: SISAL is designed to express algorithms for execution on computers capable of highly concurrent operation.
background_label: More specifically, the application area to be supported is numerical computation which strains the limits of high performance machines, and the primary targets for translation of SISAL programs are dataflow data-driven machines.
background_label: Nevertheless, it has been our intention that the language not have idiosyncrasies reflecting themore » particular nature of the application area or target machine.
other_label: It should be reasonable for SISAL to evolve into a general purpose language appropriate for writing programs to run on future general parallel computers.« less

===================================
paper_id: 1467233; YEAR: 2016
adju relevance: Irrelevant (0)
difference: 1; annotator4: 1; annotator3: 0
sources: abs_tfidf
TITLE: Learning Lexical Entries for Robotic Commands using Crowdsourcing
ABSTRACT: background_label: Robotic commands in natural language usually contain various spatial descriptions that are semantically similar but syntactically different.
background_label: Mapping such syntactic variants into semantic concepts that can be understood by robots is challenging due to the high flexibility of natural language expressions.
method_label: To tackle this problem, we collect robotic commands for navigation and manipulation tasks using crowdsourcing.
method_label: We further define a robot language and use a generative machine translation model to translate robotic commands from natural language to robot language.
objective_label: The main purpose of this paper is to simulate the interaction process between human and robots using crowdsourcing platforms, and investigate the possibility of translating natural language to robot language with paraphrases.

===================================
paper_id: 17390526; YEAR: 2003
adju relevance: Irrelevant (0)
difference: 0; annotator4: 0; annotator3: 0
sources: abs_cbow200
TITLE: Extending XML-RL with update
ABSTRACT: background_label: With the extensive use of XML in applications over the Web, how to update XML data is becoming an important issue because the role of XML has expanded beyond traditional applications, in which XML is used as a mean for data representation and exchange on the Web.
objective_label: This paper presents a novel declarative XML update language, which is an extension of the XML-RL query language.
objective_label: Compared with other existing XML update languages, it has the following features.
method_label: First, it is the only XML data manipulation language based on a higher data model.
method_label: All of the other update languages adopt so-called graph-based or tree-based data models.
method_label: Therefore, update requests can be expressed in a more intuitive and natural way in our language than in the other languages.
method_label: Second, our language is designed to deal with ordered and unordered data.
background_label: Some of the existing languages cannot handle the order of documents.
background_label: Third, our language can express complex update requests at multiple level in a hierarchy in a simple and fast way.
background_label: Some existing languages have to express such complex requests in nested updates, which is too complicated and nonintuitive to comprehend for end users.
background_label: Fourth, our language directly supports the functionality of updating complex objects while all other update language do not support these operations.
method_label: Lastly, most of existing languages use rename to modify attribute and element names, which is a different way from updates on value.
method_label: Our language modifies tag names, values, and objects in a unified way by the introduction of three kinds of logical binding variables: object variables, value variables, and name variables.
result_label: The powerful ability of our language is shown by various examples.

===================================
paper_id: 14855025; YEAR: 2015
adju relevance: Irrelevant (0)
difference: 0; annotator4: 0; annotator3: 0
sources: abs_tfidf - abs_tfidfcbow200
TITLE: High-performance cross-language interoperability in a multi-language runtime
ABSTRACT: background_label: Programmers combine different programming languages because it allows them to use the most suitable language for a given problem, to gradually migrate existing projects from one language to another, or to reuse existing source code.
background_label: However, existing cross-language mechanisms suffer from complex interfaces, insufficient flexibility, or poor performance.
objective_label: We present the TruffleVM, a multi-language runtime that allows composing different language implementations in a seamless way.
method_label: It reduces the amount of required boiler-plate code to a minimum by allowing programmers to access foreign functions or objects by using the notation of the host language.
method_label: We compose language implementations that translate source code to an intermediate representation (IR), which is executed on top of a shared runtime system.
method_label: Language implementations use language-independent messages that the runtime resolves at their first execution by transforming them to efficient foreign-language-specific operations.
method_label: The TruffleVM avoids conversion or marshaling of foreign objects at the language boundary and allows the dynamic compiler to perform its optimizations across language boundaries, which guarantees high performance.
result_label: This paper presents an implementation of our ideas based on the Truffle system and its guest language implementations JavaScript, Ruby, and C.

===================================
paper_id: 119425731; YEAR: 1972
adju relevance: Irrelevant (0)
difference: 0; annotator4: 0; annotator3: 0
sources: title_tfidf
TITLE: Unzerlegbare Darstellungen I
ABSTRACT: background_label: LetK be the structure got by forgetting the composition law of morphisms in a given category.
background_label: A linear representation ofK is given by a map V associating with any morphism ϕ: a→e ofK a linear vector space map V(ϕ): V(a)→V(e).
method_label: We classify thoseK having only finitely many isomorphy classes of indecomposable linear representations.
other_label: This classification is related to an old paper by Yoshii [3].

===================================
paper_id: 201668540; YEAR: 2019
adju relevance: Irrelevant (0)
difference: 1; annotator4: 1; annotator3: 0
sources: title_tfidf
TITLE: Interactive Language Learning by Question Answering
ABSTRACT: background_label: Humans observe and interact with the world to acquire knowledge.
background_label: However, most existing machine reading comprehension (MRC) tasks miss the interactive, information-seeking component of comprehension.
background_label: Such tasks present models with static documents that contain all necessary information, usually concentrated in a single short substring.
background_label: Thus, models can achieve strong performance through simple word- and phrase-based pattern matching.
objective_label: We address this problem by formulating a novel text-based question answering task: Question Answering with Interactive Text (QAit).
method_label: In QAit, an agent must interact with a partially observable text-based environment to gather information required to answer questions.
method_label: QAit poses questions about the existence, location, and attributes of objects found in the environment.
method_label: The data is built using a text-based game generator that defines the underlying dynamics of interaction with the environment.
method_label: We propose and evaluate a set of baseline models for the QAit task that includes deep reinforcement learning agents.
result_label: Experiments show that the task presents a major challenge for machine reading systems, while humans solve it with relative ease.

===================================
paper_id: 13148301; YEAR: 1998
adju relevance: Irrelevant (0)
difference: 1; annotator4: 1; annotator3: 0
sources: abs_cbow200 - abs_tfidfcbow200
TITLE: Montages/Gem-Mex: a meta visual programming generator
ABSTRACT: background_label: Last decade witnessed a disappointing lack in technology transfer from formal semantics to language design.
background_label: Research in formal semantics has developed increasingly complex concepts and notation, at the expense of calculational clarity and applicability in the development of languages.
background_label: Montages is a visual domain-specific formalism for specifying all the aspects of a programming language.
method_label: It is intelligible to a broad range of people involved in the language life cycle, from design to programming language descriptions are fed to a rapid prototyping tool, called Gem-Mex, which generates a visual programming environment for the given language.
method_label: Gem-Mex consists of a graphical front-end which allows a comfortable editing of the visual components of the specification.
method_label: Starting from these visual descriptions the tool is able to generate in an automatic way high-quality documents, type-checkers, interpreters and a visual symbolic debugger.
result_label: All these products form a powerful suite where the programmer can write, execute, animate and debug programs written in the specified language.

===================================
paper_id: 118988729; YEAR: 2017
adju relevance: Irrelevant (0)
difference: 0; annotator4: 0; annotator3: 0
sources: title_tfidf
TITLE: A Microphotonic Astrocomb
ABSTRACT: background_label: One of the essential prerequisites for detection of Earth-like extra-solar planets or direct measurements of the cosmological expansion is the accurate and precise wavelength calibration of astronomical spectrometers.
background_label: It has already been realized that the large number of exactly known optical frequencies provided by laser frequency combs ('astrocombs') can significantly surpass conventionally used hollow-cathode lamps as calibration light sources.
background_label: A remaining challenge, however, is generation of frequency combs with lines resolvable by astronomical spectrometers.
method_label: Here we demonstrate an astrocomb generated via soliton formation in an on-chip microphotonic resonator ('microresonator') with a resolvable line spacing of 23.7 GHz.
method_label: This comb is providing wavelength calibration on the 10 cm/s radial velocity level on the GIANO-B high-resolution near-infrared spectrometer.
result_label: As such, microresonator frequency combs have the potential of providing broadband wavelength calibration for the next-generation of astronomical instruments in planet-hunting and cosmological research.

===================================
paper_id: 1629069; YEAR: 2010
adju relevance: Irrelevant (0)
difference: 1; annotator4: 1; annotator3: 0
sources: title_cbow200 - title_tfidf - title_tfidfcbow200
TITLE: Learning SQL Programming with Interactive Tools: From Integration to Personalization
ABSTRACT: background_label: Rich, interactive eLearning tools receive a lot of attention nowadays from both practitioners and researchers.
background_label: However, broader dissemination of these tools is hindered by the technical difficulties of their integration into existing platforms.
objective_label: This article explores the technical and conceptual problems of using several interactive educational tools in the context of a single course.
method_label: It presents an integrated Exploratorium for database courses, an experimental platform, which provides personalized access to several types of interactive learning activities.
result_label: Several classroom studies of the Exploratorium have demonstrated its value in both the integration of several tools and the provision of personalized access.

===================================
paper_id: 7699915; YEAR: 2017
adju relevance: Irrelevant (0)
difference: 0; annotator4: 0; annotator3: 0
sources: abs_cbow200
TITLE: Multilingual CALL Framework for Automatic Language Exercise Generation from Free Text
ABSTRACT: background_label: This paper describes a web-based application to design and answer exercises for language learning.
background_label: It is available in  Basque, Spanish, English, and French.
method_label: Based on open-source Natural Language Processing (NLP) technology such as  word embedding models and word sense disambiguation, the system enables users to create automatically and in real time three types of exercises, namely, Fill-in-the-Gaps, Multiple Choice, and Shuffled Sentences questionnaires.
method_label: These are generated from texts of the users’ own choice, so they can train their language skills with  content of their particular interest.

===================================
paper_id: 7375974; YEAR: 2017
adju relevance: Irrelevant (0)
difference: 1; annotator4: 0; annotator3: 1
sources: cited - title_tfidf - title_tfidfcbow200 - title_cbow200 - abs_cbow200 - specter
TITLE: Learning concepts through conversations in spoken dialogue systems
ABSTRACT: background_label: Spoken dialogue systems must be able to recover gracefully from unexpected user inputs.
background_label: In many cases, these unexpected utterances may be within the scope of the system, but include previously unseen phrases that the system cannot interpret.
objective_label: In this work, we augment a spoken dialogue system with the ability to learn about new concepts by conversing with the user in natural language.
method_label: We present a novel model that detects phrases corresponding to such concepts, using information from a neural slotfiller as well as syntactic cues.
method_label: The system then prompts the user for a definition of the detected phrases, and uses these definitions to re-parse the original utterance.
result_label: We demonstrate significant gains by learning from the user, compared to a baseline system.

===================================
paper_id: 202565569; YEAR: 2019
adju relevance: Irrelevant (0)
difference: 0; annotator4: 0; annotator3: 0
sources: abs_cbow200
TITLE: Taskmaster-1: Toward a Realistic and Diverse Dialog Dataset
ABSTRACT: background_label: A significant barrier to progress in data-driven approaches to building dialog systems is the lack of high quality, goal-oriented conversational data.
method_label: To help satisfy this elementary requirement, we introduce the initial release of the Taskmaster-1 dataset which includes 13,215 task-based dialogs comprising six domains.
method_label: Two procedures were used to create this collection, each with unique advantages.
method_label: The first involves a two-person, spoken"Wizard of Oz"(WOz) approach in which trained agents and crowdsourced workers interact to complete the task while the second is"self-dialog"in which crowdsourced workers write the entire dialog themselves.
method_label: We do not restrict the workers to detailed scripts or to a small knowledge base and hence we observe that our dataset contains more realistic and diverse conversations in comparison to existing datasets.
method_label: We offer several baseline models including state of the art neural seq2seq architectures with benchmark performance as well as qualitative human evaluations.
method_label: Dialogs are labeled with API calls and arguments, a simple and cost effective approach which avoids the requirement of complex annotation schema.
method_label: The layer of abstraction between the dialog model and the service provider API allows for a given model to interact with multiple services that provide similar functionally.
result_label: Finally, the dataset will evoke interest in written vs. spoken language, discourse patterns, error handling and other linguistic phenomena related to dialog system research, development and design.

===================================
paper_id: 198147497; YEAR: 2019
adju relevance: Irrelevant (0)
difference: 0; annotator4: 0; annotator3: 0
sources: title_tfidfcbow200 - title_cbow200
TITLE: Language Support for Adaptation: Intent-Driven Programming in FAST
ABSTRACT: background_label: Historically, programming language semantics has focused on assigning a precise mathematical meaning to programs.
background_label: That meaning is a function from the program's input domain to its output domain determined solely by its syntactic structure.
background_label: Such a semantics, fosters the development of portable applications which are oblivious to the performance characteristics and limitations (such as a maximum memory footprint) of particular hardware and software platforms.
method_label: This paper introduces the idea of intent-driven programming where the meaning of a program additionally depends on an accompanying intent specification expressing how the ordinary program meaning is dynamically modified during execution to satisfy additional properties expressed by the intent.
method_label: These include both intensional properties---e.g., resource usage---and extensional properties---e.g., accuracy of the computed answer.
method_label: To demonstrate the intent-driven programming model's value, this paper presents a general-purpose intent-driven programming language---called FAST---implemented as an extension of Swift.
method_label: FAST consists of an intent compiler, a profiler, a general controller interface and a runtime module which supports interoperation with legacy C/C++ codes.
result_label: Compared to existing frameworks for adaptive computing, \FAST{} supports dynamic adaptation to changes both in the operating environment and in the intent itself, and enables the mixing of procedural control and control based on feedback and optimization.

===================================
paper_id: 16098120; YEAR: 2011
adju relevance: Irrelevant (0)
difference: 1; annotator4: 1; annotator3: 0
sources: abs_tfidf
TITLE: Language understanding as a step towards human level intelligence - automatizing the construction of the initial dictionary from example sentences
ABSTRACT: background_label: For a system to understand natural language, it needs to be able to take natural language text and answer questions given in natural language with respect to that text; it also needs to be able to follow instructions given in natural language.
background_label: To achieve this, a system must be able to process natural language and be able to capture the knowledge within that text.
background_label: Thus it needs to be able to translate natural language text into a formal language.
method_label: We discuss our approach to do this, where the translation is achieved by composing the meaning of words in a sentence.
method_label: Our initial approach uses an inverse lambda method that we developed (and other methods) to learn meaning of words from meaning of sentences and an initial lexicon.
method_label: We then present an improved method where the initial lexicon is also learned by analyzing the training sentence and meaning pairs.
result_label: We evaluate our methods and compare them with other existing methods on a corpora of database querying and robot command and control.

===================================
paper_id: 2539078; YEAR: 2016
adju relevance: Irrelevant (0)
difference: 0; annotator4: 0; annotator3: 0
sources: abs_tfidf
TITLE: Continuous multilinguality with language vectors
ABSTRACT: background_label: Most existing models for multilingual natural language processing (NLP) treat language as a discrete category, and make predictions for either one language or the other.
background_label: In contrast, we propose using continuous vector representations of language.
method_label: We show that these can be learned efficiently with a character-based neural language model, and used to improve inference about language varieties not seen during training.
result_label: In experiments with 1303 Bible translations into 990 different languages, we empirically explore the capacity of multilingual language models, and also show that the language vectors capture genetic relationships between languages.

===================================
paper_id: 11277176; YEAR: 2015
adju relevance: Irrelevant (0)
difference: 0; annotator4: 0; annotator3: 0
sources: title_cbow200 - title_tfidfcbow200 - abs_cbow200
TITLE: Saul: Towards Declarative Learning Based Programming.
ABSTRACT: background_label: We present Saul, a new probabilistic programming language designed to address some of the shortcomings of programming languages that aim at advancing and simplifying the development of AI systems.
method_label: Such languages need to interact with messy, naturally occurring data, to allow a programmer to specify what needs to be done at an appropriate level of abstraction rather than at the data level, to be developed on a solid theory that supports moving to and reasoning at this level of abstraction and, finally, to support flexible integration of these learning and inference models within an application program.
method_label: Saul is an object-functional programming language written in Scala that facilitates these by (1) allowing a programmer to learn, name and manipulate named abstractions over relational data; (2) supporting seamless incorporation of trainable (probabilistic or discriminative) components into the program, and (3) providing a level of inference over trainable models to support composition and make decisions that respect domain and application constraints.
method_label: Saul is developed over a declaratively defined relational data model, can use piecewise learned factor graphs with declaratively specified learning and inference objectives, and it supports inference over probabilistic models augmented with declarative knowledge-based constraints.
method_label: We describe the key constructs of Saul and exemplify its use in developing applications that require relational feature engineering and structured output prediction.

===================================
paper_id: 8354088; YEAR: 2014
adju relevance: Irrelevant (0)
difference: 0; annotator4: 0; annotator3: 0
sources: abs_tfidf - abs_tfidfcbow200
TITLE: A Survey of Language Identification Techniques and Applications
ABSTRACT: background_label: Language Identification is the process of determining in which natural language the contents of the text is written.
background_label: Language identification is always been an important research area which has been carried out from early 1970’s.
background_label: Still it is a fascinating field to be studied due to increased demand of natural language processing applications.
background_label: In many applications, it works as a primary step of some larger process.
method_label: In this paper, a number of applications are outlined where language identification is working successfully.
method_label: Language Identification can be done using two types of techniques: computational techniques and non-computational techniques.
method_label: Computational techniques are based on statistical methods and requires large set of training data for each of the language while non-computational techniques require that researcher must have extensive knowledge about the language to-be-identified.
method_label: In this paper, a brief review of the few papers is presented which outlines the various statistical and non-statistical techniques that have been applied by the different researchers for language identification.
result_label: Besides it, different researchers performed language identification for different type of documents such as monolingual, multilingual, long and short and for a particular set of languages.

===================================
paper_id: 61547537; YEAR: 2010
adju relevance: Irrelevant (0)
difference: 0; annotator4: 0; annotator3: 0
sources: title_tfidf
TITLE: C# Programming Language
ABSTRACT: background_label: Based on my own experience, I can safely say that every .NET developer who reads this will have at least one aha moment and will be a better developer for it.
background_label: From the Foreword by Don Box The popular C# programming language combines the high productivity of rapid application development languages with the raw power of C and C++.
method_label: Updated to cover the new features of C# 4.0, including dynamic binding, named and optional parameters, and covariant and contravariant generic types, this release takes the language to the next level by adding the ability to cleanly write programs that dont rely on static type definitions.
method_label: This allows dynamic programming languages such as Python, Ruby, and JavaScript to feel native to C#.
result_label: The C# Programming Language, Fourth Edition, continues to be the authoritative and annotated technical reference for C# 4.0.
background_label: Written by Anders Hejlsberg, the languages architect, and his colleagues, Mads Torgersen, Scott Wiltamuth, and Peter Golde, this volume has been completely updated for C# 4.0.
background_label: The book provides the complete specification of the language, along with descriptions, reference materials, code samples, and annotations from twelve prominent C# gurus.
background_label: The many annotations bring a depth and breadth of understanding rarely found in any programming book.
method_label: As the main text of the book introduces the concepts of the C# language, cogent annotations explain why they are important, how they are used, how they relate to other languages, and even how they evolved.
other_label: This book is the definitive, must-have reference for any developer who wants to understand C#.
other_label: With annotations from: Brad Abrams, Joseph Albahari, Krzysztof Cwalina, Jesse Liberty, Eric Lippert, Christian Nagel, Vladimir Reshetnikov, Marek Safar, Chris Sells, Peter Sestoft, Jon Skeet, and Bill Wagner.

===================================
paper_id: 12012819; YEAR: 2014
adju relevance: Irrelevant (0)
difference: 0; annotator4: 0; annotator3: 0
sources: title_tfidf - specter
TITLE: Natural Language Generation in Interactive Systems
ABSTRACT: objective_label: An informative and comprehensive overview of the state-of-the-art in natural language generation (NLG) for interactive systems, this guide serves to introduce graduate students and new researchers to the field of natural language processing and artificial intelligence, while inspiring them with ideas for future research.
method_label: Detailing the techniques and challenges of NLG for interactive applications, it focuses on the research into systems that model collaborativity and uncertainty, are capable of being scaled incrementally, and can engage with the user effectively.
method_label: A range of real-world case studies is also included.
method_label: The book and the accompanying website feature a comprehensive bibliography, and refer the reader to corpora, data, software and other resources for pursuing research on natural language generation and interactive systems, including dialog systems, multimodal interfaces and assistive technologies.
result_label: It is an ideal resource for students and researchers in computational linguistics, natural language processing and related fields.

===================================
paper_id: 1789360; YEAR: 2016
adju relevance: Irrelevant (0)
difference: 0; annotator4: 0; annotator3: 0
sources: title_tfidfcbow200 - title_cbow200
TITLE: Design and Implementation of Probabilistic Programming Language Anglican
ABSTRACT: background_label: Anglican is a probabilistic programming system designed to interoperate with Clojure and other JVM languages.
method_label: We introduce the programming language Anglican, outline our design choices, and discuss in depth the implementation of the Anglican language and runtime, including macro-based compilation, extended CPS-based evaluation model, and functional representations for probabilistic paradigms, such as a distribution, a random process, and an inference algorithm.
method_label: We show that a probabilistic functional language can be implemented efficiently and integrated tightly with a conventional functional language with only moderate computational overhead.
result_label: We also demonstrate how advanced probabilistic modeling concepts are mapped naturally to the functional foundation.

===================================
paper_id: 18876193; YEAR: 2014
adju relevance: Irrelevant (0)
difference: 0; annotator4: 0; annotator3: 0
sources: title_cbow200 - title_tfidf - abs_tfidf
TITLE: Templet: a Markup Language for Concurrent Programming
ABSTRACT: objective_label: In this paper we propose a new approach to the description of a network of interacting processes in a traditional programming language.
background_label: Special programming languages or extensions to sequential languages are usually designed to express the semantics of concurrent execution.
background_label: Using libraries in C++, Java, C#, and other languages is more practical way of concurrent programming.
method_label: However, this method leads to an increase in workload of a manual coding.
method_label: Besides, stock compilers can not detect semantic errors related to the programming model in such libraries.
method_label: The new markup language and a special technique of automatic programming based on the marked code can solve these problems.
method_label: The article provides a detailed specification of the markup language without discussing its implementation details.
result_label: The language is used for programming of current and prospective multi-core and many-core systems.

===================================
paper_id: 20605616; YEAR: 2017
adju relevance: Irrelevant (0)
difference: 1; annotator4: 0; annotator3: 1
sources: abs_tfidfcbow200 - abs_tfidf - abs_cbow200 - specter
TITLE: Visual Reasoning with Natural Language
ABSTRACT: background_label: Natural language provides a widely accessible and expressive interface for robotic agents.
background_label: To understand language in complex environments, agents must reason about the full range of language inputs and their correspondence to the world.
background_label: Such reasoning over language and vision is an open problem that is receiving increasing attention.
background_label: While existing data sets focus on visual diversity, they do not display the full range of natural language expressions, such as counting, set reasoning, and comparisons.
method_label: We propose a simple task for natural language visual reasoning, where images are paired with descriptive statements.
method_label: The task is to predict if a statement is true for the given scene.
result_label: This abstract describes our existing synthetic images corpus and our current work on collecting real vision data.

===================================
paper_id: 54140293; YEAR: 2003
adju relevance: Irrelevant (0)
difference: 0; annotator4: 0; annotator3: 0
sources: title_tfidf
TITLE: The Scheme Programming Language
ABSTRACT: background_label: This thoroughly updated edition of The Scheme Programming Language provides an introduction to Scheme and a definitive reference for standard Scheme, presented in a clear and concise manner.
background_label: Written for professionals and students with some prior programming experience, it begins by leading the programmer gently through the basics of Scheme and continues with an introduction to some of the more advanced features of the language.
background_label: Many exercises are presented to help reinforce the lessons learned, and answers to the exercises are given in a new appendix.
method_label: Most of the remaining chapters are dedicated to the reference material, which describes in detail the standard features of Scheme included in the Revised Report on Scheme and the ANSI/IEEE standard for Scheme.Numerous examples are presented throughout the introductory and reference portions of the text, and a unique set of extended example programs and applications, with additional exercises, are presented in the final chapter.
method_label: Reinforcing the book's utility as a reference text are appendixes that present the formal syntax of Scheme, a summary of standard forms and procedures, and a bibliography of Scheme resources.
method_label: The Scheme Programming Language stands alone as an introduction to and essential reference for Scheme programmers.
result_label: It is also useful as a supplementary text for any course that uses Scheme.The Scheme Programming Language is illustrated by artist Jean-Pierre Hebert, who writes Scheme programs to extend his ability to create sophisticated works of digital art.

===================================
paper_id: 12693371; YEAR: 2014
adju relevance: Irrelevant (0)
difference: 0; annotator4: 0; annotator3: 0
sources: title_tfidfcbow200 - title_cbow200
TITLE: Experimental Multi-threading Support for the Julia Programming Language
ABSTRACT: background_label: Julia is a young programming language that is designed for technical computing.
background_label: Although Julia is dynamically typed it is very fast and usually yields C speed by utilizing a just-in-time compiler.
background_label: Still, Julia has a simple syntax that is similar to Matlab, which is widely known as an easy-to-use programming environment.
background_label: While Julia is very versatile and provides asynchronous programming facilities in the form of tasks (coroutines) as well as distributed multi-process parallelism, one missing feature is shared memory multi-threading.
objective_label: In this paper we present our experiment on introducing multi-threading support in the Julia programming environment.
result_label: While our implementation has some restrictions that have to be taken into account when using threads, the results are promising yielding almost full speedup for perfectly parallelizable tasks.

===================================
paper_id: 406436; YEAR: 2003
adju relevance: Irrelevant (0)
difference: 0; annotator4: 0; annotator3: 0
sources: title_tfidfcbow200 - title_cbow200
TITLE: PISA: A Platform and Programming Language Independent Interface for Search Algorithms
ABSTRACT: background_label: This paper introduces an interface specification (PISA) that allows to separate the problem-specific part of an optimizer from the problem-independent part.
objective_label: We propose a view of the general optimization scenario, where the problem representation together with the variation operators is seen as an integral part of the optimization problem and can hence be easily separated from the selection operators.
method_label: Both parts are implemented as independent programs, that can be provided as ready-to-use packages and arbitrarily combined.
method_label: This makes it possible to specify and implement representation-independent selection modules, which form the essence of modern multiobjective optimization algorithms.
method_label: The variation operators, on the other hand, have to be defined in one module together with the optimization problem, facilitating a customized problem description.
result_label: Besides the specification, the paper contains a correctness proof for the protocol and measured efficiency results.

===================================
paper_id: 7403469; YEAR: 2013
adju relevance: Irrelevant (0)
difference: 0; annotator4: 0; annotator3: 0
sources: abs_cbow200
TITLE: Instant pickles: generating object-oriented pickler combinators for fast and extensible serialization
ABSTRACT: background_label: As more applications migrate to the cloud, and as "big data" edges into even more production environments, the performance and simplicity of exchanging data between compute nodes/devices is increasing in importance.
background_label: An issue central to distributed programming, yet often under-considered, is serialization or pickling, i.e., persisting runtime objects by converting them into a binary or text representation.
background_label: Pickler combinators are a popular approach from functional programming; their composability alleviates some of the tedium of writing pickling code by hand, but they don't translate well to object-oriented programming due to qualities like open class hierarchies and subtyping polymorphism.
background_label: Furthermore, both functional pickler combinators and popular, Java-based serialization frameworks tend to be tied to a specific pickle format, leaving programmers with no choice of how their data is persisted.
method_label: In this paper, we present object-oriented pickler combinators and a framework for generating them at compile-time, called scala/pickling, designed to be the default serialization mechanism of the Scala programming language.
method_label: The static generation of OO picklers enables significant performance improvements, outperforming Java and Kryo in most of our benchmarks.
method_label: In addition to high performance and the need for little to no boilerplate, our framework is extensible: using the type class pattern, users can provide both (1) custom, easily interchangeable pickle formats and (2) custom picklers, to override the default behavior of the pickling framework.
result_label: In benchmarks, we compare scala/pickling with other popular industrial frameworks, and present results on time, memory usage, and size when pickling/unpickling a number of data types used in real-world, large-scale distributed applications and frameworks.

===================================
paper_id: 7923374; YEAR: 2006
adju relevance: Irrelevant (0)
difference: 0; annotator4: 0; annotator3: 0
sources: title_tfidf
TITLE: A stable programming language
ABSTRACT: background_label: AbstractIt is well-known that stable models (as dI-domains, qualitative domains and coherence spaces) are not fully abstract for the language PCF.
objective_label: This fact is related to the existence of stable parallel functions and of stable functions that are not monotone with respect to the extensional order, which cannot be defined by programs of PCF.In this paper, a paradigmatic programming language named St PCF is proposed, which extends the language PCF with two additional operators.
result_label: The operational description of the extended language is presented in an effective way, although the evaluation of one of the new operators cannot be formalized in a PCF-like rewrite system.Since St PCF can define all finite cliques of coherence spaces the above gap with stable models is filled, consequently stable models are fully abstract for the extended language.

===================================
paper_id: 16624116; YEAR: 2001
adju relevance: Irrelevant (0)
difference: 0; annotator4: 0; annotator3: 0
sources: abs_tfidfcbow200 - abs_tfidf
TITLE: Symbiotic reflection between an object-oriented and a logic programming language
ABSTRACT: background_label: Meta-programming is the act of using one system or language to reason about another one.
background_label: Reflection describes systems that have access to and change a causally connected representation of themselves, hence leading to self-extensible systems .
background_label: Up to now, most of the reflective languages have been implemented in the same paradigm.
objective_label: In this paper, we propose \emphsymbiotic reflection as a way to integrate a meta programming language with the object-oriented language it reasons about and is implemented in.
method_label: New to this approach is that any element of the implementation language can be reasoned about and acted upon (not only the self representation), and that both languages are of different paradigms.
method_label: Moreover, every language implementer that is faced with the problem of allowing the base language to access the underlying meta-language has to solve the problem of enabling entity transfer between both worlds.
method_label: We propose a uniform schema, called upping/downing, to this problem that avoid explicit wrapping or typechecking.
method_label: We illustrate this with SOUL (the Smalltalk Open Unification Language), a logic programming language in symbiotic reflection with the object-oriented language Smalltalk.
result_label: We show how SOUL does logic reasoning directly on Smalltalk objects, and how to use this to implement type snooping

===================================
paper_id: 7629822; YEAR: 2016
adju relevance: Irrelevant (0)
difference: 0; annotator4: 0; annotator3: 0
sources: abs_tfidf
TITLE: Study of Large Data Resources for Multilingual Training and System Porting
ABSTRACT: background_label: Abstract This study investigates the behavior of a feature extraction neural network model trained on a large amount of single language data (“source language”) on a set of under-resourced target languages.
method_label: The coverage of the source language acoustic space was changed in two ways: (1) by changing the amount of training data and (2) by altering the level of detail of acoustic units (by changing the triphone clustering).
method_label: We observe the effect of these changes on the performance on target language in two scenarios: (1) the source-language NNs were used directly, (2) NNs were first ported to target language.
result_label: The results show that increasing coverage as well as level of detail on the source language improves the target language system performance in both scenarios.
result_label: For the first one, both source language characteristic have about the same effect.
result_label: For the second scenario, the amount of data in source language is more important than the level of detail.
result_label: The possibility to include large data into multilingual training set was also investigated.
result_label: Our experiments point out possible risk of over-weighting the NNs towards the source language with large data.
result_label: This degrades the performance on part of the target languages, compared to the setting where the amounts of data per language are balanced.

===================================
paper_id: 13467834; YEAR: 1997
adju relevance: Irrelevant (0)
difference: 0; annotator4: 0; annotator3: 0
sources: title_cbow200 - title_tfidfcbow200
TITLE: Autonomous Semi-Reactive Agent Design Based on Incremental Inductive Learning in Logic Programming
ABSTRACT: objective_label: Department of Computer Science, University of Milanvia Comelico, 39 20135 Milan Italyemail: marcy@morgana.usr.dsi.unimi.it, lanzarone@hermes.mc.dsi.unimi.itABSTRACTIn this paper we study the problems involved in realising an intelligent agent which interacts with an unknownenvironment and builds an inductive model of it which is incrementally updated during interaction.
objective_label: The projectbelongs to the context of logic programming and is oriented to the construction of a learner and a planner - the basecomponents of the agent - sharing the same knowledge base (the model of the environment), which is represented inextended propositional language.
objective_label: This paper is particularly devoted to describing the problems related with thedefinition of the knowledge representation formalism and with learning, which is symbolic, inductive andincremental.
method_label: This approach to building intelligent agents differs from the current literature about this subject, since forthe first time we try to adopt a general-purpose inductive symbolic learner for the learning component of an agentwhich interacts with the environment in real-time.
result_label: All the project choices will be oriented to conciling the need forreduced computational costs with the ability to reach the assigned goals in complex environments and in an acceptabletime; this trade-off, as we will see, influences both the choice of the knowledge representation language and thereasoning techniques, which must not only be extremely efficient, but also very well integrated between themselves.

===================================
paper_id: 25434922; YEAR: 2018
adju relevance: Irrelevant (0)
difference: 1; annotator4: 1; annotator3: 0
sources: title_cbow200 - title_tfidfcbow200
TITLE: Interactive Language Acquisition with One-shot Visual Concept Learning through a Conversational Game
ABSTRACT: background_label: Building intelligent agents that can communicate with and learn from humans in natural language is of great value.
background_label: Supervised language learning is limited by the ability of capturing mainly the statistics of training data, and is hardly adaptive to new scenarios or flexible for acquiring new knowledge without inefficient retraining or catastrophic forgetting.
objective_label: We highlight the perspective that conversational interaction serves as a natural interface both for language learning and for novel knowledge acquisition and propose a joint imitation and reinforcement approach for grounded language learning through an interactive conversational game.
method_label: The agent trained with this approach is able to actively acquire information by asking questions about novel objects and use the just-learned knowledge in subsequent conversations in a one-shot fashion.
result_label: Results compared with other methods verified the effectiveness of the proposed approach.

===================================
paper_id: 26553546; YEAR: 2018
adju relevance: Irrelevant (0)
difference: 1; annotator4: 1; annotator3: 0
sources: title_tfidf - title_cbow200 - specter
TITLE: Deep Reinforcement Learning for Programming Language Correction
ABSTRACT: background_label: Novice programmers often struggle with the formal syntax of programming languages.
objective_label: To assist them, we design a novel programming language correction framework amenable to reinforcement learning.
method_label: The framework allows an agent to mimic human actions for text navigation and editing.
method_label: We demonstrate that the agent can be trained through self-exploration directly from the raw input, that is, program text itself, without any knowledge of the formal syntax of the programming language.
method_label: We leverage expert demonstrations for one tenth of the training data to accelerate training.
method_label: The proposed technique is evaluated on 6975 erroneous C programs with typographic errors, written by students during an introductory programming course.
result_label: Our technique fixes 14% more programs and 29% more compiler error messages relative to those fixed by a state-of-the-art tool, DeepFix, which uses a fully supervised neural machine translation approach.

===================================
paper_id: 6527359; YEAR: 2008
adju relevance: Irrelevant (0)
difference: 0; annotator4: 0; annotator3: 0
sources: abs_tfidf
TITLE: Integrating whole body motion primitives and natural language for humanoid robots
ABSTRACT: objective_label: This paper describes the novel approach to integration of natural language processing and symbolization of motion patterns in order to allow for humanoid robotpsilas acquisition of language.
method_label: This framework consists of two models : motion language model and natural language model.
method_label: In the motion language model, morpheme words are stochastically associated with symbolized motion patterns via latent variables.
method_label: The association is defined by probability that the motion pattern generates the latent variable and probability that the latent variable generates the morpheme word.
method_label: The natural language model represents order relation among the morpheme words via word classes by using hidden Markov model.
method_label: The motion language model and the natural language model are equivalent to semantics and syntax respectively.
method_label: Integration of the motion language model and the natural language model achieves linguistic interpretation of motion patterns by composing semantically and syntactically appropriate sentence.
method_label: The efficient algorithm for the composition is proposed.
result_label: The validity of the motion language model, the natural language model and the integration is demonstrated by testing the implemented algorithm on human motion data.

===================================
paper_id: 10997980; YEAR: 2015
adju relevance: Irrelevant (0)
difference: 0; annotator4: 0; annotator3: 0
sources: specter - abs_tfidf - abs_tfidfcbow200
TITLE: Natural Language Understanding with Distributed Representation
ABSTRACT: background_label: This is a lecture note for the course DS-GA 3001<Natural Language Understanding with Distributed Representation>at the Center for Data Science , New York University in Fall, 2015.
background_label: As the name of the course suggests, this lecture note introduces readers to a neural network based approach to natural language understanding/processing.
method_label: In order to make it as self-contained as possible, I spend much time on describing basics of machine learning and neural networks, only after which how they are used for natural languages is introduced.
result_label: On the language front, I almost solely focus on language modelling and machine translation, two of which I personally find most fascinating and most fundamental to natural language understanding.

===================================
paper_id: 58744159; YEAR: 1988
adju relevance: Irrelevant (0)
difference: 0; annotator4: 0; annotator3: 0
sources: title_cbow200 - title_tfidf
TITLE: ConMan: A visual programming language for interactive graphics
ABSTRACT: background_label: A grinder-mixer having a trough-shaped mixing tank, a horizontal transfer and mixing auger seated along the bottom of the tank and extending into the hammer mill, and a vertical auger in the tank for elevating the material for recirculation or discharge.
background_label: Mixing capacity is increased with the larger tank and bridging of material is minimized with steeply inclined tank walls, a centrally mounted agitator and the trough-mounted mixing auger.
method_label: Power train demands are reduced through utilizing only two auger conveyors to transfer material from the hammer mill, mix it in the tank and elevate it for recirculation or discharge.
result_label: Improved intermixing is provided through stepped pitch flights provided on the horizontal mixing auger.

===================================
paper_id: 8829260; YEAR: 1999
adju relevance: Irrelevant (0)
difference: 0; annotator4: 0; annotator3: 0
sources: title_tfidfcbow200 - title_cbow200
TITLE: The µ-TBL System: Logic Programming Tools for Transformation-Based Learning
ABSTRACT: background_label: AbstractThe #u-TBL system represents an attempt to use the search and database capabilities of the Prolog programming language to implement a generalized form of transformation-based learning.
background_label: In the true spirit of logic-programming, the implementation is 'derived' from a declarative, logical interpretation of transformation rules.
method_label: The #-TBL system recognizes four kinds of rules, that can be used to implement various kinds of disambiguators, including Constraint Grammar disambiguators as well as more traditional 'Brill-taggers'.
result_label: Results from a number of experiments and benchmarks are presented which show that the system is both flex-" ible and efficient.

===================================
paper_id: 46974778; YEAR: 2004
adju relevance: Irrelevant (0)
difference: 0; annotator4: 0; annotator3: 0
sources: abs_tfidf
TITLE: Linguistics and natural logic
ABSTRACT: background_label: Evidence is presented to show that the role of a generative grammar of a natural language is not merely to generate the grammatical sentences of that language, but also to relate them to their logical forms.
objective_label: The notion of logical form is to be made sense of in terms a ‘natural logic’, a logical for natural language, whose goals are to express all concepts capable of being expressed in natural language, to characterize all the valid inferences that can be made in natural language, and to mesh with adequate linguistic descriptions of all natural languages.
method_label: The latter requirement imposes empirical linguistic constraints on natural logic.
result_label: A number of examples are discussed.

===================================
paper_id: 198147980; YEAR: 2019
adju relevance: Irrelevant (0)
difference: 0; annotator4: 0; annotator3: 0
sources: title_cbow200 - title_tfidf - title_tfidfcbow200
TITLE: Towards meta-interpretive learning of programming language semantics
ABSTRACT: background_label: We introduce a new application for inductive logic programming: learning the semantics of programming languages from example evaluations.
method_label: In this short paper, we explored a simplified task in this domain using the Metagol meta-interpretive learning system.
result_label: We highlighted the challenging aspects of this scenario, including abstracting over function symbols, nonterminating examples, and learning non-observed predicates, and proposed extensions to Metagol helpful for overcoming these challenges, which may prove useful in other domains.

===================================
paper_id: 14798421; YEAR: 2015
adju relevance: Irrelevant (0)
difference: 0; annotator4: 0; annotator3: 0
sources: title_cbow200 - title_tfidfcbow200
TITLE: Language Migration in non-CS Introductory Programming through Mutual Language Translation Environment
ABSTRACT: background_label: In the past decade, improvements have been made to the environments used for introductory programming education, including by the introduction of visual programming languages such as Squeak and Scratch.
background_label: However, migration from these languages to text-based programming languages such as C and Java is still a problem.
method_label: Hence, using the OpenBlocks framework proposed at the Massachusetts Institute of Technology, we developed a system named BlockEditor, which can translate bidirectionally between Block (the block language used here) and Java.
method_label: We conducted an empirical study of this system in an introductory programming course taken by approximately 100 university students not majoring in computer science.
method_label: When students were given opportunities to select the language to solve their programming assignments, we traced their selection by tracking working time with BlockEditor or Java for each individual student.
result_label: The results illustrate the nature of the seamless migration from Block to Java, and show that there is great diversity in the timing and speed of migration to Java by each individual.
result_label: Additionally, we found that students with low self-evaluation of their skill chose to use Block at a significantly higher rate than did students with high self-evaluation.
result_label: This suggests that BlockEditor can act as scaffolding for students by promoting mixed programming between Block and Java in their migration phase.

===================================
paper_id: 39159868; YEAR: 2015
adju relevance: Irrelevant (0)
difference: 0; annotator4: 0; annotator3: 0
sources: abs_tfidfcbow200 - abs_tfidf
TITLE: RESTFul POS tagging WEB service for Sinhala language
ABSTRACT: background_label: In the present context of human computer interaction, world has achieved tremendous progress in the field of Natural Language Processing (NLP) applications.
background_label: The availability of lexical resources is vital to many natural language processing in the field of computation linguistics.
background_label: But only few languages in the world have the advantage of having enough lexical resources.
background_label: Though Sinhala language has a long history, Natural Language Processing and computational linguistic aided development of the language is far behind compared with other languages.
background_label: Researches on NLP for Sinhala language can be pushed by creation of required lexical resources and tools.
objective_label: In this paper we present our research work that was carried out for contributing to NLP based development of the language by developing a part of speech tagger for Sinhala language.
result_label: The tagger we developed shows over 91% of an accuracy, and the tagger is available as RESTFul web service on the Internet that is freely accessible to the public.

===================================
paper_id: 2617263; YEAR: 2013
adju relevance: Irrelevant (0)
difference: 1; annotator4: 1; annotator3: 0
sources: title_cbow200
TITLE: Learning Task Formulations through Situated Interactive Instruction
ABSTRACT: background_label: We present an agent, called RosieTAG, which is implemented in Soar and interacts with an external robotic environment.
background_label: Rosie learns new games through interactive instruction with a human via restricted natural language.
method_label: Instead of learning policy or strategy information as is common in other game learners, Rosie learns multiple game formulations (the objects, players, and rules of a game) and then uses its own general strategies to solve them.
result_label: We describe the structure and functionality of Rosie, and evaluate its competence, generality, communication efficiency, communication accessibility, and ability to continuously learn and accumulate new tasks and new task knowledge.

===================================
paper_id: 17781156; YEAR: 2003
adju relevance: Irrelevant (0)
difference: 0; annotator4: 0; annotator3: 0
sources: abs_cbow200
TITLE: SOUL and Smalltalk - Just Married: Evolution of the Interaction between a Logic and an Object-Oriented Language towards Symbiosis
ABSTRACT: background_label: The Smalltalk Open Unification Language is a Prolog-like language embedded in the object-oriented language Smalltalk [5].
background_label: Over the years, it has been used as a research platform for applying logic programming to a variety of problems in object-oriented software engineering, some examples are: representing domain knowledge explicitly [3]; reasoning about object-oriented design [15,14]; checking and enforcing programming patterns [11]; ; checking architectural conformance [16] and making the crosscuts in Aspect-Oriented Programming more robust [6].
background_label: These examples fit in the wider research of Declarative Meta Programming, where SOUL is used as a meta language to reason about Smalltalk code.
method_label: Recently, we explored a different usage of SOUL in connecting business rules and core application functionality [2], which involves reasoning about Smalltalk objects.
result_label: We found we had to improve on SOUL’s existing mechanism for interacting with those objects because it was not transparent: it was clear from the SOUL code when rules were invoked and when messages were sent to objects, vice-versa solving queries from methods was rather clumsy.
other_label: Ideally we would like to achieve a linguistic symbiosis between the two languages: the possibility for programs to call programs written in another language as if they were written in the same [8,13].
background_label: Such a transparent interaction would make it easy to selectively change the paradigm parts of an application are written in: if we find that a Smalltalk method is better written as a logic rule we should be able to replace it as such without having to change all messages invoking that method.
background_label: We will here take a historical approach to describing the SOUL/Smalltalk symbiosis.
objective_label: We would like to provide an insight into our motivation for and approach to achieve the symbiosis by contrasting three distinct stages in its evolution.
method_label: In a first stage, SOUL was developed as a direct Prolog-derivate with some additional mechanisms for manipulating Smalltalk objects as Prolog values.
method_label: In a second and third stage we explored alternative mechanisms and a more Smalltalk-fitting syntax for SOUL.
result_label: Interestingly, when we performed a survey of other combinations of object-oriented and logic programming we found we could

===================================
paper_id: 11430990; YEAR: 2003
adju relevance: Irrelevant (0)
difference: 0; annotator4: 0; annotator3: 0
sources: title_tfidf
TITLE: Interactive machine learning
ABSTRACT: background_label: Perceptual user interfaces (PUIs) are an important part of ubiquitous computing.
background_label: Creating such interfaces is difficult because of the image and signal processing knowledge required for creating classifiers.
objective_label: We propose an interactive machine-learning (IML) model that allows users to train, classify/view and correct the classifications.
method_label: The concept and implementation details of IML are discussed and contrasted with classical machine learning models.
method_label: Evaluations of two algorithms are also presented.
method_label: We also briefly describe Image Processing with Crayons (Crayons), which is a tool for creating new camera-based interfaces using a simple painting metaphor.
method_label: The Crayons tool embodies our notions of interactive machine learning

===================================
paper_id: 52164739; YEAR: 2018
adju relevance: Irrelevant (0)
difference: 0; annotator4: 0; annotator3: 0
sources: abs_tfidf
TITLE: Localizing Moments in Video with Temporal Language
ABSTRACT: background_label: Localizing moments in a longer video via natural language queries is a new, challenging task at the intersection of language and video understanding.
background_label: Though moment localization with natural language is similar to other language and vision tasks like natural language object retrieval in images, moment localization offers an interesting opportunity to model temporal dependencies and reasoning in text.
objective_label: We propose a new model that explicitly reasons about different temporal segments in a video, and shows that temporal context is important for localizing phrases which include temporal language.
method_label: To benchmark whether our model, and other recent video localization models, can effectively reason about temporal language, we collect the novel TEMPOral reasoning in video and language (TEMPO) dataset.
result_label: Our dataset consists of two parts: a dataset with real videos and template sentences (TEMPO - Template Language) which allows for controlled studies on temporal language, and a human language dataset which consists of temporal sentences annotated by humans (TEMPO - Human Language).

===================================
paper_id: 62204437; YEAR: 2015
adju relevance: Irrelevant (0)
difference: 0; annotator4: 0; annotator3: 0
sources: title_cbow200 - title_tfidfcbow200
TITLE: Interactive Multimedia-based Mobile Application for Learning Iban Language (I-MMAPS for Learning Iban Language)
ABSTRACT: background_label: Abstract The emergence of mobile technological devices has brought along new possibilities to all walks of life in various communities.
background_label: As mobile devices with highest capabilities extend into all areas of human life, they also affected language learning and mobile education.
background_label: There are many mobile applications created for most of the major languages in the world and much lesser amount is available for the far less used languages.
background_label: Iban language is an example of those languages given far less attention as it is not as practical as other world languages.
method_label: Iban language has been chosen to be implemented as a multimedia-based mobile application to promote language learning due to its richness in unique culture and language.
method_label: The application; I- MMAPPS for learning Iban language was designed and developed by adapting conversational method and constructivism learning theory to provide learners a different approach in learning language based on various environments and situations.
method_label: Since Iban pronunciations are different from any Malaysians local dialects, thus the correct pronunciations are vital to assists the learner.
method_label: 30 non native speakers were chosen to test the application.
result_label: The outcomes that this research presented have shown that, this application is a promising development in future research.
result_label: Most of the respondents were satisfied when they learn Iban language using the application.

